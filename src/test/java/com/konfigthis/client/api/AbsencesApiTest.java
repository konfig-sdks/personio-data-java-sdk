/*
 * Personnel Data
 * API for reading and writing personnel data including data about attendances, absences, documents, etc
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AbsencePeriodResponse;
import com.konfigthis.client.model.AbsencePeriodsResponse;
import com.konfigthis.client.model.AbsencesAddAbsenceDataResponse;
import com.konfigthis.client.model.AbsencesAddAbsencePeriodsDataResponse;
import com.konfigthis.client.model.AbsencesListTimeOffTypesResponse;
import com.konfigthis.client.model.CreateAbsencePeriodRequest;
import com.konfigthis.client.model.CreateTimeOffPeriodRequest;
import com.konfigthis.client.model.DeletedAbsenceResponse;
import com.konfigthis.client.model.HourlyAbsencePeriodsResponse;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AbsencesApi
 */
@Disabled
public class AbsencesApiTest {

    private static AbsencesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AbsencesApi(apiClient);
    }

    /**
     * Adds absence data for absence types with **time unit** set to **days**.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAbsenceDataTest() throws ApiException {
        Integer employeeId = null;
        Integer timeOffTypeId = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        Boolean halfDayStart = null;
        Boolean halfDayEnd = null;
        String xPersonioPartnerID = null;
        String xPersonioAppID = null;
        String comment = null;
        Boolean skipApproval = null;
        AbsencesAddAbsenceDataResponse response = api.addAbsenceData(employeeId, timeOffTypeId, startDate, endDate, halfDayStart, halfDayEnd)
                .xPersonioPartnerID(xPersonioPartnerID)
                .xPersonioAppID(xPersonioAppID)
                .comment(comment)
                .skipApproval(skipApproval)
                .execute();
        // TODO: test validations
    }

    /**
     * Adds absence data for absence types with **time unit** set to **hours**. Note that creating periods for absence types with certificate requirement enabled is not supported!
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAbsencePeriodsDataTest() throws ApiException {
        Integer employeeId = null;
        Integer timeOffTypeId = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        String xPersonioPartnerID = null;
        String xPersonioAppID = null;
        LocalDate startTime = null;
        LocalDate endTime = null;
        Boolean halfDayStart = null;
        Boolean halfDayEnd = null;
        String comment = null;
        Boolean skipApproval = null;
        AbsencesAddAbsencePeriodsDataResponse response = api.addAbsencePeriodsData(employeeId, timeOffTypeId, startDate, endDate)
                .xPersonioPartnerID(xPersonioPartnerID)
                .xPersonioAppID(xPersonioAppID)
                .startTime(startTime)
                .endTime(endTime)
                .halfDayStart(halfDayStart)
                .halfDayEnd(halfDayEnd)
                .comment(comment)
                .skipApproval(skipApproval)
                .execute();
        // TODO: test validations
    }

    /**
     * Deletes absence period data for absence types with **time unit** set to **days**.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAbsenceDataTest() throws ApiException {
        Integer id = null;
        String xPersonioPartnerID = null;
        String xPersonioAppID = null;
        DeletedAbsenceResponse response = api.deleteAbsenceData(id)
                .xPersonioPartnerID(xPersonioPartnerID)
                .xPersonioAppID(xPersonioAppID)
                .execute();
        // TODO: test validations
    }

    /**
     * Deletes absence period data for absence types with **time unit** set to **hours**.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePeriodDataTest() throws ApiException {
        UUID id = null;
        String xPersonioPartnerID = null;
        String xPersonioAppID = null;
        DeletedAbsenceResponse response = api.deletePeriodData(id)
                .xPersonioPartnerID(xPersonioPartnerID)
                .xPersonioAppID(xPersonioAppID)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets an absence period for absences with **time unit** set to **days**.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAbsencePeriodTest() throws ApiException {
        Integer id = null;
        String xPersonioPartnerID = null;
        String xPersonioAppID = null;
        AbsencePeriodResponse response = api.getAbsencePeriod(id)
                .xPersonioPartnerID(xPersonioPartnerID)
                .xPersonioAppID(xPersonioAppID)
                .execute();
        // TODO: test validations
    }

    /**
     * Fetches absence periods for absences with **time unit** set to **days**. The result can be &#x60;paginated&#x60; and &#x60;filtered&#x60; by period and/or specific employee/employees. The result contains a list of absence periods.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAbsencePeriodsTest() throws ApiException {
        String xPersonioPartnerID = null;
        String xPersonioAppID = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        LocalDate updatedFrom = null;
        LocalDate updatedTo = null;
        List<Integer> employees = null;
        Integer limit = null;
        Integer offset = null;
        AbsencePeriodsResponse response = api.getAbsencePeriods()
                .xPersonioPartnerID(xPersonioPartnerID)
                .xPersonioAppID(xPersonioAppID)
                .startDate(startDate)
                .endDate(endDate)
                .updatedFrom(updatedFrom)
                .updatedTo(updatedTo)
                .employees(employees)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Fetches absence periods for absences with **time unit** set to **hours**. The result can be &#x60;paginated&#x60; and &#x60;filtered&#x60; by period and/or specific employee/employees. The result contains a list of hourly absence periods.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHourlyPeriodsTest() throws ApiException {
        String xPersonioPartnerID = null;
        String xPersonioAppID = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        OffsetDateTime updatedFrom = null;
        OffsetDateTime updatedTo = null;
        List<Integer> employees = null;
        List<String> absenceTypes = null;
        List<String> absencePeriods = null;
        Integer limit = null;
        Integer offset = null;
        HourlyAbsencePeriodsResponse response = api.getHourlyPeriods()
                .xPersonioPartnerID(xPersonioPartnerID)
                .xPersonioAppID(xPersonioAppID)
                .startDate(startDate)
                .endDate(endDate)
                .updatedFrom(updatedFrom)
                .updatedTo(updatedTo)
                .employees(employees)
                .absenceTypes(absenceTypes)
                .absencePeriods(absencePeriods)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Provides a list of absence types for absences **time unit** set to either **days** or **hours**. For example &#39;Paid vacation&#39;, &#39;Parental leave&#39; or &#39;Home office&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTimeOffTypesTest() throws ApiException {
        String xPersonioPartnerID = null;
        String xPersonioAppID = null;
        Integer limit = null;
        Integer offset = null;
        AbsencesListTimeOffTypesResponse response = api.listTimeOffTypes()
                .xPersonioPartnerID(xPersonioPartnerID)
                .xPersonioAppID(xPersonioAppID)
                .limit(limit)
                .offset(offset)
                .execute();
        // TODO: test validations
    }

}
