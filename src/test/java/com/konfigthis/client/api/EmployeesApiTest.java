/*
 * Personnel Data
 * API for reading and writing personnel data including data about attendances, absences, documents, etc
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.EmployeeAbsenceBalance;
import com.konfigthis.client.model.EmployeeCreatedResponse;
import com.konfigthis.client.model.EmployeeResponse;
import com.konfigthis.client.model.EmployeeUpdatedResponse;
import com.konfigthis.client.model.EmployeesCreateEmployeeRequest;
import com.konfigthis.client.model.EmployeesCreateEmployeeRequest1;
import com.konfigthis.client.model.EmployeesCreateEmployeeRequestEmployee;
import com.konfigthis.client.model.EmployeesListAttributesResponse;
import com.konfigthis.client.model.EmployeesResponse;
import com.konfigthis.client.model.EmployeesUpdateEmployeeFieldsRequest;
import com.konfigthis.client.model.EmployeesUpdateEmployeeFieldsRequest1;
import com.konfigthis.client.model.EmployeesUpdateEmployeeFieldsRequestEmployee;
import java.io.File;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmployeesApi
 */
@Disabled
public class EmployeesApiTest {

    private static EmployeesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EmployeesApi(apiClient);
    }

    /**
     * Create an employee
     *
     * Creates a new employee. If the employee&#39;s status is not provided, it will be set based on the &#x60;hire_date&#x60; value - if it is in the past, status will be &#x60;active&#x60;, otherwise &#x60;onboarding&#x60;. This endpoint responds with the &#x60;id&#x60; of the created employee in case of success. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEmployeeTest() throws ApiException {
        EmployeesCreateEmployeeRequestEmployee employee = null;
        String xPersonioPartnerID = null;
        String xPersonioAppID = null;
        EmployeeCreatedResponse response = api.createEmployee()
                .employee(employee)
                .xPersonioPartnerID(xPersonioPartnerID)
                .xPersonioAppID(xPersonioAppID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve the absence balance for a specific employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAbsenceBalanceTest() throws ApiException {
        Integer employeeId = null;
        String xPersonioPartnerID = null;
        String xPersonioAppID = null;
        EmployeeAbsenceBalance response = api.getAbsenceBalance(employeeId)
                .xPersonioPartnerID(xPersonioPartnerID)
                .xPersonioAppID(xPersonioAppID)
                .execute();
        // TODO: test validations
    }

    /**
     * This endpoint is an alias for &#x60;/company/employees/attributes&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomAttributesTest() throws ApiException {
        String xPersonioPartnerID = null;
        String xPersonioAppID = null;
        api.getCustomAttributes()
                .xPersonioPartnerID(xPersonioPartnerID)
                .xPersonioAppID(xPersonioAppID)
                .execute();
        // TODO: test validations
    }

    /**
     * List Company Employees
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListTest() throws ApiException {
        String xPersonioPartnerID = null;
        String xPersonioAppID = null;
        Integer limit = null;
        Integer offset = null;
        String email = null;
        List<String> attributes = null;
        String updatedSince = null;
        EmployeesResponse response = api.getList()
                .xPersonioPartnerID(xPersonioPartnerID)
                .xPersonioAppID(xPersonioAppID)
                .limit(limit)
                .offset(offset)
                .email(email)
                .attributes(attributes)
                .updatedSince(updatedSince)
                .execute();
        // TODO: test validations
    }

    /**
     * Lists all the allowed atrributes per API credentials including custom (dynamic) attributes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAttributesTest() throws ApiException {
        String xPersonioPartnerID = null;
        String xPersonioAppID = null;
        EmployeesListAttributesResponse response = api.listAttributes()
                .xPersonioPartnerID(xPersonioPartnerID)
                .xPersonioAppID(xPersonioAppID)
                .execute();
        // TODO: test validations
    }

    /**
     * Show employee by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showByIdTest() throws ApiException {
        Integer employeeId = null;
        String xPersonioPartnerID = null;
        String xPersonioAppID = null;
        EmployeeResponse response = api.showById(employeeId)
                .xPersonioPartnerID(xPersonioPartnerID)
                .xPersonioAppID(xPersonioAppID)
                .execute();
        // TODO: test validations
    }

    /**
     * Show employee&#39;s profile picture. If profile picture is missing, the 404 error will be thrown. The &#x60;Profile Picture&#x60; attribute has to be whitelisted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showProfilePictureTest() throws ApiException {
        Integer employeeId = null;
        Integer width = null;
        String xPersonioPartnerID = null;
        String xPersonioAppID = null;
        File response = api.showProfilePicture(employeeId, width)
                .xPersonioPartnerID(xPersonioPartnerID)
                .xPersonioAppID(xPersonioAppID)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an employee
     *
     * Updates an existing employee. Note: Only the fields that are listed in the body example are updatable. Attributes that are not part of the sample request body but are present inside the request are ignored. It&#39;s not possible to update the Email field. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmployeeFieldsTest() throws ApiException {
        Integer employeeId = null;
        EmployeesUpdateEmployeeFieldsRequestEmployee employee = null;
        String xPersonioPartnerID = null;
        String xPersonioAppID = null;
        EmployeeUpdatedResponse response = api.updateEmployeeFields(employeeId)
                .employee(employee)
                .xPersonioPartnerID(xPersonioPartnerID)
                .xPersonioAppID(xPersonioAppID)
                .execute();
        // TODO: test validations
    }

}
