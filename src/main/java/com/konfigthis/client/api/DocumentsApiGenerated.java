/*
 * Personnel Data
 * API for reading and writing personnel data including data about attendances, absences, documents, etc
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DocumentCategoriesResponse;
import com.konfigthis.client.model.DocumentUploadRequest;
import com.konfigthis.client.model.DocumentUploadSuccessResponse;
import java.io.File;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DocumentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DocumentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCategoriesCall(String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/document-categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoriesValidateBeforeCall(String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        return getCategoriesCall(xPersonioPartnerID, xPersonioAppID, _callback);

    }


    private ApiResponse<DocumentCategoriesResponse> getCategoriesWithHttpInfo(String xPersonioPartnerID, String xPersonioAppID) throws ApiException {
        okhttp3.Call localVarCall = getCategoriesValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, null);
        Type localVarReturnType = new TypeToken<DocumentCategoriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCategoriesAsync(String xPersonioPartnerID, String xPersonioAppID, final ApiCallback<DocumentCategoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoriesValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, _callback);
        Type localVarReturnType = new TypeToken<DocumentCategoriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCategoriesRequestBuilder {
        private String xPersonioPartnerID;
        private String xPersonioAppID;

        private GetCategoriesRequestBuilder() {
        }

        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return GetCategoriesRequestBuilder
         */
        public GetCategoriesRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return GetCategoriesRequestBuilder
         */
        public GetCategoriesRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Build call for getCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCategoriesCall(xPersonioPartnerID, xPersonioAppID, _callback);
        }


        /**
         * Execute getCategories request
         * @return DocumentCategoriesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public DocumentCategoriesResponse execute() throws ApiException {
            ApiResponse<DocumentCategoriesResponse> localVarResp = getCategoriesWithHttpInfo(xPersonioPartnerID, xPersonioAppID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCategories request with HTTP info returned
         * @return ApiResponse&lt;DocumentCategoriesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DocumentCategoriesResponse> executeWithHttpInfo() throws ApiException {
            return getCategoriesWithHttpInfo(xPersonioPartnerID, xPersonioAppID);
        }

        /**
         * Execute getCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DocumentCategoriesResponse> _callback) throws ApiException {
            return getCategoriesAsync(xPersonioPartnerID, xPersonioAppID, _callback);
        }
    }

    /**
     * 
     * This endpoint is responsible for fetching all document categories of the company. The result contains a list of document categories.
     * @return GetCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetCategoriesRequestBuilder getCategories() throws IllegalArgumentException {
        return new GetCategoriesRequestBuilder();
    }
    private okhttp3.Call uploadForEmployeesCall(String title, Integer employeeId, Integer categoryId, File _file, String xPersonioPartnerID, String xPersonioAppID, String comment, LocalDate date, DocumentUploadRequest documentUploadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentUploadRequest;

        // create path and map variables
        String localVarPath = "/company/documents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (comment != null) {
            localVarFormParams.put("comment", comment);
        }

        if (employeeId != null) {
            localVarFormParams.put("employee_id", employeeId);
        }

        if (categoryId != null) {
            localVarFormParams.put("category_id", categoryId);
        }

        if (date != null) {
            localVarFormParams.put("date", date);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadForEmployeesValidateBeforeCall(String title, Integer employeeId, Integer categoryId, File _file, String xPersonioPartnerID, String xPersonioAppID, String comment, LocalDate date, DocumentUploadRequest documentUploadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling uploadForEmployees(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling uploadForEmployees(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling uploadForEmployees(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadForEmployees(Async)");
        }

        return uploadForEmployeesCall(title, employeeId, categoryId, _file, xPersonioPartnerID, xPersonioAppID, comment, date, documentUploadRequest, _callback);

    }


    private ApiResponse<DocumentUploadSuccessResponse> uploadForEmployeesWithHttpInfo(String title, Integer employeeId, Integer categoryId, File _file, String xPersonioPartnerID, String xPersonioAppID, String comment, LocalDate date, DocumentUploadRequest documentUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadForEmployeesValidateBeforeCall(title, employeeId, categoryId, _file, xPersonioPartnerID, xPersonioAppID, comment, date, documentUploadRequest, null);
        Type localVarReturnType = new TypeToken<DocumentUploadSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadForEmployeesAsync(String title, Integer employeeId, Integer categoryId, File _file, String xPersonioPartnerID, String xPersonioAppID, String comment, LocalDate date, DocumentUploadRequest documentUploadRequest, final ApiCallback<DocumentUploadSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadForEmployeesValidateBeforeCall(title, employeeId, categoryId, _file, xPersonioPartnerID, xPersonioAppID, comment, date, documentUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<DocumentUploadSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadForEmployeesRequestBuilder {
        private final String title;
        private final Integer employeeId;
        private final Integer categoryId;
        private final File _file;
        private String xPersonioPartnerID;
        private String xPersonioAppID;
        private String comment;
        private LocalDate date;

        private UploadForEmployeesRequestBuilder(String title, Integer employeeId, Integer categoryId, File _file) {
            this.title = title;
            this.employeeId = employeeId;
            this.categoryId = categoryId;
            this._file = _file;
        }

        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return UploadForEmployeesRequestBuilder
         */
        public UploadForEmployeesRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return UploadForEmployeesRequestBuilder
         */
        public UploadForEmployeesRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Set comment
         * @param comment Optional comment that can be added to the uploaded document. (optional)
         * @return UploadForEmployeesRequestBuilder
         */
        public UploadForEmployeesRequestBuilder comment(String comment) {
            this.comment = comment;
            return this;
        }
        
        /**
         * Set date
         * @param date Optional date can be added to the uploaded document. Must follow the format: Y-m-d (optional)
         * @return UploadForEmployeesRequestBuilder
         */
        public UploadForEmployeesRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for uploadForEmployees
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The document was successfully uploaded to the employees profile </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DocumentUploadRequest documentUploadRequest = buildBodyParams();
            return uploadForEmployeesCall(title, employeeId, categoryId, _file, xPersonioPartnerID, xPersonioAppID, comment, date, documentUploadRequest, _callback);
        }

        private DocumentUploadRequest buildBodyParams() {
            DocumentUploadRequest documentUploadRequest = new DocumentUploadRequest();
            documentUploadRequest.title(this.title);
            documentUploadRequest.comment(this.comment);
            documentUploadRequest.employeeId(this.employeeId);
            documentUploadRequest.categoryId(this.categoryId);
            documentUploadRequest.date(this.date);
            documentUploadRequest._file(this._file);
            return documentUploadRequest;
        }

        /**
         * Execute uploadForEmployees request
         * @return DocumentUploadSuccessResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The document was successfully uploaded to the employees profile </td><td>  -  </td></tr>
         </table>
         */
        public DocumentUploadSuccessResponse execute() throws ApiException {
            DocumentUploadRequest documentUploadRequest = buildBodyParams();
            ApiResponse<DocumentUploadSuccessResponse> localVarResp = uploadForEmployeesWithHttpInfo(title, employeeId, categoryId, _file, xPersonioPartnerID, xPersonioAppID, comment, date, documentUploadRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadForEmployees request with HTTP info returned
         * @return ApiResponse&lt;DocumentUploadSuccessResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The document was successfully uploaded to the employees profile </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DocumentUploadSuccessResponse> executeWithHttpInfo() throws ApiException {
            DocumentUploadRequest documentUploadRequest = buildBodyParams();
            return uploadForEmployeesWithHttpInfo(title, employeeId, categoryId, _file, xPersonioPartnerID, xPersonioAppID, comment, date, documentUploadRequest);
        }

        /**
         * Execute uploadForEmployees request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The document was successfully uploaded to the employees profile </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DocumentUploadSuccessResponse> _callback) throws ApiException {
            DocumentUploadRequest documentUploadRequest = buildBodyParams();
            return uploadForEmployeesAsync(title, employeeId, categoryId, _file, xPersonioPartnerID, xPersonioAppID, comment, date, documentUploadRequest, _callback);
        }
    }

    /**
     * 
     * This endpoint is responsible for uploading documents for the company employees.
     * @param title Title of the document. Maximum length is 255 characters. (required)
     * @param employeeId Employee identifier (required)
     * @param categoryId Document Category identifier (required)
     * @param _file The document that shall be uploaded to an employees profile. Maximum file size is 30MB. (required)
     * @return UploadForEmployeesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The document was successfully uploaded to the employees profile </td><td>  -  </td></tr>
     </table>
     */
    public UploadForEmployeesRequestBuilder uploadForEmployees(String title, Integer employeeId, Integer categoryId, File _file) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        return new UploadForEmployeesRequestBuilder(title, employeeId, categoryId, _file);
    }
}
