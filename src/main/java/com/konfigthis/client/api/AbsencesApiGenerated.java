/*
 * Personnel Data
 * API for reading and writing personnel data including data about attendances, absences, documents, etc
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AbsencePeriodResponse;
import com.konfigthis.client.model.AbsencePeriodsResponse;
import com.konfigthis.client.model.AbsencesAddAbsenceDataResponse;
import com.konfigthis.client.model.AbsencesAddAbsencePeriodsDataResponse;
import com.konfigthis.client.model.AbsencesListTimeOffTypesResponse;
import com.konfigthis.client.model.CreateAbsencePeriodRequest;
import com.konfigthis.client.model.CreateTimeOffPeriodRequest;
import com.konfigthis.client.model.DeletedAbsenceResponse;
import com.konfigthis.client.model.HourlyAbsencePeriodsResponse;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AbsencesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AbsencesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AbsencesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addAbsenceDataCall(Integer employeeId, Integer timeOffTypeId, LocalDate startDate, LocalDate endDate, Boolean halfDayStart, Boolean halfDayEnd, CreateTimeOffPeriodRequest createTimeOffPeriodRequest, String xPersonioPartnerID, String xPersonioAppID, String comment, Boolean skipApproval, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTimeOffPeriodRequest;

        // create path and map variables
        String localVarPath = "/company/time-offs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeId != null) {
            localVarFormParams.put("employee_id", employeeId);
        }

        if (timeOffTypeId != null) {
            localVarFormParams.put("time_off_type_id", timeOffTypeId);
        }

        if (startDate != null) {
            localVarFormParams.put("start_date", startDate);
        }

        if (endDate != null) {
            localVarFormParams.put("end_date", endDate);
        }

        if (halfDayStart != null) {
            localVarFormParams.put("half_day_start", halfDayStart);
        }

        if (halfDayEnd != null) {
            localVarFormParams.put("half_day_end", halfDayEnd);
        }

        if (comment != null) {
            localVarFormParams.put("comment", comment);
        }

        if (skipApproval != null) {
            localVarFormParams.put("skip_approval", skipApproval);
        }

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAbsenceDataValidateBeforeCall(Integer employeeId, Integer timeOffTypeId, LocalDate startDate, LocalDate endDate, Boolean halfDayStart, Boolean halfDayEnd, CreateTimeOffPeriodRequest createTimeOffPeriodRequest, String xPersonioPartnerID, String xPersonioAppID, String comment, Boolean skipApproval, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling addAbsenceData(Async)");
        }

        // verify the required parameter 'timeOffTypeId' is set
        if (timeOffTypeId == null) {
            throw new ApiException("Missing the required parameter 'timeOffTypeId' when calling addAbsenceData(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling addAbsenceData(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling addAbsenceData(Async)");
        }

        // verify the required parameter 'halfDayStart' is set
        if (halfDayStart == null) {
            throw new ApiException("Missing the required parameter 'halfDayStart' when calling addAbsenceData(Async)");
        }

        // verify the required parameter 'halfDayEnd' is set
        if (halfDayEnd == null) {
            throw new ApiException("Missing the required parameter 'halfDayEnd' when calling addAbsenceData(Async)");
        }

        // verify the required parameter 'createTimeOffPeriodRequest' is set
        if (createTimeOffPeriodRequest == null) {
            throw new ApiException("Missing the required parameter 'createTimeOffPeriodRequest' when calling addAbsenceData(Async)");
        }

        return addAbsenceDataCall(employeeId, timeOffTypeId, startDate, endDate, halfDayStart, halfDayEnd, createTimeOffPeriodRequest, xPersonioPartnerID, xPersonioAppID, comment, skipApproval, _callback);

    }


    private ApiResponse<AbsencesAddAbsenceDataResponse> addAbsenceDataWithHttpInfo(Integer employeeId, Integer timeOffTypeId, LocalDate startDate, LocalDate endDate, Boolean halfDayStart, Boolean halfDayEnd, CreateTimeOffPeriodRequest createTimeOffPeriodRequest, String xPersonioPartnerID, String xPersonioAppID, String comment, Boolean skipApproval) throws ApiException {
        okhttp3.Call localVarCall = addAbsenceDataValidateBeforeCall(employeeId, timeOffTypeId, startDate, endDate, halfDayStart, halfDayEnd, createTimeOffPeriodRequest, xPersonioPartnerID, xPersonioAppID, comment, skipApproval, null);
        Type localVarReturnType = new TypeToken<AbsencesAddAbsenceDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addAbsenceDataAsync(Integer employeeId, Integer timeOffTypeId, LocalDate startDate, LocalDate endDate, Boolean halfDayStart, Boolean halfDayEnd, CreateTimeOffPeriodRequest createTimeOffPeriodRequest, String xPersonioPartnerID, String xPersonioAppID, String comment, Boolean skipApproval, final ApiCallback<AbsencesAddAbsenceDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAbsenceDataValidateBeforeCall(employeeId, timeOffTypeId, startDate, endDate, halfDayStart, halfDayEnd, createTimeOffPeriodRequest, xPersonioPartnerID, xPersonioAppID, comment, skipApproval, _callback);
        Type localVarReturnType = new TypeToken<AbsencesAddAbsenceDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddAbsenceDataRequestBuilder {
        private final Integer employeeId;
        private final Integer timeOffTypeId;
        private final LocalDate startDate;
        private final LocalDate endDate;
        private final Boolean halfDayStart;
        private final Boolean halfDayEnd;
        private String xPersonioPartnerID;
        private String xPersonioAppID;
        private String comment;
        private Boolean skipApproval;

        private AddAbsenceDataRequestBuilder(Integer employeeId, Integer timeOffTypeId, LocalDate startDate, LocalDate endDate, Boolean halfDayStart, Boolean halfDayEnd) {
            this.employeeId = employeeId;
            this.timeOffTypeId = timeOffTypeId;
            this.startDate = startDate;
            this.endDate = endDate;
            this.halfDayStart = halfDayStart;
            this.halfDayEnd = halfDayEnd;
        }

        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return AddAbsenceDataRequestBuilder
         */
        public AddAbsenceDataRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return AddAbsenceDataRequestBuilder
         */
        public AddAbsenceDataRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Set comment
         * @param comment Optional comment (optional)
         * @return AddAbsenceDataRequestBuilder
         */
        public AddAbsenceDataRequestBuilder comment(String comment) {
            this.comment = comment;
            return this;
        }
        
        /**
         * Set skipApproval
         * @param skipApproval Optional, default value is true. If set to false, the approval status of the absence request will be \\\&quot;pending\\\&quot; if an approval rule is set for the absence type in Personio. The respective approval flow will be triggered. (optional)
         * @return AddAbsenceDataRequestBuilder
         */
        public AddAbsenceDataRequestBuilder skipApproval(Boolean skipApproval) {
            this.skipApproval = skipApproval;
            return this;
        }
        
        /**
         * Build call for addAbsenceData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The absence period is successfully created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateTimeOffPeriodRequest createTimeOffPeriodRequest = buildBodyParams();
            return addAbsenceDataCall(employeeId, timeOffTypeId, startDate, endDate, halfDayStart, halfDayEnd, createTimeOffPeriodRequest, xPersonioPartnerID, xPersonioAppID, comment, skipApproval, _callback);
        }

        private CreateTimeOffPeriodRequest buildBodyParams() {
            CreateTimeOffPeriodRequest createTimeOffPeriodRequest = new CreateTimeOffPeriodRequest();
            createTimeOffPeriodRequest.employeeId(this.employeeId);
            createTimeOffPeriodRequest.timeOffTypeId(this.timeOffTypeId);
            createTimeOffPeriodRequest.startDate(this.startDate);
            createTimeOffPeriodRequest.endDate(this.endDate);
            createTimeOffPeriodRequest.halfDayStart(this.halfDayStart);
            createTimeOffPeriodRequest.halfDayEnd(this.halfDayEnd);
            createTimeOffPeriodRequest.comment(this.comment);
            createTimeOffPeriodRequest.skipApproval(this.skipApproval);
            return createTimeOffPeriodRequest;
        }

        /**
         * Execute addAbsenceData request
         * @return AbsencesAddAbsenceDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The absence period is successfully created </td><td>  -  </td></tr>
         </table>
         */
        public AbsencesAddAbsenceDataResponse execute() throws ApiException {
            CreateTimeOffPeriodRequest createTimeOffPeriodRequest = buildBodyParams();
            ApiResponse<AbsencesAddAbsenceDataResponse> localVarResp = addAbsenceDataWithHttpInfo(employeeId, timeOffTypeId, startDate, endDate, halfDayStart, halfDayEnd, createTimeOffPeriodRequest, xPersonioPartnerID, xPersonioAppID, comment, skipApproval);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addAbsenceData request with HTTP info returned
         * @return ApiResponse&lt;AbsencesAddAbsenceDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The absence period is successfully created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AbsencesAddAbsenceDataResponse> executeWithHttpInfo() throws ApiException {
            CreateTimeOffPeriodRequest createTimeOffPeriodRequest = buildBodyParams();
            return addAbsenceDataWithHttpInfo(employeeId, timeOffTypeId, startDate, endDate, halfDayStart, halfDayEnd, createTimeOffPeriodRequest, xPersonioPartnerID, xPersonioAppID, comment, skipApproval);
        }

        /**
         * Execute addAbsenceData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The absence period is successfully created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AbsencesAddAbsenceDataResponse> _callback) throws ApiException {
            CreateTimeOffPeriodRequest createTimeOffPeriodRequest = buildBodyParams();
            return addAbsenceDataAsync(employeeId, timeOffTypeId, startDate, endDate, halfDayStart, halfDayEnd, createTimeOffPeriodRequest, xPersonioPartnerID, xPersonioAppID, comment, skipApproval, _callback);
        }
    }

    /**
     * 
     * Adds absence data for absence types with **time unit** set to **days**.
     * @param employeeId Employee identifier (required)
     * @param timeOffTypeId Time-off type identifier (required)
     * @param startDate Absence start date. Format: yyyy-mm-dd (required)
     * @param endDate Absence end date. Format: yyyy-mm-dd (required)
     * @param halfDayStart Whether the start date is a half-day off. (required)
     * @param halfDayEnd Whether the end date is a half-day off. (required)
     * @param createTimeOffPeriodRequest Absence data (required)
     * @return AddAbsenceDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The absence period is successfully created </td><td>  -  </td></tr>
     </table>
     */
    public AddAbsenceDataRequestBuilder addAbsenceData(Integer employeeId, Integer timeOffTypeId, LocalDate startDate, LocalDate endDate, Boolean halfDayStart, Boolean halfDayEnd) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
        if (timeOffTypeId == null) throw new IllegalArgumentException("\"timeOffTypeId\" is required but got null");
        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
        if (halfDayStart == null) throw new IllegalArgumentException("\"halfDayStart\" is required but got null");
        if (halfDayEnd == null) throw new IllegalArgumentException("\"halfDayEnd\" is required but got null");
        return new AddAbsenceDataRequestBuilder(employeeId, timeOffTypeId, startDate, endDate, halfDayStart, halfDayEnd);
    }
    private okhttp3.Call addAbsencePeriodsDataCall(Integer employeeId, Integer timeOffTypeId, LocalDate startDate, LocalDate endDate, CreateAbsencePeriodRequest createAbsencePeriodRequest, String xPersonioPartnerID, String xPersonioAppID, LocalDate startTime, LocalDate endTime, Boolean halfDayStart, Boolean halfDayEnd, String comment, Boolean skipApproval, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAbsencePeriodRequest;

        // create path and map variables
        String localVarPath = "/company/absence-periods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeId != null) {
            localVarFormParams.put("employee_id", employeeId);
        }

        if (timeOffTypeId != null) {
            localVarFormParams.put("time_off_type_id", timeOffTypeId);
        }

        if (startDate != null) {
            localVarFormParams.put("start_date", startDate);
        }

        if (endDate != null) {
            localVarFormParams.put("end_date", endDate);
        }

        if (startTime != null) {
            localVarFormParams.put("start_time", startTime);
        }

        if (endTime != null) {
            localVarFormParams.put("end_time", endTime);
        }

        if (halfDayStart != null) {
            localVarFormParams.put("half_day_start", halfDayStart);
        }

        if (halfDayEnd != null) {
            localVarFormParams.put("half_day_end", halfDayEnd);
        }

        if (comment != null) {
            localVarFormParams.put("comment", comment);
        }

        if (skipApproval != null) {
            localVarFormParams.put("skip_approval", skipApproval);
        }

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAbsencePeriodsDataValidateBeforeCall(Integer employeeId, Integer timeOffTypeId, LocalDate startDate, LocalDate endDate, CreateAbsencePeriodRequest createAbsencePeriodRequest, String xPersonioPartnerID, String xPersonioAppID, LocalDate startTime, LocalDate endTime, Boolean halfDayStart, Boolean halfDayEnd, String comment, Boolean skipApproval, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling addAbsencePeriodsData(Async)");
        }

        // verify the required parameter 'timeOffTypeId' is set
        if (timeOffTypeId == null) {
            throw new ApiException("Missing the required parameter 'timeOffTypeId' when calling addAbsencePeriodsData(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling addAbsencePeriodsData(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling addAbsencePeriodsData(Async)");
        }

        // verify the required parameter 'createAbsencePeriodRequest' is set
        if (createAbsencePeriodRequest == null) {
            throw new ApiException("Missing the required parameter 'createAbsencePeriodRequest' when calling addAbsencePeriodsData(Async)");
        }

        return addAbsencePeriodsDataCall(employeeId, timeOffTypeId, startDate, endDate, createAbsencePeriodRequest, xPersonioPartnerID, xPersonioAppID, startTime, endTime, halfDayStart, halfDayEnd, comment, skipApproval, _callback);

    }


    private ApiResponse<AbsencesAddAbsencePeriodsDataResponse> addAbsencePeriodsDataWithHttpInfo(Integer employeeId, Integer timeOffTypeId, LocalDate startDate, LocalDate endDate, CreateAbsencePeriodRequest createAbsencePeriodRequest, String xPersonioPartnerID, String xPersonioAppID, LocalDate startTime, LocalDate endTime, Boolean halfDayStart, Boolean halfDayEnd, String comment, Boolean skipApproval) throws ApiException {
        okhttp3.Call localVarCall = addAbsencePeriodsDataValidateBeforeCall(employeeId, timeOffTypeId, startDate, endDate, createAbsencePeriodRequest, xPersonioPartnerID, xPersonioAppID, startTime, endTime, halfDayStart, halfDayEnd, comment, skipApproval, null);
        Type localVarReturnType = new TypeToken<AbsencesAddAbsencePeriodsDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addAbsencePeriodsDataAsync(Integer employeeId, Integer timeOffTypeId, LocalDate startDate, LocalDate endDate, CreateAbsencePeriodRequest createAbsencePeriodRequest, String xPersonioPartnerID, String xPersonioAppID, LocalDate startTime, LocalDate endTime, Boolean halfDayStart, Boolean halfDayEnd, String comment, Boolean skipApproval, final ApiCallback<AbsencesAddAbsencePeriodsDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAbsencePeriodsDataValidateBeforeCall(employeeId, timeOffTypeId, startDate, endDate, createAbsencePeriodRequest, xPersonioPartnerID, xPersonioAppID, startTime, endTime, halfDayStart, halfDayEnd, comment, skipApproval, _callback);
        Type localVarReturnType = new TypeToken<AbsencesAddAbsencePeriodsDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddAbsencePeriodsDataRequestBuilder {
        private final Integer employeeId;
        private final Integer timeOffTypeId;
        private final LocalDate startDate;
        private final LocalDate endDate;
        private String xPersonioPartnerID;
        private String xPersonioAppID;
        private LocalDate startTime;
        private LocalDate endTime;
        private Boolean halfDayStart;
        private Boolean halfDayEnd;
        private String comment;
        private Boolean skipApproval;

        private AddAbsencePeriodsDataRequestBuilder(Integer employeeId, Integer timeOffTypeId, LocalDate startDate, LocalDate endDate) {
            this.employeeId = employeeId;
            this.timeOffTypeId = timeOffTypeId;
            this.startDate = startDate;
            this.endDate = endDate;
        }

        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return AddAbsencePeriodsDataRequestBuilder
         */
        public AddAbsencePeriodsDataRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return AddAbsencePeriodsDataRequestBuilder
         */
        public AddAbsencePeriodsDataRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Set startTime
         * @param startTime Absence start time. Format: HH:mm (hours and minutes) and only required if the start_date and end_date are the same (partial-day absence) (optional)
         * @return AddAbsencePeriodsDataRequestBuilder
         */
        public AddAbsencePeriodsDataRequestBuilder startTime(LocalDate startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set endTime
         * @param endTime Absence end time. Format: HH:mm (hours and minutes) and only required if the start_date and end_date are the same (partial-day absence) (optional)
         * @return AddAbsencePeriodsDataRequestBuilder
         */
        public AddAbsencePeriodsDataRequestBuilder endTime(LocalDate endTime) {
            this.endTime = endTime;
            return this;
        }
        
        /**
         * Set halfDayStart
         * @param halfDayStart Whether the start date is a half-day off, only considered if the start_date and end_date are not the same (more than one day absence) (optional)
         * @return AddAbsencePeriodsDataRequestBuilder
         */
        public AddAbsencePeriodsDataRequestBuilder halfDayStart(Boolean halfDayStart) {
            this.halfDayStart = halfDayStart;
            return this;
        }
        
        /**
         * Set halfDayEnd
         * @param halfDayEnd Whether the end date is a half-day off, only considered if the start_date and end_date are not the same (more than one day absence) (optional)
         * @return AddAbsencePeriodsDataRequestBuilder
         */
        public AddAbsencePeriodsDataRequestBuilder halfDayEnd(Boolean halfDayEnd) {
            this.halfDayEnd = halfDayEnd;
            return this;
        }
        
        /**
         * Set comment
         * @param comment Optional comment (optional)
         * @return AddAbsencePeriodsDataRequestBuilder
         */
        public AddAbsencePeriodsDataRequestBuilder comment(String comment) {
            this.comment = comment;
            return this;
        }
        
        /**
         * Set skipApproval
         * @param skipApproval Optional, default value is true. If set to false, the approval status of the absence request will be \\\&quot;pending\\\&quot; if an approval rule is set for the absence type in Personio. The respective approval flow will be triggered. (optional)
         * @return AddAbsencePeriodsDataRequestBuilder
         */
        public AddAbsencePeriodsDataRequestBuilder skipApproval(Boolean skipApproval) {
            this.skipApproval = skipApproval;
            return this;
        }
        
        /**
         * Build call for addAbsencePeriodsData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The absence period was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateAbsencePeriodRequest createAbsencePeriodRequest = buildBodyParams();
            return addAbsencePeriodsDataCall(employeeId, timeOffTypeId, startDate, endDate, createAbsencePeriodRequest, xPersonioPartnerID, xPersonioAppID, startTime, endTime, halfDayStart, halfDayEnd, comment, skipApproval, _callback);
        }

        private CreateAbsencePeriodRequest buildBodyParams() {
            CreateAbsencePeriodRequest createAbsencePeriodRequest = new CreateAbsencePeriodRequest();
            createAbsencePeriodRequest.employeeId(this.employeeId);
            createAbsencePeriodRequest.timeOffTypeId(this.timeOffTypeId);
            createAbsencePeriodRequest.startDate(this.startDate);
            createAbsencePeriodRequest.endDate(this.endDate);
            createAbsencePeriodRequest.startTime(this.startTime);
            createAbsencePeriodRequest.endTime(this.endTime);
            createAbsencePeriodRequest.halfDayStart(this.halfDayStart);
            createAbsencePeriodRequest.halfDayEnd(this.halfDayEnd);
            createAbsencePeriodRequest.comment(this.comment);
            createAbsencePeriodRequest.skipApproval(this.skipApproval);
            return createAbsencePeriodRequest;
        }

        /**
         * Execute addAbsencePeriodsData request
         * @return AbsencesAddAbsencePeriodsDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The absence period was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public AbsencesAddAbsencePeriodsDataResponse execute() throws ApiException {
            CreateAbsencePeriodRequest createAbsencePeriodRequest = buildBodyParams();
            ApiResponse<AbsencesAddAbsencePeriodsDataResponse> localVarResp = addAbsencePeriodsDataWithHttpInfo(employeeId, timeOffTypeId, startDate, endDate, createAbsencePeriodRequest, xPersonioPartnerID, xPersonioAppID, startTime, endTime, halfDayStart, halfDayEnd, comment, skipApproval);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addAbsencePeriodsData request with HTTP info returned
         * @return ApiResponse&lt;AbsencesAddAbsencePeriodsDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The absence period was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AbsencesAddAbsencePeriodsDataResponse> executeWithHttpInfo() throws ApiException {
            CreateAbsencePeriodRequest createAbsencePeriodRequest = buildBodyParams();
            return addAbsencePeriodsDataWithHttpInfo(employeeId, timeOffTypeId, startDate, endDate, createAbsencePeriodRequest, xPersonioPartnerID, xPersonioAppID, startTime, endTime, halfDayStart, halfDayEnd, comment, skipApproval);
        }

        /**
         * Execute addAbsencePeriodsData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The absence period was successfully created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AbsencesAddAbsencePeriodsDataResponse> _callback) throws ApiException {
            CreateAbsencePeriodRequest createAbsencePeriodRequest = buildBodyParams();
            return addAbsencePeriodsDataAsync(employeeId, timeOffTypeId, startDate, endDate, createAbsencePeriodRequest, xPersonioPartnerID, xPersonioAppID, startTime, endTime, halfDayStart, halfDayEnd, comment, skipApproval, _callback);
        }
    }

    /**
     * 
     * Adds absence data for absence types with **time unit** set to **hours**. Note that creating periods for absence types with certificate requirement enabled is not supported!
     * @param employeeId Employee identifier (required)
     * @param timeOffTypeId Time-off type identifier (required)
     * @param startDate Absence start date. Format: yyyy-mm-dd (required)
     * @param endDate Absence end date. Format: yyyy-mm-dd (required)
     * @param createAbsencePeriodRequest Absence data (required)
     * @return AddAbsencePeriodsDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The absence period was successfully created </td><td>  -  </td></tr>
     </table>
     */
    public AddAbsencePeriodsDataRequestBuilder addAbsencePeriodsData(Integer employeeId, Integer timeOffTypeId, LocalDate startDate, LocalDate endDate) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
        if (timeOffTypeId == null) throw new IllegalArgumentException("\"timeOffTypeId\" is required but got null");
        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
        return new AddAbsencePeriodsDataRequestBuilder(employeeId, timeOffTypeId, startDate, endDate);
    }
    private okhttp3.Call deleteAbsenceDataCall(Integer id, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/time-offs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAbsenceDataValidateBeforeCall(Integer id, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteAbsenceData(Async)");
        }

        return deleteAbsenceDataCall(id, xPersonioPartnerID, xPersonioAppID, _callback);

    }


    private ApiResponse<DeletedAbsenceResponse> deleteAbsenceDataWithHttpInfo(Integer id, String xPersonioPartnerID, String xPersonioAppID) throws ApiException {
        okhttp3.Call localVarCall = deleteAbsenceDataValidateBeforeCall(id, xPersonioPartnerID, xPersonioAppID, null);
        Type localVarReturnType = new TypeToken<DeletedAbsenceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteAbsenceDataAsync(Integer id, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback<DeletedAbsenceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAbsenceDataValidateBeforeCall(id, xPersonioPartnerID, xPersonioAppID, _callback);
        Type localVarReturnType = new TypeToken<DeletedAbsenceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteAbsenceDataRequestBuilder {
        private final Integer id;
        private String xPersonioPartnerID;
        private String xPersonioAppID;

        private DeleteAbsenceDataRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return DeleteAbsenceDataRequestBuilder
         */
        public DeleteAbsenceDataRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return DeleteAbsenceDataRequestBuilder
         */
        public DeleteAbsenceDataRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Build call for deleteAbsenceData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAbsenceDataCall(id, xPersonioPartnerID, xPersonioAppID, _callback);
        }


        /**
         * Execute deleteAbsenceData request
         * @return DeletedAbsenceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedAbsenceResponse execute() throws ApiException {
            ApiResponse<DeletedAbsenceResponse> localVarResp = deleteAbsenceDataWithHttpInfo(id, xPersonioPartnerID, xPersonioAppID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteAbsenceData request with HTTP info returned
         * @return ApiResponse&lt;DeletedAbsenceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedAbsenceResponse> executeWithHttpInfo() throws ApiException {
            return deleteAbsenceDataWithHttpInfo(id, xPersonioPartnerID, xPersonioAppID);
        }

        /**
         * Execute deleteAbsenceData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedAbsenceResponse> _callback) throws ApiException {
            return deleteAbsenceDataAsync(id, xPersonioPartnerID, xPersonioAppID, _callback);
        }
    }

    /**
     * 
     * Deletes absence period data for absence types with **time unit** set to **days**.
     * @param id ID of the absence period to delete (required)
     * @return DeleteAbsenceDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAbsenceDataRequestBuilder deleteAbsenceData(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeleteAbsenceDataRequestBuilder(id);
    }
    private okhttp3.Call deletePeriodDataCall(UUID id, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/absence-periods/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePeriodDataValidateBeforeCall(UUID id, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletePeriodData(Async)");
        }

        return deletePeriodDataCall(id, xPersonioPartnerID, xPersonioAppID, _callback);

    }


    private ApiResponse<DeletedAbsenceResponse> deletePeriodDataWithHttpInfo(UUID id, String xPersonioPartnerID, String xPersonioAppID) throws ApiException {
        okhttp3.Call localVarCall = deletePeriodDataValidateBeforeCall(id, xPersonioPartnerID, xPersonioAppID, null);
        Type localVarReturnType = new TypeToken<DeletedAbsenceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deletePeriodDataAsync(UUID id, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback<DeletedAbsenceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePeriodDataValidateBeforeCall(id, xPersonioPartnerID, xPersonioAppID, _callback);
        Type localVarReturnType = new TypeToken<DeletedAbsenceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeletePeriodDataRequestBuilder {
        private final UUID id;
        private String xPersonioPartnerID;
        private String xPersonioAppID;

        private DeletePeriodDataRequestBuilder(UUID id) {
            this.id = id;
        }

        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return DeletePeriodDataRequestBuilder
         */
        public DeletePeriodDataRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return DeletePeriodDataRequestBuilder
         */
        public DeletePeriodDataRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Build call for deletePeriodData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePeriodDataCall(id, xPersonioPartnerID, xPersonioAppID, _callback);
        }


        /**
         * Execute deletePeriodData request
         * @return DeletedAbsenceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedAbsenceResponse execute() throws ApiException {
            ApiResponse<DeletedAbsenceResponse> localVarResp = deletePeriodDataWithHttpInfo(id, xPersonioPartnerID, xPersonioAppID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deletePeriodData request with HTTP info returned
         * @return ApiResponse&lt;DeletedAbsenceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedAbsenceResponse> executeWithHttpInfo() throws ApiException {
            return deletePeriodDataWithHttpInfo(id, xPersonioPartnerID, xPersonioAppID);
        }

        /**
         * Execute deletePeriodData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedAbsenceResponse> _callback) throws ApiException {
            return deletePeriodDataAsync(id, xPersonioPartnerID, xPersonioAppID, _callback);
        }
    }

    /**
     * 
     * Deletes absence period data for absence types with **time unit** set to **hours**.
     * @param id ID of the absence period to delete (required)
     * @return DeletePeriodDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public DeletePeriodDataRequestBuilder deletePeriodData(UUID id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeletePeriodDataRequestBuilder(id);
    }
    private okhttp3.Call getAbsencePeriodCall(Integer id, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/time-offs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAbsencePeriodValidateBeforeCall(Integer id, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAbsencePeriod(Async)");
        }

        return getAbsencePeriodCall(id, xPersonioPartnerID, xPersonioAppID, _callback);

    }


    private ApiResponse<AbsencePeriodResponse> getAbsencePeriodWithHttpInfo(Integer id, String xPersonioPartnerID, String xPersonioAppID) throws ApiException {
        okhttp3.Call localVarCall = getAbsencePeriodValidateBeforeCall(id, xPersonioPartnerID, xPersonioAppID, null);
        Type localVarReturnType = new TypeToken<AbsencePeriodResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAbsencePeriodAsync(Integer id, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback<AbsencePeriodResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAbsencePeriodValidateBeforeCall(id, xPersonioPartnerID, xPersonioAppID, _callback);
        Type localVarReturnType = new TypeToken<AbsencePeriodResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAbsencePeriodRequestBuilder {
        private final Integer id;
        private String xPersonioPartnerID;
        private String xPersonioAppID;

        private GetAbsencePeriodRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return GetAbsencePeriodRequestBuilder
         */
        public GetAbsencePeriodRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return GetAbsencePeriodRequestBuilder
         */
        public GetAbsencePeriodRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Build call for getAbsencePeriod
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAbsencePeriodCall(id, xPersonioPartnerID, xPersonioAppID, _callback);
        }


        /**
         * Execute getAbsencePeriod request
         * @return AbsencePeriodResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public AbsencePeriodResponse execute() throws ApiException {
            ApiResponse<AbsencePeriodResponse> localVarResp = getAbsencePeriodWithHttpInfo(id, xPersonioPartnerID, xPersonioAppID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAbsencePeriod request with HTTP info returned
         * @return ApiResponse&lt;AbsencePeriodResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AbsencePeriodResponse> executeWithHttpInfo() throws ApiException {
            return getAbsencePeriodWithHttpInfo(id, xPersonioPartnerID, xPersonioAppID);
        }

        /**
         * Execute getAbsencePeriod request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AbsencePeriodResponse> _callback) throws ApiException {
            return getAbsencePeriodAsync(id, xPersonioPartnerID, xPersonioAppID, _callback);
        }
    }

    /**
     * 
     * Gets an absence period for absences with **time unit** set to **days**.
     * @param id Numeric &#x60;id&#x60; of the absence period (required)
     * @return GetAbsencePeriodRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetAbsencePeriodRequestBuilder getAbsencePeriod(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetAbsencePeriodRequestBuilder(id);
    }
    private okhttp3.Call getAbsencePeriodsCall(String xPersonioPartnerID, String xPersonioAppID, LocalDate startDate, LocalDate endDate, LocalDate updatedFrom, LocalDate updatedTo, List<Integer> employees, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/time-offs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (updatedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_from", updatedFrom));
        }

        if (updatedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_to", updatedTo));
        }

        if (employees != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "employees[]", employees));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAbsencePeriodsValidateBeforeCall(String xPersonioPartnerID, String xPersonioAppID, LocalDate startDate, LocalDate endDate, LocalDate updatedFrom, LocalDate updatedTo, List<Integer> employees, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return getAbsencePeriodsCall(xPersonioPartnerID, xPersonioAppID, startDate, endDate, updatedFrom, updatedTo, employees, limit, offset, _callback);

    }


    private ApiResponse<AbsencePeriodsResponse> getAbsencePeriodsWithHttpInfo(String xPersonioPartnerID, String xPersonioAppID, LocalDate startDate, LocalDate endDate, LocalDate updatedFrom, LocalDate updatedTo, List<Integer> employees, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getAbsencePeriodsValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, startDate, endDate, updatedFrom, updatedTo, employees, limit, offset, null);
        Type localVarReturnType = new TypeToken<AbsencePeriodsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAbsencePeriodsAsync(String xPersonioPartnerID, String xPersonioAppID, LocalDate startDate, LocalDate endDate, LocalDate updatedFrom, LocalDate updatedTo, List<Integer> employees, Integer limit, Integer offset, final ApiCallback<AbsencePeriodsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAbsencePeriodsValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, startDate, endDate, updatedFrom, updatedTo, employees, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<AbsencePeriodsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAbsencePeriodsRequestBuilder {
        private String xPersonioPartnerID;
        private String xPersonioAppID;
        private LocalDate startDate;
        private LocalDate endDate;
        private LocalDate updatedFrom;
        private LocalDate updatedTo;
        private List<Integer> employees;
        private Integer limit;
        private Integer offset;

        private GetAbsencePeriodsRequestBuilder() {
        }

        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return GetAbsencePeriodsRequestBuilder
         */
        public GetAbsencePeriodsRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return GetAbsencePeriodsRequestBuilder
         */
        public GetAbsencePeriodsRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate First day of the period to be queried. It is inclusive, so the result starts from and including the provided &#x60;start_date&#x60; (optional)
         * @return GetAbsencePeriodsRequestBuilder
         */
        public GetAbsencePeriodsRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Last day of the period to be queried. It is inclusive, so the result ends on &#x60;end_date&#x60; including absences from the &#x60;end_date&#x60; (optional)
         * @return GetAbsencePeriodsRequestBuilder
         */
        public GetAbsencePeriodsRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set updatedFrom
         * @param updatedFrom Query the periods that created or modified from the date &#x60;updated_from&#x60;. It is inclusive, so all the periods created or modified from the beginning of the &#x60;updated_from&#x60; will be included in the results (optional)
         * @return GetAbsencePeriodsRequestBuilder
         */
        public GetAbsencePeriodsRequestBuilder updatedFrom(LocalDate updatedFrom) {
            this.updatedFrom = updatedFrom;
            return this;
        }
        
        /**
         * Set updatedTo
         * @param updatedTo Query the periods that created or modified until the date &#x60;updated_to&#x60;. It is inclusive, so all the periods created or modified until the end of the &#x60;updated_to&#x60; will be included in the results (optional)
         * @return GetAbsencePeriodsRequestBuilder
         */
        public GetAbsencePeriodsRequestBuilder updatedTo(LocalDate updatedTo) {
            this.updatedTo = updatedTo;
            return this;
        }
        
        /**
         * Set employees
         * @param employees A list of Personio employee ID&#39;s to filter the results. The result filters including only absences of provided employees (optional)
         * @return GetAbsencePeriodsRequestBuilder
         */
        public GetAbsencePeriodsRequestBuilder employees(List<Integer> employees) {
            this.employees = employees;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Pagination attribute to limit the number of absence periods per page (optional, default to 200)
         * @return GetAbsencePeriodsRequestBuilder
         */
        public GetAbsencePeriodsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Pagination attribute to identify which page number you are requesting (optional, default to 0)
         * @return GetAbsencePeriodsRequestBuilder
         */
        public GetAbsencePeriodsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getAbsencePeriods
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAbsencePeriodsCall(xPersonioPartnerID, xPersonioAppID, startDate, endDate, updatedFrom, updatedTo, employees, limit, offset, _callback);
        }


        /**
         * Execute getAbsencePeriods request
         * @return AbsencePeriodsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public AbsencePeriodsResponse execute() throws ApiException {
            ApiResponse<AbsencePeriodsResponse> localVarResp = getAbsencePeriodsWithHttpInfo(xPersonioPartnerID, xPersonioAppID, startDate, endDate, updatedFrom, updatedTo, employees, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAbsencePeriods request with HTTP info returned
         * @return ApiResponse&lt;AbsencePeriodsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AbsencePeriodsResponse> executeWithHttpInfo() throws ApiException {
            return getAbsencePeriodsWithHttpInfo(xPersonioPartnerID, xPersonioAppID, startDate, endDate, updatedFrom, updatedTo, employees, limit, offset);
        }

        /**
         * Execute getAbsencePeriods request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AbsencePeriodsResponse> _callback) throws ApiException {
            return getAbsencePeriodsAsync(xPersonioPartnerID, xPersonioAppID, startDate, endDate, updatedFrom, updatedTo, employees, limit, offset, _callback);
        }
    }

    /**
     * 
     * Fetches absence periods for absences with **time unit** set to **days**. The result can be &#x60;paginated&#x60; and &#x60;filtered&#x60; by period and/or specific employee/employees. The result contains a list of absence periods.
     * @return GetAbsencePeriodsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetAbsencePeriodsRequestBuilder getAbsencePeriods() throws IllegalArgumentException {
        return new GetAbsencePeriodsRequestBuilder();
    }
    private okhttp3.Call getHourlyPeriodsCall(String xPersonioPartnerID, String xPersonioAppID, LocalDate startDate, LocalDate endDate, OffsetDateTime updatedFrom, OffsetDateTime updatedTo, List<Integer> employees, List<String> absenceTypes, List<String> absencePeriods, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/absence-periods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (updatedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_from", updatedFrom));
        }

        if (updatedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_to", updatedTo));
        }

        if (employees != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "employees[]", employees));
        }

        if (absenceTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "absence_types[]", absenceTypes));
        }

        if (absencePeriods != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "absence_periods[]", absencePeriods));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json",
            "problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHourlyPeriodsValidateBeforeCall(String xPersonioPartnerID, String xPersonioAppID, LocalDate startDate, LocalDate endDate, OffsetDateTime updatedFrom, OffsetDateTime updatedTo, List<Integer> employees, List<String> absenceTypes, List<String> absencePeriods, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return getHourlyPeriodsCall(xPersonioPartnerID, xPersonioAppID, startDate, endDate, updatedFrom, updatedTo, employees, absenceTypes, absencePeriods, limit, offset, _callback);

    }


    private ApiResponse<HourlyAbsencePeriodsResponse> getHourlyPeriodsWithHttpInfo(String xPersonioPartnerID, String xPersonioAppID, LocalDate startDate, LocalDate endDate, OffsetDateTime updatedFrom, OffsetDateTime updatedTo, List<Integer> employees, List<String> absenceTypes, List<String> absencePeriods, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getHourlyPeriodsValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, startDate, endDate, updatedFrom, updatedTo, employees, absenceTypes, absencePeriods, limit, offset, null);
        Type localVarReturnType = new TypeToken<HourlyAbsencePeriodsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHourlyPeriodsAsync(String xPersonioPartnerID, String xPersonioAppID, LocalDate startDate, LocalDate endDate, OffsetDateTime updatedFrom, OffsetDateTime updatedTo, List<Integer> employees, List<String> absenceTypes, List<String> absencePeriods, Integer limit, Integer offset, final ApiCallback<HourlyAbsencePeriodsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHourlyPeriodsValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, startDate, endDate, updatedFrom, updatedTo, employees, absenceTypes, absencePeriods, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<HourlyAbsencePeriodsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHourlyPeriodsRequestBuilder {
        private String xPersonioPartnerID;
        private String xPersonioAppID;
        private LocalDate startDate;
        private LocalDate endDate;
        private OffsetDateTime updatedFrom;
        private OffsetDateTime updatedTo;
        private List<Integer> employees;
        private List<String> absenceTypes;
        private List<String> absencePeriods;
        private Integer limit;
        private Integer offset;

        private GetHourlyPeriodsRequestBuilder() {
        }

        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return GetHourlyPeriodsRequestBuilder
         */
        public GetHourlyPeriodsRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return GetHourlyPeriodsRequestBuilder
         */
        public GetHourlyPeriodsRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Filter by absence periods that start at or before given date. (optional)
         * @return GetHourlyPeriodsRequestBuilder
         */
        public GetHourlyPeriodsRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Filter by absence periods that start at or before given date. (optional)
         * @return GetHourlyPeriodsRequestBuilder
         */
        public GetHourlyPeriodsRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set updatedFrom
         * @param updatedFrom Filter by periods that were created or modified from the date updated_from. It is inclusive, so all the periods created or modified from the beginning of the updated_from will be included in the results. (optional)
         * @return GetHourlyPeriodsRequestBuilder
         */
        public GetHourlyPeriodsRequestBuilder updatedFrom(OffsetDateTime updatedFrom) {
            this.updatedFrom = updatedFrom;
            return this;
        }
        
        /**
         * Set updatedTo
         * @param updatedTo Filter by periods that were created or modified until the date updated_to. It is inclusive, so all the periods created or modified until the end of the updated_to will be included in the results. (optional)
         * @return GetHourlyPeriodsRequestBuilder
         */
        public GetHourlyPeriodsRequestBuilder updatedTo(OffsetDateTime updatedTo) {
            this.updatedTo = updatedTo;
            return this;
        }
        
        /**
         * Set employees
         * @param employees A list of Personio employee ID&#39;s to filter the results. The result filters including only absences of provided employees (optional)
         * @return GetHourlyPeriodsRequestBuilder
         */
        public GetHourlyPeriodsRequestBuilder employees(List<Integer> employees) {
            this.employees = employees;
            return this;
        }
        
        /**
         * Set absenceTypes
         * @param absenceTypes A list of Personio absence type IDs to filter the results. The result filters including only absences of provided absence types. (optional)
         * @return GetHourlyPeriodsRequestBuilder
         */
        public GetHourlyPeriodsRequestBuilder absenceTypes(List<String> absenceTypes) {
            this.absenceTypes = absenceTypes;
            return this;
        }
        
        /**
         * Set absencePeriods
         * @param absencePeriods A list of Personio absence period IDs to filter the results. The result filters including only absences containing the provided ids. (optional)
         * @return GetHourlyPeriodsRequestBuilder
         */
        public GetHourlyPeriodsRequestBuilder absencePeriods(List<String> absencePeriods) {
            this.absencePeriods = absencePeriods;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Pagination attribute to limit how many absence periods are returned per page. (optional, default to 200)
         * @return GetHourlyPeriodsRequestBuilder
         */
        public GetHourlyPeriodsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Pagination attribute to identify which page you are requesting, by the form of telling an offset from the first record that would be returned. (optional, default to 0)
         * @return GetHourlyPeriodsRequestBuilder
         */
        public GetHourlyPeriodsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getHourlyPeriods
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHourlyPeriodsCall(xPersonioPartnerID, xPersonioAppID, startDate, endDate, updatedFrom, updatedTo, employees, absenceTypes, absencePeriods, limit, offset, _callback);
        }


        /**
         * Execute getHourlyPeriods request
         * @return HourlyAbsencePeriodsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public HourlyAbsencePeriodsResponse execute() throws ApiException {
            ApiResponse<HourlyAbsencePeriodsResponse> localVarResp = getHourlyPeriodsWithHttpInfo(xPersonioPartnerID, xPersonioAppID, startDate, endDate, updatedFrom, updatedTo, employees, absenceTypes, absencePeriods, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHourlyPeriods request with HTTP info returned
         * @return ApiResponse&lt;HourlyAbsencePeriodsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HourlyAbsencePeriodsResponse> executeWithHttpInfo() throws ApiException {
            return getHourlyPeriodsWithHttpInfo(xPersonioPartnerID, xPersonioAppID, startDate, endDate, updatedFrom, updatedTo, employees, absenceTypes, absencePeriods, limit, offset);
        }

        /**
         * Execute getHourlyPeriods request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HourlyAbsencePeriodsResponse> _callback) throws ApiException {
            return getHourlyPeriodsAsync(xPersonioPartnerID, xPersonioAppID, startDate, endDate, updatedFrom, updatedTo, employees, absenceTypes, absencePeriods, limit, offset, _callback);
        }
    }

    /**
     * 
     * Fetches absence periods for absences with **time unit** set to **hours**. The result can be &#x60;paginated&#x60; and &#x60;filtered&#x60; by period and/or specific employee/employees. The result contains a list of hourly absence periods.
     * @return GetHourlyPeriodsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetHourlyPeriodsRequestBuilder getHourlyPeriods() throws IllegalArgumentException {
        return new GetHourlyPeriodsRequestBuilder();
    }
    private okhttp3.Call listTimeOffTypesCall(String xPersonioPartnerID, String xPersonioAppID, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/time-off-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTimeOffTypesValidateBeforeCall(String xPersonioPartnerID, String xPersonioAppID, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return listTimeOffTypesCall(xPersonioPartnerID, xPersonioAppID, limit, offset, _callback);

    }


    private ApiResponse<AbsencesListTimeOffTypesResponse> listTimeOffTypesWithHttpInfo(String xPersonioPartnerID, String xPersonioAppID, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listTimeOffTypesValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, limit, offset, null);
        Type localVarReturnType = new TypeToken<AbsencesListTimeOffTypesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTimeOffTypesAsync(String xPersonioPartnerID, String xPersonioAppID, Integer limit, Integer offset, final ApiCallback<AbsencesListTimeOffTypesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTimeOffTypesValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<AbsencesListTimeOffTypesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTimeOffTypesRequestBuilder {
        private String xPersonioPartnerID;
        private String xPersonioAppID;
        private Integer limit;
        private Integer offset;

        private ListTimeOffTypesRequestBuilder() {
        }

        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return ListTimeOffTypesRequestBuilder
         */
        public ListTimeOffTypesRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return ListTimeOffTypesRequestBuilder
         */
        public ListTimeOffTypesRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Pagination attribute to limit how many records will be returned per page (optional, default to 200)
         * @return ListTimeOffTypesRequestBuilder
         */
        public ListTimeOffTypesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Pagination attribute to identify which page you are requesting, by the form of telling an offset from the first record that would be returned. (optional, default to 0)
         * @return ListTimeOffTypesRequestBuilder
         */
        public ListTimeOffTypesRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listTimeOffTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTimeOffTypesCall(xPersonioPartnerID, xPersonioAppID, limit, offset, _callback);
        }


        /**
         * Execute listTimeOffTypes request
         * @return AbsencesListTimeOffTypesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public AbsencesListTimeOffTypesResponse execute() throws ApiException {
            ApiResponse<AbsencesListTimeOffTypesResponse> localVarResp = listTimeOffTypesWithHttpInfo(xPersonioPartnerID, xPersonioAppID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTimeOffTypes request with HTTP info returned
         * @return ApiResponse&lt;AbsencesListTimeOffTypesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AbsencesListTimeOffTypesResponse> executeWithHttpInfo() throws ApiException {
            return listTimeOffTypesWithHttpInfo(xPersonioPartnerID, xPersonioAppID, limit, offset);
        }

        /**
         * Execute listTimeOffTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AbsencesListTimeOffTypesResponse> _callback) throws ApiException {
            return listTimeOffTypesAsync(xPersonioPartnerID, xPersonioAppID, limit, offset, _callback);
        }
    }

    /**
     * 
     * Provides a list of absence types for absences **time unit** set to either **days** or **hours**. For example &#39;Paid vacation&#39;, &#39;Parental leave&#39; or &#39;Home office&#39;.
     * @return ListTimeOffTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListTimeOffTypesRequestBuilder listTimeOffTypes() throws IllegalArgumentException {
        return new ListTimeOffTypesRequestBuilder();
    }
}
