/*
 * Personnel Data
 * API for reading and writing personnel data including data about attendances, absences, documents, etc
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ProjectsCreateProjectRequest;
import com.konfigthis.client.model.ProjectsCreateProjectResponse;
import com.konfigthis.client.model.ProjectsGetAllResponse;
import com.konfigthis.client.model.ProjectsUpdateDataRequest;
import com.konfigthis.client.model.ProjectsUpdateDataResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProjectsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createProjectCall(String xPersonioPartnerID, String xPersonioAppID, ProjectsCreateProjectRequest projectsCreateProjectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectsCreateProjectRequest;

        // create path and map variables
        String localVarPath = "/company/attendances/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProjectValidateBeforeCall(String xPersonioPartnerID, String xPersonioAppID, ProjectsCreateProjectRequest projectsCreateProjectRequest, final ApiCallback _callback) throws ApiException {
        return createProjectCall(xPersonioPartnerID, xPersonioAppID, projectsCreateProjectRequest, _callback);

    }


    private ApiResponse<ProjectsCreateProjectResponse> createProjectWithHttpInfo(String xPersonioPartnerID, String xPersonioAppID, ProjectsCreateProjectRequest projectsCreateProjectRequest) throws ApiException {
        okhttp3.Call localVarCall = createProjectValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, projectsCreateProjectRequest, null);
        Type localVarReturnType = new TypeToken<ProjectsCreateProjectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createProjectAsync(String xPersonioPartnerID, String xPersonioAppID, ProjectsCreateProjectRequest projectsCreateProjectRequest, final ApiCallback<ProjectsCreateProjectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProjectValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, projectsCreateProjectRequest, _callback);
        Type localVarReturnType = new TypeToken<ProjectsCreateProjectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateProjectRequestBuilder {
        private final String name;
        private Boolean active;
        private String xPersonioPartnerID;
        private String xPersonioAppID;

        private CreateProjectRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set active
         * @param active  (optional, default to false)
         * @return CreateProjectRequestBuilder
         */
        public CreateProjectRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return CreateProjectRequestBuilder
         */
        public CreateProjectRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return CreateProjectRequestBuilder
         */
        public CreateProjectRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Build call for createProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Project created successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectsCreateProjectRequest projectsCreateProjectRequest = buildBodyParams();
            return createProjectCall(xPersonioPartnerID, xPersonioAppID, projectsCreateProjectRequest, _callback);
        }

        private ProjectsCreateProjectRequest buildBodyParams() {
            ProjectsCreateProjectRequest projectsCreateProjectRequest = new ProjectsCreateProjectRequest();
            projectsCreateProjectRequest.name(this.name);
            projectsCreateProjectRequest.active(this.active);
            return projectsCreateProjectRequest;
        }

        /**
         * Execute createProject request
         * @return ProjectsCreateProjectResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Project created successfully </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsCreateProjectResponse execute() throws ApiException {
            ProjectsCreateProjectRequest projectsCreateProjectRequest = buildBodyParams();
            ApiResponse<ProjectsCreateProjectResponse> localVarResp = createProjectWithHttpInfo(xPersonioPartnerID, xPersonioAppID, projectsCreateProjectRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createProject request with HTTP info returned
         * @return ApiResponse&lt;ProjectsCreateProjectResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Project created successfully </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsCreateProjectResponse> executeWithHttpInfo() throws ApiException {
            ProjectsCreateProjectRequest projectsCreateProjectRequest = buildBodyParams();
            return createProjectWithHttpInfo(xPersonioPartnerID, xPersonioAppID, projectsCreateProjectRequest);
        }

        /**
         * Execute createProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Project created successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsCreateProjectResponse> _callback) throws ApiException {
            ProjectsCreateProjectRequest projectsCreateProjectRequest = buildBodyParams();
            return createProjectAsync(xPersonioPartnerID, xPersonioAppID, projectsCreateProjectRequest, _callback);
        }
    }

    /**
     * 
     * Creates a project into the company account
     * @return CreateProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project created successfully </td><td>  -  </td></tr>
     </table>
     */
    public CreateProjectRequestBuilder createProject(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateProjectRequestBuilder(name);
    }
    private okhttp3.Call deleteProjectCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/attendances/projects/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteProject(Async)");
        }

        return deleteProjectCall(id, _callback);

    }


    private ApiResponse<Void> deleteProjectWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteProjectAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteProjectRequestBuilder {
        private final Integer id;

        private DeleteProjectRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for deleteProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Project was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteProjectCall(id, _callback);
        }


        /**
         * Execute deleteProject request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Project was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteProjectWithHttpInfo(id);
        }

        /**
         * Execute deleteProject request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Project was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteProjectWithHttpInfo(id);
        }

        /**
         * Execute deleteProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Project was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteProjectAsync(id, _callback);
        }
    }

    /**
     * 
     * Deletes a project from the company account
     * @param id Numeric &#x60;id&#x60; of the project (required)
     * @return DeleteProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Project was successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteProjectRequestBuilder deleteProject(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeleteProjectRequestBuilder(id);
    }
    private okhttp3.Call getAllCall(String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/attendances/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        return getAllCall(xPersonioPartnerID, xPersonioAppID, _callback);

    }


    private ApiResponse<ProjectsGetAllResponse> getAllWithHttpInfo(String xPersonioPartnerID, String xPersonioAppID) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, null);
        Type localVarReturnType = new TypeToken<ProjectsGetAllResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(String xPersonioPartnerID, String xPersonioAppID, final ApiCallback<ProjectsGetAllResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, _callback);
        Type localVarReturnType = new TypeToken<ProjectsGetAllResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private String xPersonioPartnerID;
        private String xPersonioAppID;

        private GetAllRequestBuilder() {
        }

        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of projects returned </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(xPersonioPartnerID, xPersonioAppID, _callback);
        }


        /**
         * Execute getAll request
         * @return ProjectsGetAllResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of projects returned </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsGetAllResponse execute() throws ApiException {
            ApiResponse<ProjectsGetAllResponse> localVarResp = getAllWithHttpInfo(xPersonioPartnerID, xPersonioAppID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;ProjectsGetAllResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of projects returned </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsGetAllResponse> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(xPersonioPartnerID, xPersonioAppID);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of projects returned </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsGetAllResponse> _callback) throws ApiException {
            return getAllAsync(xPersonioPartnerID, xPersonioAppID, _callback);
        }
    }

    /**
     * 
     * Provides a list of all company projects.
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of projects returned </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call updateDataCall(Integer id, ProjectsUpdateDataRequest projectsUpdateDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = projectsUpdateDataRequest;

        // create path and map variables
        String localVarPath = "/company/attendances/projects/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDataValidateBeforeCall(Integer id, ProjectsUpdateDataRequest projectsUpdateDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateData(Async)");
        }

        return updateDataCall(id, projectsUpdateDataRequest, _callback);

    }


    private ApiResponse<ProjectsUpdateDataResponse> updateDataWithHttpInfo(Integer id, ProjectsUpdateDataRequest projectsUpdateDataRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDataValidateBeforeCall(id, projectsUpdateDataRequest, null);
        Type localVarReturnType = new TypeToken<ProjectsUpdateDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDataAsync(Integer id, ProjectsUpdateDataRequest projectsUpdateDataRequest, final ApiCallback<ProjectsUpdateDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDataValidateBeforeCall(id, projectsUpdateDataRequest, _callback);
        Type localVarReturnType = new TypeToken<ProjectsUpdateDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDataRequestBuilder {
        private final Integer id;
        private String name;
        private Boolean active;

        private UpdateDataRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return UpdateDataRequestBuilder
         */
        public UpdateDataRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set active
         * @param active Marks the availability of the project (optional)
         * @return UpdateDataRequestBuilder
         */
        public UpdateDataRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Build call for updateData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Project updated successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProjectsUpdateDataRequest projectsUpdateDataRequest = buildBodyParams();
            return updateDataCall(id, projectsUpdateDataRequest, _callback);
        }

        private ProjectsUpdateDataRequest buildBodyParams() {
            ProjectsUpdateDataRequest projectsUpdateDataRequest = new ProjectsUpdateDataRequest();
            projectsUpdateDataRequest.name(this.name);
            projectsUpdateDataRequest.active(this.active);
            return projectsUpdateDataRequest;
        }

        /**
         * Execute updateData request
         * @return ProjectsUpdateDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Project updated successfully </td><td>  -  </td></tr>
         </table>
         */
        public ProjectsUpdateDataResponse execute() throws ApiException {
            ProjectsUpdateDataRequest projectsUpdateDataRequest = buildBodyParams();
            ApiResponse<ProjectsUpdateDataResponse> localVarResp = updateDataWithHttpInfo(id, projectsUpdateDataRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateData request with HTTP info returned
         * @return ApiResponse&lt;ProjectsUpdateDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Project updated successfully </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProjectsUpdateDataResponse> executeWithHttpInfo() throws ApiException {
            ProjectsUpdateDataRequest projectsUpdateDataRequest = buildBodyParams();
            return updateDataWithHttpInfo(id, projectsUpdateDataRequest);
        }

        /**
         * Execute updateData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Project updated successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProjectsUpdateDataResponse> _callback) throws ApiException {
            ProjectsUpdateDataRequest projectsUpdateDataRequest = buildBodyParams();
            return updateDataAsync(id, projectsUpdateDataRequest, _callback);
        }
    }

    /**
     * 
     * Updates a project with the given data
     * @param id Numeric &#x60;id&#x60; of the project (required)
     * @return UpdateDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDataRequestBuilder updateData(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateDataRequestBuilder(id);
    }
}
