/*
 * Personnel Data
 * API for reading and writing personnel data including data about attendances, absences, documents, etc
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmployeeAbsenceBalance;
import com.konfigthis.client.model.EmployeeCreatedResponse;
import com.konfigthis.client.model.EmployeeResponse;
import com.konfigthis.client.model.EmployeeUpdatedResponse;
import com.konfigthis.client.model.EmployeesCreateEmployeeRequest;
import com.konfigthis.client.model.EmployeesCreateEmployeeRequest1;
import com.konfigthis.client.model.EmployeesCreateEmployeeRequestEmployee;
import com.konfigthis.client.model.EmployeesListAttributesResponse;
import com.konfigthis.client.model.EmployeesResponse;
import com.konfigthis.client.model.EmployeesUpdateEmployeeFieldsRequest;
import com.konfigthis.client.model.EmployeesUpdateEmployeeFieldsRequest1;
import com.konfigthis.client.model.EmployeesUpdateEmployeeFieldsRequestEmployee;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createEmployeeCall(String xPersonioPartnerID, String xPersonioAppID, EmployeesCreateEmployeeRequest employeesCreateEmployeeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeesCreateEmployeeRequest;

        // create path and map variables
        String localVarPath = "/company/employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmployeeValidateBeforeCall(String xPersonioPartnerID, String xPersonioAppID, EmployeesCreateEmployeeRequest employeesCreateEmployeeRequest, final ApiCallback _callback) throws ApiException {
        return createEmployeeCall(xPersonioPartnerID, xPersonioAppID, employeesCreateEmployeeRequest, _callback);

    }


    private ApiResponse<EmployeeCreatedResponse> createEmployeeWithHttpInfo(String xPersonioPartnerID, String xPersonioAppID, EmployeesCreateEmployeeRequest employeesCreateEmployeeRequest) throws ApiException {
        okhttp3.Call localVarCall = createEmployeeValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, employeesCreateEmployeeRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeCreatedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEmployeeAsync(String xPersonioPartnerID, String xPersonioAppID, EmployeesCreateEmployeeRequest employeesCreateEmployeeRequest, final ApiCallback<EmployeeCreatedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmployeeValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, employeesCreateEmployeeRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeCreatedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEmployeeRequestBuilder {
        private EmployeesCreateEmployeeRequestEmployee employee;
        private String xPersonioPartnerID;
        private String xPersonioAppID;

        private CreateEmployeeRequestBuilder() {
        }

        /**
         * Set employee
         * @param employee  (optional)
         * @return CreateEmployeeRequestBuilder
         */
        public CreateEmployeeRequestBuilder employee(EmployeesCreateEmployeeRequestEmployee employee) {
            this.employee = employee;
            return this;
        }
        
        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return CreateEmployeeRequestBuilder
         */
        public CreateEmployeeRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return CreateEmployeeRequestBuilder
         */
        public CreateEmployeeRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Build call for createEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful creation of a employee </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeesCreateEmployeeRequest employeesCreateEmployeeRequest = buildBodyParams();
            return createEmployeeCall(xPersonioPartnerID, xPersonioAppID, employeesCreateEmployeeRequest, _callback);
        }

        private EmployeesCreateEmployeeRequest buildBodyParams() {
            EmployeesCreateEmployeeRequest employeesCreateEmployeeRequest = new EmployeesCreateEmployeeRequest();
            employeesCreateEmployeeRequest.employee(this.employee);
            return employeesCreateEmployeeRequest;
        }

        /**
         * Execute createEmployee request
         * @return EmployeeCreatedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful creation of a employee </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeCreatedResponse execute() throws ApiException {
            EmployeesCreateEmployeeRequest employeesCreateEmployeeRequest = buildBodyParams();
            ApiResponse<EmployeeCreatedResponse> localVarResp = createEmployeeWithHttpInfo(xPersonioPartnerID, xPersonioAppID, employeesCreateEmployeeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEmployee request with HTTP info returned
         * @return ApiResponse&lt;EmployeeCreatedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful creation of a employee </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeCreatedResponse> executeWithHttpInfo() throws ApiException {
            EmployeesCreateEmployeeRequest employeesCreateEmployeeRequest = buildBodyParams();
            return createEmployeeWithHttpInfo(xPersonioPartnerID, xPersonioAppID, employeesCreateEmployeeRequest);
        }

        /**
         * Execute createEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful creation of a employee </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeCreatedResponse> _callback) throws ApiException {
            EmployeesCreateEmployeeRequest employeesCreateEmployeeRequest = buildBodyParams();
            return createEmployeeAsync(xPersonioPartnerID, xPersonioAppID, employeesCreateEmployeeRequest, _callback);
        }
    }

    /**
     * Create an employee
     * Creates a new employee. If the employee&#39;s status is not provided, it will be set based on the &#x60;hire_date&#x60; value - if it is in the past, status will be &#x60;active&#x60;, otherwise &#x60;onboarding&#x60;. This endpoint responds with the &#x60;id&#x60; of the created employee in case of success. 
     * @return CreateEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful creation of a employee </td><td>  -  </td></tr>
     </table>
     */
    public CreateEmployeeRequestBuilder createEmployee() throws IllegalArgumentException {
        return new CreateEmployeeRequestBuilder();
    }
    private okhttp3.Call getAbsenceBalanceCall(Integer employeeId, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/employees/{employee_id}/absences/balance"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAbsenceBalanceValidateBeforeCall(Integer employeeId, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getAbsenceBalance(Async)");
        }

        return getAbsenceBalanceCall(employeeId, xPersonioPartnerID, xPersonioAppID, _callback);

    }


    private ApiResponse<EmployeeAbsenceBalance> getAbsenceBalanceWithHttpInfo(Integer employeeId, String xPersonioPartnerID, String xPersonioAppID) throws ApiException {
        okhttp3.Call localVarCall = getAbsenceBalanceValidateBeforeCall(employeeId, xPersonioPartnerID, xPersonioAppID, null);
        Type localVarReturnType = new TypeToken<EmployeeAbsenceBalance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAbsenceBalanceAsync(Integer employeeId, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback<EmployeeAbsenceBalance> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAbsenceBalanceValidateBeforeCall(employeeId, xPersonioPartnerID, xPersonioAppID, _callback);
        Type localVarReturnType = new TypeToken<EmployeeAbsenceBalance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAbsenceBalanceRequestBuilder {
        private final Integer employeeId;
        private String xPersonioPartnerID;
        private String xPersonioAppID;

        private GetAbsenceBalanceRequestBuilder(Integer employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return GetAbsenceBalanceRequestBuilder
         */
        public GetAbsenceBalanceRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return GetAbsenceBalanceRequestBuilder
         */
        public GetAbsenceBalanceRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Build call for getAbsenceBalance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAbsenceBalanceCall(employeeId, xPersonioPartnerID, xPersonioAppID, _callback);
        }


        /**
         * Execute getAbsenceBalance request
         * @return EmployeeAbsenceBalance
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeAbsenceBalance execute() throws ApiException {
            ApiResponse<EmployeeAbsenceBalance> localVarResp = getAbsenceBalanceWithHttpInfo(employeeId, xPersonioPartnerID, xPersonioAppID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAbsenceBalance request with HTTP info returned
         * @return ApiResponse&lt;EmployeeAbsenceBalance&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeAbsenceBalance> executeWithHttpInfo() throws ApiException {
            return getAbsenceBalanceWithHttpInfo(employeeId, xPersonioPartnerID, xPersonioAppID);
        }

        /**
         * Execute getAbsenceBalance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeAbsenceBalance> _callback) throws ApiException {
            return getAbsenceBalanceAsync(employeeId, xPersonioPartnerID, xPersonioAppID, _callback);
        }
    }

    /**
     * 
     * Retrieve the absence balance for a specific employee
     * @param employeeId Numeric &#x60;id&#x60; of the employee (required)
     * @return GetAbsenceBalanceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetAbsenceBalanceRequestBuilder getAbsenceBalance(Integer employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
        return new GetAbsenceBalanceRequestBuilder(employeeId);
    }
    private okhttp3.Call getCustomAttributesCall(String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/employees/custom-attributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomAttributesValidateBeforeCall(String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        return getCustomAttributesCall(xPersonioPartnerID, xPersonioAppID, _callback);

    }


    private ApiResponse<Void> getCustomAttributesWithHttpInfo(String xPersonioPartnerID, String xPersonioAppID) throws ApiException {
        okhttp3.Call localVarCall = getCustomAttributesValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getCustomAttributesAsync(String xPersonioPartnerID, String xPersonioAppID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomAttributesValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetCustomAttributesRequestBuilder {
        private String xPersonioPartnerID;
        private String xPersonioAppID;

        private GetCustomAttributesRequestBuilder() {
        }

        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return GetCustomAttributesRequestBuilder
         */
        public GetCustomAttributesRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return GetCustomAttributesRequestBuilder
         */
        public GetCustomAttributesRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Build call for getCustomAttributes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Please refer to &#x60;/company/employees/attributes&#x60; </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomAttributesCall(xPersonioPartnerID, xPersonioAppID, _callback);
        }


        /**
         * Execute getCustomAttributes request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Please refer to &#x60;/company/employees/attributes&#x60; </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getCustomAttributesWithHttpInfo(xPersonioPartnerID, xPersonioAppID);
        }

        /**
         * Execute getCustomAttributes request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Please refer to &#x60;/company/employees/attributes&#x60; </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getCustomAttributesWithHttpInfo(xPersonioPartnerID, xPersonioAppID);
        }

        /**
         * Execute getCustomAttributes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Please refer to &#x60;/company/employees/attributes&#x60; </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getCustomAttributesAsync(xPersonioPartnerID, xPersonioAppID, _callback);
        }
    }

    /**
     * 
     * This endpoint is an alias for &#x60;/company/employees/attributes&#x60;.
     * @return GetCustomAttributesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Please refer to &#x60;/company/employees/attributes&#x60; </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomAttributesRequestBuilder getCustomAttributes() throws IllegalArgumentException {
        return new GetCustomAttributesRequestBuilder();
    }
    private okhttp3.Call getListCall(String xPersonioPartnerID, String xPersonioAppID, Integer limit, Integer offset, String email, List<String> attributes, String updatedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (attributes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "attributes[]", attributes));
        }

        if (updatedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_since", updatedSince));
        }

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(String xPersonioPartnerID, String xPersonioAppID, Integer limit, Integer offset, String email, List<String> attributes, String updatedSince, final ApiCallback _callback) throws ApiException {
        return getListCall(xPersonioPartnerID, xPersonioAppID, limit, offset, email, attributes, updatedSince, _callback);

    }


    private ApiResponse<EmployeesResponse> getListWithHttpInfo(String xPersonioPartnerID, String xPersonioAppID, Integer limit, Integer offset, String email, List<String> attributes, String updatedSince) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, limit, offset, email, attributes, updatedSince, null);
        Type localVarReturnType = new TypeToken<EmployeesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(String xPersonioPartnerID, String xPersonioAppID, Integer limit, Integer offset, String email, List<String> attributes, String updatedSince, final ApiCallback<EmployeesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, limit, offset, email, attributes, updatedSince, _callback);
        Type localVarReturnType = new TypeToken<EmployeesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private String xPersonioPartnerID;
        private String xPersonioAppID;
        private Integer limit;
        private Integer offset;
        private String email;
        private List<String> attributes;
        private String updatedSince;

        private GetListRequestBuilder() {
        }

        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Pagination attribute to limit the number of employees returned per page. (optional, default to 10)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Pagination attribute to identify the first item in the collection to return. (optional, default to 0)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set email
         * @param email Find an employee with the given email address. The response is still a list, containing only the filtered employee. NOTE: when using the updated_since filter, the email filter is ignored. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set attributes
         * @param attributes A list of attributes that will be returned for the employees, ie. a projection of the employee fields and relationships. In case &#x60;updated_since&#x60; query parameter is used, this list will additionally be used to exclude the employees that had none of the provided &#x60;attributes[]&#x60; updated since &#x60;updated_since&#x60;, ie. a selection filter. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder attributes(List<String> attributes) {
            this.attributes = attributes;
            return this;
        }
        
        /**
         * Set updatedSince
         * @param updatedSince Filter to select and return only the employees that have been updated after &#x60;updated_since&#x60;. When it is used together with the &#x60;attributes[]&#x60; query parameter, the filter will select only the employees that have had any of the provided &#x60;attributes[]&#x60; updated since &#x60;updated_since&#x60;. The format is &#x60;ISO 8601&#x60; (2022-12-24T08:15:30). NOTE: when using the &#x60;updated_since&#x60; filter, the &#x60;email&#x60;, &#x60;limit&#x60;, and &#x60;offset&#x60; parameters are ignored. &lt;details&gt; &lt;summary&gt;&lt;b&gt;Examples with &lt;code&gt;updated_since&lt;/code&gt; and &lt;code&gt;attributes[]&lt;/code&gt;:&lt;/b&gt;&lt;/summary&gt;&lt;br /&gt; In an example company that has 17 employees:&lt;br /&gt;&lt;br /&gt; &lt;details&gt;   &lt;summary&gt;   &lt;code class&#x3D;\&quot;language-html\&quot;&gt;?updated_since&#x3D;2022-12-24T08:15:30&lt;/code&gt;   will yield 10 employees that were recently updated:   &lt;/summary&gt; &lt;p&gt;&lt;pre class&#x3D;\&quot;prettyprint\&quot;&gt;&lt;code language&#x3D;\&quot;json\&quot; class&#x3D;\&quot;language-json\&quot;&gt; {   \&quot;success\&quot;: true,   \&quot;metadata\&quot;: {     \&quot;total_elements\&quot;: 10,     \&quot;current_page\&quot;: 0,     \&quot;total_pages\&quot;: 10   },   \&quot;offset\&quot;: 0,   \&quot;limit\&quot;: 1,   \&quot;data\&quot;: [     {       \&quot;type\&quot;: \&quot;Employee\&quot;,       \&quot;attributes\&quot;: {         \&quot;id\&quot;: {           \&quot;label\&quot;: \&quot;ID\&quot;,           \&quot;value\&quot;: 1,           \&quot;type\&quot;: \&quot;integer\&quot;,           \&quot;universal_id\&quot;: \&quot;id\&quot;         },         \&quot;first_name\&quot;: {           \&quot;label\&quot;: \&quot;First name\&quot;,           \&quot;value\&quot;: \&quot;Alexander\&quot;,           \&quot;type\&quot;: \&quot;standard\&quot;,           \&quot;universal_id\&quot;: \&quot;first_name\&quot;         },         \&quot;last_name\&quot;: {           \&quot;label\&quot;: \&quot;Last name\&quot;,           \&quot;value\&quot;: \&quot;Bergmann\&quot;,           \&quot;type\&quot;: \&quot;standard\&quot;,           \&quot;universal_id\&quot;: \&quot;last_name\&quot;         },         \&quot;email\&quot;: {           \&quot;label\&quot;: \&quot;Email\&quot;,           \&quot;value\&quot;: \&quot;alexander.bergmann@demo.com\&quot;,           \&quot;type\&quot;: \&quot;standard\&quot;,           \&quot;universal_id\&quot;: \&quot;email\&quot;         }       }     }, ...   ],   ...   ... } &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt; &lt;/details&gt;&lt;br /&gt; &lt;details&gt;   &lt;summary&gt;   &lt;code class&#x3D;\&quot;language-html\&quot;&gt;?attributes[]&#x3D;first_name&lt;/code&gt;   will yield all 17 employees:   &lt;/summary&gt; &lt;p&gt;&lt;pre class&#x3D;\&quot;prettyprint\&quot;&gt;&lt;code language&#x3D;\&quot;json\&quot; class&#x3D;\&quot;language-json\&quot;&gt; {   \&quot;success\&quot;: true,   \&quot;metadata\&quot;: {     \&quot;total_elements\&quot;: 17,     \&quot;current_page\&quot;: 0,     \&quot;total_pages\&quot;: 17   },   \&quot;offset\&quot;: 0,   \&quot;limit\&quot;: 1,   \&quot;data\&quot;: [     {       \&quot;type\&quot;: \&quot;Employee\&quot;,       \&quot;attributes\&quot;: {         \&quot;id\&quot;: {           \&quot;label\&quot;: \&quot;ID\&quot;,           \&quot;value\&quot;: 1,           \&quot;type\&quot;: \&quot;integer\&quot;,           \&quot;universal_id\&quot;: \&quot;id\&quot;         },         \&quot;first_name\&quot;: {           \&quot;label\&quot;: \&quot;First name\&quot;,           \&quot;value\&quot;: \&quot;Alexander\&quot;,           \&quot;type\&quot;: \&quot;standard\&quot;,           \&quot;universal_id\&quot;: \&quot;first_name\&quot;         }       }     }   ] } &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt; &lt;/details&gt;&lt;br /&gt; &lt;details&gt;   &lt;summary&gt;   &lt;code class&#x3D;\&quot;language-html\&quot;&gt;?attributes[]&#x3D;first_name&amp;updated_since&#x3D;2022-12-24T08:15:30&lt;/code&gt;   will yield 3 employees, ones that had their &lt;code&gt;first_name&lt;/code&gt; changed since &lt;code&gt;2022-12-24T08:15:30&lt;/code&gt;:   &lt;/summary&gt; &lt;p&gt;&lt;pre class&#x3D;\&quot;prettyprint\&quot;&gt;&lt;code language&#x3D;\&quot;json\&quot; class&#x3D;\&quot;language-json\&quot;&gt; {   \&quot;success\&quot;: true,   \&quot;metadata\&quot;: {     \&quot;total_elements\&quot;: 3,     \&quot;current_page\&quot;: 0,     \&quot;total_pages\&quot;: 3   },   \&quot;offset\&quot;: 0,   \&quot;limit\&quot;: 1,   \&quot;data\&quot;: [     {       \&quot;type\&quot;: \&quot;Employee\&quot;,       \&quot;attributes\&quot;: {         \&quot;id\&quot;: {           \&quot;label\&quot;: \&quot;ID\&quot;,           \&quot;value\&quot;: 1,           \&quot;type\&quot;: \&quot;integer\&quot;,           \&quot;universal_id\&quot;: \&quot;id\&quot;         },         \&quot;first_name\&quot;: {           \&quot;label\&quot;: \&quot;First name\&quot;,           \&quot;value\&quot;: \&quot;Alexander\&quot;,           \&quot;type\&quot;: \&quot;standard\&quot;,           \&quot;universal_id\&quot;: \&quot;first_name\&quot;         }       }     }   ] } &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt; &lt;/details&gt; &lt;/details&gt; (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder updatedSince(String updatedSince) {
            this.updatedSince = updatedSince;
            return this;
        }
        
        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(xPersonioPartnerID, xPersonioAppID, limit, offset, email, attributes, updatedSince, _callback);
        }


        /**
         * Execute getList request
         * @return EmployeesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesResponse execute() throws ApiException {
            ApiResponse<EmployeesResponse> localVarResp = getListWithHttpInfo(xPersonioPartnerID, xPersonioAppID, limit, offset, email, attributes, updatedSince);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;EmployeesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesResponse> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(xPersonioPartnerID, xPersonioAppID, limit, offset, email, attributes, updatedSince);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesResponse> _callback) throws ApiException {
            return getListAsync(xPersonioPartnerID, xPersonioAppID, limit, offset, email, attributes, updatedSince, _callback);
        }
    }

    /**
     * 
     * List Company Employees
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList() throws IllegalArgumentException {
        return new GetListRequestBuilder();
    }
    private okhttp3.Call listAttributesCall(String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/employees/attributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAttributesValidateBeforeCall(String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        return listAttributesCall(xPersonioPartnerID, xPersonioAppID, _callback);

    }


    private ApiResponse<EmployeesListAttributesResponse> listAttributesWithHttpInfo(String xPersonioPartnerID, String xPersonioAppID) throws ApiException {
        okhttp3.Call localVarCall = listAttributesValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, null);
        Type localVarReturnType = new TypeToken<EmployeesListAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAttributesAsync(String xPersonioPartnerID, String xPersonioAppID, final ApiCallback<EmployeesListAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAttributesValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, _callback);
        Type localVarReturnType = new TypeToken<EmployeesListAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAttributesRequestBuilder {
        private String xPersonioPartnerID;
        private String xPersonioAppID;

        private ListAttributesRequestBuilder() {
        }

        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return ListAttributesRequestBuilder
         */
        public ListAttributesRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return ListAttributesRequestBuilder
         */
        public ListAttributesRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Build call for listAttributes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAttributesCall(xPersonioPartnerID, xPersonioAppID, _callback);
        }


        /**
         * Execute listAttributes request
         * @return EmployeesListAttributesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesListAttributesResponse execute() throws ApiException {
            ApiResponse<EmployeesListAttributesResponse> localVarResp = listAttributesWithHttpInfo(xPersonioPartnerID, xPersonioAppID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAttributes request with HTTP info returned
         * @return ApiResponse&lt;EmployeesListAttributesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesListAttributesResponse> executeWithHttpInfo() throws ApiException {
            return listAttributesWithHttpInfo(xPersonioPartnerID, xPersonioAppID);
        }

        /**
         * Execute listAttributes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesListAttributesResponse> _callback) throws ApiException {
            return listAttributesAsync(xPersonioPartnerID, xPersonioAppID, _callback);
        }
    }

    /**
     * 
     * Lists all the allowed atrributes per API credentials including custom (dynamic) attributes.
     * @return ListAttributesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListAttributesRequestBuilder listAttributes() throws IllegalArgumentException {
        return new ListAttributesRequestBuilder();
    }
    private okhttp3.Call showByIdCall(Integer employeeId, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/employees/{employee_id}"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showByIdValidateBeforeCall(Integer employeeId, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling showById(Async)");
        }

        return showByIdCall(employeeId, xPersonioPartnerID, xPersonioAppID, _callback);

    }


    private ApiResponse<EmployeeResponse> showByIdWithHttpInfo(Integer employeeId, String xPersonioPartnerID, String xPersonioAppID) throws ApiException {
        okhttp3.Call localVarCall = showByIdValidateBeforeCall(employeeId, xPersonioPartnerID, xPersonioAppID, null);
        Type localVarReturnType = new TypeToken<EmployeeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showByIdAsync(Integer employeeId, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback<EmployeeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = showByIdValidateBeforeCall(employeeId, xPersonioPartnerID, xPersonioAppID, _callback);
        Type localVarReturnType = new TypeToken<EmployeeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShowByIdRequestBuilder {
        private final Integer employeeId;
        private String xPersonioPartnerID;
        private String xPersonioAppID;

        private ShowByIdRequestBuilder(Integer employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return ShowByIdRequestBuilder
         */
        public ShowByIdRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return ShowByIdRequestBuilder
         */
        public ShowByIdRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Build call for showById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showByIdCall(employeeId, xPersonioPartnerID, xPersonioAppID, _callback);
        }


        /**
         * Execute showById request
         * @return EmployeeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeResponse execute() throws ApiException {
            ApiResponse<EmployeeResponse> localVarResp = showByIdWithHttpInfo(employeeId, xPersonioPartnerID, xPersonioAppID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showById request with HTTP info returned
         * @return ApiResponse&lt;EmployeeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeResponse> executeWithHttpInfo() throws ApiException {
            return showByIdWithHttpInfo(employeeId, xPersonioPartnerID, xPersonioAppID);
        }

        /**
         * Execute showById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeResponse> _callback) throws ApiException {
            return showByIdAsync(employeeId, xPersonioPartnerID, xPersonioAppID, _callback);
        }
    }

    /**
     * 
     * Show employee by ID
     * @param employeeId Numeric &#x60;id&#x60; of the employee (required)
     * @return ShowByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ShowByIdRequestBuilder showById(Integer employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
        return new ShowByIdRequestBuilder(employeeId);
    }
    private okhttp3.Call showProfilePictureCall(Integer employeeId, Integer width, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/employees/{employee_id}/profile-picture/{width}"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "width" + "}", localVarApiClient.escapeString(width.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "image/png",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showProfilePictureValidateBeforeCall(Integer employeeId, Integer width, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling showProfilePicture(Async)");
        }

        // verify the required parameter 'width' is set
        if (width == null) {
            throw new ApiException("Missing the required parameter 'width' when calling showProfilePicture(Async)");
        }

        return showProfilePictureCall(employeeId, width, xPersonioPartnerID, xPersonioAppID, _callback);

    }


    private ApiResponse<File> showProfilePictureWithHttpInfo(Integer employeeId, Integer width, String xPersonioPartnerID, String xPersonioAppID) throws ApiException {
        okhttp3.Call localVarCall = showProfilePictureValidateBeforeCall(employeeId, width, xPersonioPartnerID, xPersonioAppID, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showProfilePictureAsync(Integer employeeId, Integer width, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = showProfilePictureValidateBeforeCall(employeeId, width, xPersonioPartnerID, xPersonioAppID, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShowProfilePictureRequestBuilder {
        private final Integer employeeId;
        private final Integer width;
        private String xPersonioPartnerID;
        private String xPersonioAppID;

        private ShowProfilePictureRequestBuilder(Integer employeeId, Integer width) {
            this.employeeId = employeeId;
            this.width = width;
        }

        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return ShowProfilePictureRequestBuilder
         */
        public ShowProfilePictureRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return ShowProfilePictureRequestBuilder
         */
        public ShowProfilePictureRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Build call for showProfilePicture
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showProfilePictureCall(employeeId, width, xPersonioPartnerID, xPersonioAppID, _callback);
        }


        /**
         * Execute showProfilePicture request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = showProfilePictureWithHttpInfo(employeeId, width, xPersonioPartnerID, xPersonioAppID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showProfilePicture request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return showProfilePictureWithHttpInfo(employeeId, width, xPersonioPartnerID, xPersonioAppID);
        }

        /**
         * Execute showProfilePicture request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return showProfilePictureAsync(employeeId, width, xPersonioPartnerID, xPersonioAppID, _callback);
        }
    }

    /**
     * 
     * Show employee&#39;s profile picture. If profile picture is missing, the 404 error will be thrown. The &#x60;Profile Picture&#x60; attribute has to be whitelisted.
     * @param employeeId Numeric &#x60;id&#x60; of the employee (required)
     * @param width Width of the image. Default is original size (required)
     * @return ShowProfilePictureRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ShowProfilePictureRequestBuilder showProfilePicture(Integer employeeId, Integer width) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
        if (width == null) throw new IllegalArgumentException("\"width\" is required but got null");
        return new ShowProfilePictureRequestBuilder(employeeId, width);
    }
    private okhttp3.Call updateEmployeeFieldsCall(Integer employeeId, String xPersonioPartnerID, String xPersonioAppID, EmployeesUpdateEmployeeFieldsRequest employeesUpdateEmployeeFieldsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeesUpdateEmployeeFieldsRequest;

        // create path and map variables
        String localVarPath = "/company/employees/{employee_id}"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmployeeFieldsValidateBeforeCall(Integer employeeId, String xPersonioPartnerID, String xPersonioAppID, EmployeesUpdateEmployeeFieldsRequest employeesUpdateEmployeeFieldsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateEmployeeFields(Async)");
        }

        return updateEmployeeFieldsCall(employeeId, xPersonioPartnerID, xPersonioAppID, employeesUpdateEmployeeFieldsRequest, _callback);

    }


    private ApiResponse<EmployeeUpdatedResponse> updateEmployeeFieldsWithHttpInfo(Integer employeeId, String xPersonioPartnerID, String xPersonioAppID, EmployeesUpdateEmployeeFieldsRequest employeesUpdateEmployeeFieldsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEmployeeFieldsValidateBeforeCall(employeeId, xPersonioPartnerID, xPersonioAppID, employeesUpdateEmployeeFieldsRequest, null);
        Type localVarReturnType = new TypeToken<EmployeeUpdatedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEmployeeFieldsAsync(Integer employeeId, String xPersonioPartnerID, String xPersonioAppID, EmployeesUpdateEmployeeFieldsRequest employeesUpdateEmployeeFieldsRequest, final ApiCallback<EmployeeUpdatedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmployeeFieldsValidateBeforeCall(employeeId, xPersonioPartnerID, xPersonioAppID, employeesUpdateEmployeeFieldsRequest, _callback);
        Type localVarReturnType = new TypeToken<EmployeeUpdatedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEmployeeFieldsRequestBuilder {
        private final Integer employeeId;
        private EmployeesUpdateEmployeeFieldsRequestEmployee employee;
        private String xPersonioPartnerID;
        private String xPersonioAppID;

        private UpdateEmployeeFieldsRequestBuilder(Integer employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set employee
         * @param employee  (optional)
         * @return UpdateEmployeeFieldsRequestBuilder
         */
        public UpdateEmployeeFieldsRequestBuilder employee(EmployeesUpdateEmployeeFieldsRequestEmployee employee) {
            this.employee = employee;
            return this;
        }
        
        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return UpdateEmployeeFieldsRequestBuilder
         */
        public UpdateEmployeeFieldsRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return UpdateEmployeeFieldsRequestBuilder
         */
        public UpdateEmployeeFieldsRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Build call for updateEmployeeFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee is updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeesUpdateEmployeeFieldsRequest employeesUpdateEmployeeFieldsRequest = buildBodyParams();
            return updateEmployeeFieldsCall(employeeId, xPersonioPartnerID, xPersonioAppID, employeesUpdateEmployeeFieldsRequest, _callback);
        }

        private EmployeesUpdateEmployeeFieldsRequest buildBodyParams() {
            EmployeesUpdateEmployeeFieldsRequest employeesUpdateEmployeeFieldsRequest = new EmployeesUpdateEmployeeFieldsRequest();
            employeesUpdateEmployeeFieldsRequest.employee(this.employee);
            return employeesUpdateEmployeeFieldsRequest;
        }

        /**
         * Execute updateEmployeeFields request
         * @return EmployeeUpdatedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee is updated </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeUpdatedResponse execute() throws ApiException {
            EmployeesUpdateEmployeeFieldsRequest employeesUpdateEmployeeFieldsRequest = buildBodyParams();
            ApiResponse<EmployeeUpdatedResponse> localVarResp = updateEmployeeFieldsWithHttpInfo(employeeId, xPersonioPartnerID, xPersonioAppID, employeesUpdateEmployeeFieldsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEmployeeFields request with HTTP info returned
         * @return ApiResponse&lt;EmployeeUpdatedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee is updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeUpdatedResponse> executeWithHttpInfo() throws ApiException {
            EmployeesUpdateEmployeeFieldsRequest employeesUpdateEmployeeFieldsRequest = buildBodyParams();
            return updateEmployeeFieldsWithHttpInfo(employeeId, xPersonioPartnerID, xPersonioAppID, employeesUpdateEmployeeFieldsRequest);
        }

        /**
         * Execute updateEmployeeFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee is updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeUpdatedResponse> _callback) throws ApiException {
            EmployeesUpdateEmployeeFieldsRequest employeesUpdateEmployeeFieldsRequest = buildBodyParams();
            return updateEmployeeFieldsAsync(employeeId, xPersonioPartnerID, xPersonioAppID, employeesUpdateEmployeeFieldsRequest, _callback);
        }
    }

    /**
     * Update an employee
     * Updates an existing employee. Note: Only the fields that are listed in the body example are updatable. Attributes that are not part of the sample request body but are present inside the request are ignored. It&#39;s not possible to update the Email field. 
     * @param employeeId Numeric &#x60;id&#x60; of the employee (required)
     * @return UpdateEmployeeFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Employee is updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEmployeeFieldsRequestBuilder updateEmployeeFields(Integer employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
        return new UpdateEmployeeFieldsRequestBuilder(employeeId);
    }
}
