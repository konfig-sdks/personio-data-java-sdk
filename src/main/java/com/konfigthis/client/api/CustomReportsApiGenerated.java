/*
 * Personnel Data
 * API for reading and writing personnel data including data about attendances, absences, documents, etc
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PublicListColumnsResponse;
import com.konfigthis.client.model.PublicListReportsResponse;
import com.konfigthis.client.model.PublicReportResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CustomReportsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomReportsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CustomReportsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getColumnLabelsCall(String xPersonioPartnerID, String xPersonioAppID, List<String> columns, String locale, String reportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/custom-reports/columns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (columns != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "columns", columns));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (reportId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("report_id", reportId));
        }

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getColumnLabelsValidateBeforeCall(String xPersonioPartnerID, String xPersonioAppID, List<String> columns, String locale, String reportId, final ApiCallback _callback) throws ApiException {
        return getColumnLabelsCall(xPersonioPartnerID, xPersonioAppID, columns, locale, reportId, _callback);

    }


    private ApiResponse<PublicListColumnsResponse> getColumnLabelsWithHttpInfo(String xPersonioPartnerID, String xPersonioAppID, List<String> columns, String locale, String reportId) throws ApiException {
        okhttp3.Call localVarCall = getColumnLabelsValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, columns, locale, reportId, null);
        Type localVarReturnType = new TypeToken<PublicListColumnsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getColumnLabelsAsync(String xPersonioPartnerID, String xPersonioAppID, List<String> columns, String locale, String reportId, final ApiCallback<PublicListColumnsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getColumnLabelsValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, columns, locale, reportId, _callback);
        Type localVarReturnType = new TypeToken<PublicListColumnsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetColumnLabelsRequestBuilder {
        private String xPersonioPartnerID;
        private String xPersonioAppID;
        private List<String> columns;
        private String locale;
        private String reportId;

        private GetColumnLabelsRequestBuilder() {
        }

        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return GetColumnLabelsRequestBuilder
         */
        public GetColumnLabelsRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return GetColumnLabelsRequestBuilder
         */
        public GetColumnLabelsRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Set columns
         * @param columns The columns to filter the results. (optional)
         * @return GetColumnLabelsRequestBuilder
         */
        public GetColumnLabelsRequestBuilder columns(List<String> columns) {
            this.columns = columns;
            return this;
        }
        
        /**
         * Set locale
         * @param locale locale used to translate localized fields. (optional)
         * @return GetColumnLabelsRequestBuilder
         */
        public GetColumnLabelsRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set reportId
         * @param reportId The ID of the report to filter the result of the columns. If no ID is passed, all columns for the company are returned. (optional)
         * @return GetColumnLabelsRequestBuilder
         */
        public GetColumnLabelsRequestBuilder reportId(String reportId) {
            this.reportId = reportId;
            return this;
        }
        
        /**
         * Build call for getColumnLabels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getColumnLabelsCall(xPersonioPartnerID, xPersonioAppID, columns, locale, reportId, _callback);
        }


        /**
         * Execute getColumnLabels request
         * @return PublicListColumnsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public PublicListColumnsResponse execute() throws ApiException {
            ApiResponse<PublicListColumnsResponse> localVarResp = getColumnLabelsWithHttpInfo(xPersonioPartnerID, xPersonioAppID, columns, locale, reportId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getColumnLabels request with HTTP info returned
         * @return ApiResponse&lt;PublicListColumnsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicListColumnsResponse> executeWithHttpInfo() throws ApiException {
            return getColumnLabelsWithHttpInfo(xPersonioPartnerID, xPersonioAppID, columns, locale, reportId);
        }

        /**
         * Execute getColumnLabels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicListColumnsResponse> _callback) throws ApiException {
            return getColumnLabelsAsync(xPersonioPartnerID, xPersonioAppID, columns, locale, reportId, _callback);
        }
    }

    /**
     * 
     * This endpoint provides human-readable labels for report table columns. It is particularly important if you get a report with custom attributes or absence data to match the column IDs to the translation.
     * @return GetColumnLabelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public GetColumnLabelsRequestBuilder getColumnLabels() throws IllegalArgumentException {
        return new GetColumnLabelsRequestBuilder();
    }
    private okhttp3.Call getDataCall(String reportId, String xPersonioPartnerID, String xPersonioAppID, String locale, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/custom-reports/reports/{report_id}"
            .replace("{" + "report_id" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataValidateBeforeCall(String reportId, String xPersonioPartnerID, String xPersonioAppID, String locale, Integer page, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling getData(Async)");
        }

        return getDataCall(reportId, xPersonioPartnerID, xPersonioAppID, locale, page, limit, _callback);

    }


    private ApiResponse<PublicReportResponse> getDataWithHttpInfo(String reportId, String xPersonioPartnerID, String xPersonioAppID, String locale, Integer page, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getDataValidateBeforeCall(reportId, xPersonioPartnerID, xPersonioAppID, locale, page, limit, null);
        Type localVarReturnType = new TypeToken<PublicReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDataAsync(String reportId, String xPersonioPartnerID, String xPersonioAppID, String locale, Integer page, Integer limit, final ApiCallback<PublicReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataValidateBeforeCall(reportId, xPersonioPartnerID, xPersonioAppID, locale, page, limit, _callback);
        Type localVarReturnType = new TypeToken<PublicReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDataRequestBuilder {
        private final String reportId;
        private String xPersonioPartnerID;
        private String xPersonioAppID;
        private String locale;
        private Integer page;
        private Integer limit;

        private GetDataRequestBuilder(String reportId) {
            this.reportId = reportId;
        }

        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return GetDataRequestBuilder
         */
        public GetDataRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return GetDataRequestBuilder
         */
        public GetDataRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Set locale
         * @param locale locale used to translate localized fields. (optional)
         * @return GetDataRequestBuilder
         */
        public GetDataRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set page
         * @param page Pagination parameter to identify the page to return. (optional)
         * @return GetDataRequestBuilder
         */
        public GetDataRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Pagination parameter to limit the number of employees returned per page. (optional)
         * @return GetDataRequestBuilder
         */
        public GetDataRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDataCall(reportId, xPersonioPartnerID, xPersonioAppID, locale, page, limit, _callback);
        }


        /**
         * Execute getData request
         * @return PublicReportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public PublicReportResponse execute() throws ApiException {
            ApiResponse<PublicReportResponse> localVarResp = getDataWithHttpInfo(reportId, xPersonioPartnerID, xPersonioAppID, locale, page, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getData request with HTTP info returned
         * @return ApiResponse&lt;PublicReportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicReportResponse> executeWithHttpInfo() throws ApiException {
            return getDataWithHttpInfo(reportId, xPersonioPartnerID, xPersonioAppID, locale, page, limit);
        }

        /**
         * Execute getData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicReportResponse> _callback) throws ApiException {
            return getDataAsync(reportId, xPersonioPartnerID, xPersonioAppID, locale, page, limit, _callback);
        }
    }

    /**
     * 
     * This endpoint provides you with the data of an existing Custom Report.
     * @param reportId The ID of the report to filter the result. (required)
     * @return GetDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public GetDataRequestBuilder getData(String reportId) throws IllegalArgumentException {
        if (reportId == null) throw new IllegalArgumentException("\"reportId\" is required but got null");
            

        return new GetDataRequestBuilder(reportId);
    }
    private okhttp3.Call getMetadataCall(String xPersonioPartnerID, String xPersonioAppID, List<String> reportIds, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/custom-reports/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reportIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "report_ids", reportIds));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetadataValidateBeforeCall(String xPersonioPartnerID, String xPersonioAppID, List<String> reportIds, String status, final ApiCallback _callback) throws ApiException {
        return getMetadataCall(xPersonioPartnerID, xPersonioAppID, reportIds, status, _callback);

    }


    private ApiResponse<PublicListReportsResponse> getMetadataWithHttpInfo(String xPersonioPartnerID, String xPersonioAppID, List<String> reportIds, String status) throws ApiException {
        okhttp3.Call localVarCall = getMetadataValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, reportIds, status, null);
        Type localVarReturnType = new TypeToken<PublicListReportsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMetadataAsync(String xPersonioPartnerID, String xPersonioAppID, List<String> reportIds, String status, final ApiCallback<PublicListReportsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetadataValidateBeforeCall(xPersonioPartnerID, xPersonioAppID, reportIds, status, _callback);
        Type localVarReturnType = new TypeToken<PublicListReportsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMetadataRequestBuilder {
        private String xPersonioPartnerID;
        private String xPersonioAppID;
        private List<String> reportIds;
        private String status;

        private GetMetadataRequestBuilder() {
        }

        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return GetMetadataRequestBuilder
         */
        public GetMetadataRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return GetMetadataRequestBuilder
         */
        public GetMetadataRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Set reportIds
         * @param reportIds A list of report ID&#39;s to filter the results. (optional)
         * @return GetMetadataRequestBuilder
         */
        public GetMetadataRequestBuilder reportIds(List<String> reportIds) {
            this.reportIds = reportIds;
            return this;
        }
        
        /**
         * Set status
         * @param status The status of the report to filter the results. (optional)
         * @return GetMetadataRequestBuilder
         */
        public GetMetadataRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for getMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMetadataCall(xPersonioPartnerID, xPersonioAppID, reportIds, status, _callback);
        }


        /**
         * Execute getMetadata request
         * @return PublicListReportsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public PublicListReportsResponse execute() throws ApiException {
            ApiResponse<PublicListReportsResponse> localVarResp = getMetadataWithHttpInfo(xPersonioPartnerID, xPersonioAppID, reportIds, status);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMetadata request with HTTP info returned
         * @return ApiResponse&lt;PublicListReportsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicListReportsResponse> executeWithHttpInfo() throws ApiException {
            return getMetadataWithHttpInfo(xPersonioPartnerID, xPersonioAppID, reportIds, status);
        }

        /**
         * Execute getMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicListReportsResponse> _callback) throws ApiException {
            return getMetadataAsync(xPersonioPartnerID, xPersonioAppID, reportIds, status, _callback);
        }
    }

    /**
     * 
     * This endpoint provides you with metadata about existing custom reports in your Personio account, such as report name, report type, report date / timeframe.
     * @return GetMetadataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
     </table>
     */
    public GetMetadataRequestBuilder getMetadata() throws IllegalArgumentException {
        return new GetMetadataRequestBuilder();
    }
}
