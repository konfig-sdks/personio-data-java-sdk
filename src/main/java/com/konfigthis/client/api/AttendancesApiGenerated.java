/*
 * Personnel Data
 * API for reading and writing personnel data including data about attendances, absences, documents, etc
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AttendanceCreateRequest;
import com.konfigthis.client.model.AttendanceCreateRequestAttendancesInner;
import com.konfigthis.client.model.AttendancePeriodsResponse;
import com.konfigthis.client.model.AttendanceUpdateRequest;
import com.konfigthis.client.model.DeletedAttendanceResponse;
import java.time.LocalDate;
import com.konfigthis.client.model.NewAttendancePeriodParametersRequest;
import com.konfigthis.client.model.NewAttendancePeriodResponse;
import com.konfigthis.client.model.UpdatedAttendanceResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AttendancesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AttendancesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AttendancesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createMultipleAttendancesCall(AttendanceCreateRequest attendanceCreateRequest, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attendanceCreateRequest;

        // create path and map variables
        String localVarPath = "/company/attendances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMultipleAttendancesValidateBeforeCall(AttendanceCreateRequest attendanceCreateRequest, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attendanceCreateRequest' is set
        if (attendanceCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'attendanceCreateRequest' when calling createMultipleAttendances(Async)");
        }

        return createMultipleAttendancesCall(attendanceCreateRequest, xPersonioPartnerID, xPersonioAppID, _callback);

    }


    private ApiResponse<NewAttendancePeriodResponse> createMultipleAttendancesWithHttpInfo(AttendanceCreateRequest attendanceCreateRequest, String xPersonioPartnerID, String xPersonioAppID) throws ApiException {
        okhttp3.Call localVarCall = createMultipleAttendancesValidateBeforeCall(attendanceCreateRequest, xPersonioPartnerID, xPersonioAppID, null);
        Type localVarReturnType = new TypeToken<NewAttendancePeriodResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createMultipleAttendancesAsync(AttendanceCreateRequest attendanceCreateRequest, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback<NewAttendancePeriodResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMultipleAttendancesValidateBeforeCall(attendanceCreateRequest, xPersonioPartnerID, xPersonioAppID, _callback);
        Type localVarReturnType = new TypeToken<NewAttendancePeriodResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateMultipleAttendancesRequestBuilder {
        private List<AttendanceCreateRequestAttendancesInner> attendances;
        private Boolean skipApproval;
        private String xPersonioPartnerID;
        private String xPersonioAppID;

        private CreateMultipleAttendancesRequestBuilder() {
        }

        /**
         * Set attendances
         * @param attendances  (optional)
         * @return CreateMultipleAttendancesRequestBuilder
         */
        public CreateMultipleAttendancesRequestBuilder attendances(List<AttendanceCreateRequestAttendancesInner> attendances) {
            this.attendances = attendances;
            return this;
        }
        
        /**
         * Set skipApproval
         * @param skipApproval Optional, default value is true. If set to false, the approval status of the attendance period will be \\\&quot;pending\\\&quot; if an approval rule is set for the attendances type. The respective approval flow will be triggered. (optional)
         * @return CreateMultipleAttendancesRequestBuilder
         */
        public CreateMultipleAttendancesRequestBuilder skipApproval(Boolean skipApproval) {
            this.skipApproval = skipApproval;
            return this;
        }
        
        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return CreateMultipleAttendancesRequestBuilder
         */
        public CreateMultipleAttendancesRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return CreateMultipleAttendancesRequestBuilder
         */
        public CreateMultipleAttendancesRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Build call for createMultipleAttendances
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The attendance periods are successfully created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AttendanceCreateRequest attendanceCreateRequest = buildBodyParams();
            return createMultipleAttendancesCall(attendanceCreateRequest, xPersonioPartnerID, xPersonioAppID, _callback);
        }

        private AttendanceCreateRequest buildBodyParams() {
            AttendanceCreateRequest attendanceCreateRequest = new AttendanceCreateRequest();
            attendanceCreateRequest.attendances(this.attendances);
            attendanceCreateRequest.skipApproval(this.skipApproval);
            return attendanceCreateRequest;
        }

        /**
         * Execute createMultipleAttendances request
         * @return NewAttendancePeriodResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The attendance periods are successfully created </td><td>  -  </td></tr>
         </table>
         */
        public NewAttendancePeriodResponse execute() throws ApiException {
            AttendanceCreateRequest attendanceCreateRequest = buildBodyParams();
            ApiResponse<NewAttendancePeriodResponse> localVarResp = createMultipleAttendancesWithHttpInfo(attendanceCreateRequest, xPersonioPartnerID, xPersonioAppID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createMultipleAttendances request with HTTP info returned
         * @return ApiResponse&lt;NewAttendancePeriodResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The attendance periods are successfully created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NewAttendancePeriodResponse> executeWithHttpInfo() throws ApiException {
            AttendanceCreateRequest attendanceCreateRequest = buildBodyParams();
            return createMultipleAttendancesWithHttpInfo(attendanceCreateRequest, xPersonioPartnerID, xPersonioAppID);
        }

        /**
         * Execute createMultipleAttendances request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The attendance periods are successfully created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NewAttendancePeriodResponse> _callback) throws ApiException {
            AttendanceCreateRequest attendanceCreateRequest = buildBodyParams();
            return createMultipleAttendancesAsync(attendanceCreateRequest, xPersonioPartnerID, xPersonioAppID, _callback);
        }
    }

    /**
     * 
     * This endpoint is responsible for adding attendance data for the company employees. It is possible to add attendances for one or many employees at the same time. The payload sent on the request should be a list of attendance periods, in the form of an array containing attendance period objects.
     * @param attendanceCreateRequest List of attendance periods to create (required)
     * @return CreateMultipleAttendancesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The attendance periods are successfully created </td><td>  -  </td></tr>
     </table>
     */
    public CreateMultipleAttendancesRequestBuilder createMultipleAttendances() throws IllegalArgumentException {
        return new CreateMultipleAttendancesRequestBuilder();
    }
    private okhttp3.Call deleteDataCall(Integer id, String xPersonioPartnerID, String xPersonioAppID, Boolean skipApproval, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/attendances/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skipApproval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip_approval", skipApproval));
        }

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDataValidateBeforeCall(Integer id, String xPersonioPartnerID, String xPersonioAppID, Boolean skipApproval, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteData(Async)");
        }

        return deleteDataCall(id, xPersonioPartnerID, xPersonioAppID, skipApproval, _callback);

    }


    private ApiResponse<DeletedAttendanceResponse> deleteDataWithHttpInfo(Integer id, String xPersonioPartnerID, String xPersonioAppID, Boolean skipApproval) throws ApiException {
        okhttp3.Call localVarCall = deleteDataValidateBeforeCall(id, xPersonioPartnerID, xPersonioAppID, skipApproval, null);
        Type localVarReturnType = new TypeToken<DeletedAttendanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteDataAsync(Integer id, String xPersonioPartnerID, String xPersonioAppID, Boolean skipApproval, final ApiCallback<DeletedAttendanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDataValidateBeforeCall(id, xPersonioPartnerID, xPersonioAppID, skipApproval, _callback);
        Type localVarReturnType = new TypeToken<DeletedAttendanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteDataRequestBuilder {
        private final Integer id;
        private String xPersonioPartnerID;
        private String xPersonioAppID;
        private Boolean skipApproval;

        private DeleteDataRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return DeleteDataRequestBuilder
         */
        public DeleteDataRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return DeleteDataRequestBuilder
         */
        public DeleteDataRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Set skipApproval
         * @param skipApproval Optional, default value is true. If set to false, the approval status of the attendance period will be \&quot;pending\&quot; if an approval rule is set for the attendances type. The respective approval flow will be triggered. (optional, default to true)
         * @return DeleteDataRequestBuilder
         */
        public DeleteDataRequestBuilder skipApproval(Boolean skipApproval) {
            this.skipApproval = skipApproval;
            return this;
        }
        
        /**
         * Build call for deleteData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteDataCall(id, xPersonioPartnerID, xPersonioAppID, skipApproval, _callback);
        }


        /**
         * Execute deleteData request
         * @return DeletedAttendanceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
         </table>
         */
        public DeletedAttendanceResponse execute() throws ApiException {
            ApiResponse<DeletedAttendanceResponse> localVarResp = deleteDataWithHttpInfo(id, xPersonioPartnerID, xPersonioAppID, skipApproval);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteData request with HTTP info returned
         * @return ApiResponse&lt;DeletedAttendanceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletedAttendanceResponse> executeWithHttpInfo() throws ApiException {
            return deleteDataWithHttpInfo(id, xPersonioPartnerID, xPersonioAppID, skipApproval);
        }

        /**
         * Execute deleteData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletedAttendanceResponse> _callback) throws ApiException {
            return deleteDataAsync(id, xPersonioPartnerID, xPersonioAppID, skipApproval, _callback);
        }
    }

    /**
     * 
     * This endpoint is responsible for deleting attendance data for the company employees.
     * @param id ID of the attendance period to delete (required)
     * @return DeleteDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDataRequestBuilder deleteData(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeleteDataRequestBuilder(id);
    }
    private okhttp3.Call getListCall(LocalDate startDate, LocalDate endDate, String xPersonioPartnerID, String xPersonioAppID, String updatedFrom, String updatedTo, Boolean includePending, List<Integer> employees, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/attendances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (updatedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_from", updatedFrom));
        }

        if (updatedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_to", updatedTo));
        }

        if (includePending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePending", includePending));
        }

        if (employees != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "employees[]", employees));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(LocalDate startDate, LocalDate endDate, String xPersonioPartnerID, String xPersonioAppID, String updatedFrom, String updatedTo, Boolean includePending, List<Integer> employees, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getList(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getList(Async)");
        }

        return getListCall(startDate, endDate, xPersonioPartnerID, xPersonioAppID, updatedFrom, updatedTo, includePending, employees, limit, offset, _callback);

    }


    private ApiResponse<AttendancePeriodsResponse> getListWithHttpInfo(LocalDate startDate, LocalDate endDate, String xPersonioPartnerID, String xPersonioAppID, String updatedFrom, String updatedTo, Boolean includePending, List<Integer> employees, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(startDate, endDate, xPersonioPartnerID, xPersonioAppID, updatedFrom, updatedTo, includePending, employees, limit, offset, null);
        Type localVarReturnType = new TypeToken<AttendancePeriodsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(LocalDate startDate, LocalDate endDate, String xPersonioPartnerID, String xPersonioAppID, String updatedFrom, String updatedTo, Boolean includePending, List<Integer> employees, Integer limit, Integer offset, final ApiCallback<AttendancePeriodsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(startDate, endDate, xPersonioPartnerID, xPersonioAppID, updatedFrom, updatedTo, includePending, employees, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<AttendancePeriodsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private final LocalDate startDate;
        private final LocalDate endDate;
        private String xPersonioPartnerID;
        private String xPersonioAppID;
        private String updatedFrom;
        private String updatedTo;
        private Boolean includePending;
        private List<Integer> employees;
        private Integer limit;
        private Integer offset;

        private GetListRequestBuilder(LocalDate startDate, LocalDate endDate) {
            this.startDate = startDate;
            this.endDate = endDate;
        }

        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Set updatedFrom
         * @param updatedFrom Datetime from when the queried periods have been updated. Same format as updated_at. It is inclusive, so the day specified as updated_from will also be considered on the results. Can be just the date, or the date and the time, with or without the timezone. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder updatedFrom(String updatedFrom) {
            this.updatedFrom = updatedFrom;
            return this;
        }
        
        /**
         * Set updatedTo
         * @param updatedTo Datetime until when the queried periods have been updated. Same format as updated_at. It is inclusive, so the day specified as updated_to will also be considered on the results. Can be just the date, or the date and the time, with or without the timezone. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder updatedTo(String updatedTo) {
            this.updatedTo = updatedTo;
            return this;
        }
        
        /**
         * Set includePending
         * @param includePending Returns AttendancePeriods with a status of pending, rejected and confirmed. For pending periods, the end_date attribute is nullable. The status of each period is included in the response. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder includePending(Boolean includePending) {
            this.includePending = includePending;
            return this;
        }
        
        /**
         * Set employees
         * @param employees A list of Personio employee ID&#39;s to filter the results. The result filters including only attendances of provided employees. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder employees(List<Integer> employees) {
            this.employees = employees;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Pagination attribute to limit how many attendances are per page (optional, default to 200)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The offset from the first record that would be returned. With 3 results [A, B, C] and an offset of 1, the following two results will be returned [B, C]. (optional, default to 0)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Attendance periods matching the provided filters </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(startDate, endDate, xPersonioPartnerID, xPersonioAppID, updatedFrom, updatedTo, includePending, employees, limit, offset, _callback);
        }


        /**
         * Execute getList request
         * @return AttendancePeriodsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Attendance periods matching the provided filters </td><td>  -  </td></tr>
         </table>
         */
        public AttendancePeriodsResponse execute() throws ApiException {
            ApiResponse<AttendancePeriodsResponse> localVarResp = getListWithHttpInfo(startDate, endDate, xPersonioPartnerID, xPersonioAppID, updatedFrom, updatedTo, includePending, employees, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;AttendancePeriodsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Attendance periods matching the provided filters </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AttendancePeriodsResponse> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(startDate, endDate, xPersonioPartnerID, xPersonioAppID, updatedFrom, updatedTo, includePending, employees, limit, offset);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Attendance periods matching the provided filters </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AttendancePeriodsResponse> _callback) throws ApiException {
            return getListAsync(startDate, endDate, xPersonioPartnerID, xPersonioAppID, updatedFrom, updatedTo, includePending, employees, limit, offset, _callback);
        }
    }

    /**
     * 
     * Fetch attendance data for the company employees. The result can be &#x60;paginated&#x60; and &#x60;filtered&#x60; by period, the date and/or time they were updated, and/or specific employee/employees. The result contains a list of attendances.
     * @param startDate First day of the period to be queried. It is inclusive, so the day specified as start_date will also be considered on the results (required)
     * @param endDate Last day of the period to be queried. It is inclusive, so the day specified as end_date will also be considered on the results. (required)
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Attendance periods matching the provided filters </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList(LocalDate startDate, LocalDate endDate) throws IllegalArgumentException {
        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
        return new GetListRequestBuilder(startDate, endDate);
    }
    private okhttp3.Call updateAttendanceDataCall(Integer id, AttendanceUpdateRequest attendanceUpdateRequest, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attendanceUpdateRequest;

        // create path and map variables
        String localVarPath = "/company/attendances/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xPersonioPartnerID != null) {
            localVarHeaderParams.put("X-Personio-Partner-ID", localVarApiClient.parameterToString(xPersonioPartnerID));
        }

        if (xPersonioAppID != null) {
            localVarHeaderParams.put("X-Personio-App-ID", localVarApiClient.parameterToString(xPersonioAppID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAttendanceDataValidateBeforeCall(Integer id, AttendanceUpdateRequest attendanceUpdateRequest, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateAttendanceData(Async)");
        }

        // verify the required parameter 'attendanceUpdateRequest' is set
        if (attendanceUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'attendanceUpdateRequest' when calling updateAttendanceData(Async)");
        }

        return updateAttendanceDataCall(id, attendanceUpdateRequest, xPersonioPartnerID, xPersonioAppID, _callback);

    }


    private ApiResponse<UpdatedAttendanceResponse> updateAttendanceDataWithHttpInfo(Integer id, AttendanceUpdateRequest attendanceUpdateRequest, String xPersonioPartnerID, String xPersonioAppID) throws ApiException {
        okhttp3.Call localVarCall = updateAttendanceDataValidateBeforeCall(id, attendanceUpdateRequest, xPersonioPartnerID, xPersonioAppID, null);
        Type localVarReturnType = new TypeToken<UpdatedAttendanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAttendanceDataAsync(Integer id, AttendanceUpdateRequest attendanceUpdateRequest, String xPersonioPartnerID, String xPersonioAppID, final ApiCallback<UpdatedAttendanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAttendanceDataValidateBeforeCall(id, attendanceUpdateRequest, xPersonioPartnerID, xPersonioAppID, _callback);
        Type localVarReturnType = new TypeToken<UpdatedAttendanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAttendanceDataRequestBuilder {
        private final Integer id;
        private LocalDate date;
        private String startTime;
        private String endTime;
        private Integer _break;
        private String comment;
        private Integer projectId;
        private Boolean skipApproval;
        private String xPersonioPartnerID;
        private String xPersonioAppID;

        private UpdateAttendanceDataRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set date
         * @param date  (optional)
         * @return UpdateAttendanceDataRequestBuilder
         */
        public UpdateAttendanceDataRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set startTime
         * @param startTime Format: hh:mm (optional)
         * @return UpdateAttendanceDataRequestBuilder
         */
        public UpdateAttendanceDataRequestBuilder startTime(String startTime) {
            this.startTime = startTime;
            return this;
        }
        
        /**
         * Set endTime
         * @param endTime Format: hh:mm (optional)
         * @return UpdateAttendanceDataRequestBuilder
         */
        public UpdateAttendanceDataRequestBuilder endTime(String endTime) {
            this.endTime = endTime;
            return this;
        }
        
        /**
         * Set _break
         * @param _break  (optional)
         * @return UpdateAttendanceDataRequestBuilder
         */
        public UpdateAttendanceDataRequestBuilder _break(Integer _break) {
            this._break = _break;
            return this;
        }
        
        /**
         * Set comment
         * @param comment  (optional)
         * @return UpdateAttendanceDataRequestBuilder
         */
        public UpdateAttendanceDataRequestBuilder comment(String comment) {
            this.comment = comment;
            return this;
        }
        
        /**
         * Set projectId
         * @param projectId  (optional)
         * @return UpdateAttendanceDataRequestBuilder
         */
        public UpdateAttendanceDataRequestBuilder projectId(Integer projectId) {
            this.projectId = projectId;
            return this;
        }
        
        /**
         * Set skipApproval
         * @param skipApproval Optional, default value is true. If set to false, the approval status of the attendance period will be \\\&quot;pending\\\&quot; if an approval rule is set for the attendances type. The respective approval flow will be triggered. (optional)
         * @return UpdateAttendanceDataRequestBuilder
         */
        public UpdateAttendanceDataRequestBuilder skipApproval(Boolean skipApproval) {
            this.skipApproval = skipApproval;
            return this;
        }
        
        /**
         * Set xPersonioPartnerID
         * @param xPersonioPartnerID The partner identifier (optional)
         * @return UpdateAttendanceDataRequestBuilder
         */
        public UpdateAttendanceDataRequestBuilder xPersonioPartnerID(String xPersonioPartnerID) {
            this.xPersonioPartnerID = xPersonioPartnerID;
            return this;
        }
        
        /**
         * Set xPersonioAppID
         * @param xPersonioAppID The application identifier (optional)
         * @return UpdateAttendanceDataRequestBuilder
         */
        public UpdateAttendanceDataRequestBuilder xPersonioAppID(String xPersonioAppID) {
            this.xPersonioAppID = xPersonioAppID;
            return this;
        }
        
        /**
         * Build call for updateAttendanceData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AttendanceUpdateRequest attendanceUpdateRequest = buildBodyParams();
            return updateAttendanceDataCall(id, attendanceUpdateRequest, xPersonioPartnerID, xPersonioAppID, _callback);
        }

        private AttendanceUpdateRequest buildBodyParams() {
            AttendanceUpdateRequest attendanceUpdateRequest = new AttendanceUpdateRequest();
            attendanceUpdateRequest.date(this.date);
            attendanceUpdateRequest.startTime(this.startTime);
            attendanceUpdateRequest.endTime(this.endTime);
            attendanceUpdateRequest._break(this._break);
            attendanceUpdateRequest.comment(this.comment);
            attendanceUpdateRequest.projectId(this.projectId);
            attendanceUpdateRequest.skipApproval(this.skipApproval);
            return attendanceUpdateRequest;
        }

        /**
         * Execute updateAttendanceData request
         * @return UpdatedAttendanceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
         </table>
         */
        public UpdatedAttendanceResponse execute() throws ApiException {
            AttendanceUpdateRequest attendanceUpdateRequest = buildBodyParams();
            ApiResponse<UpdatedAttendanceResponse> localVarResp = updateAttendanceDataWithHttpInfo(id, attendanceUpdateRequest, xPersonioPartnerID, xPersonioAppID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAttendanceData request with HTTP info returned
         * @return ApiResponse&lt;UpdatedAttendanceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdatedAttendanceResponse> executeWithHttpInfo() throws ApiException {
            AttendanceUpdateRequest attendanceUpdateRequest = buildBodyParams();
            return updateAttendanceDataWithHttpInfo(id, attendanceUpdateRequest, xPersonioPartnerID, xPersonioAppID);
        }

        /**
         * Execute updateAttendanceData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdatedAttendanceResponse> _callback) throws ApiException {
            AttendanceUpdateRequest attendanceUpdateRequest = buildBodyParams();
            return updateAttendanceDataAsync(id, attendanceUpdateRequest, xPersonioPartnerID, xPersonioAppID, _callback);
        }
    }

    /**
     * 
     * This endpoint is responsible for updating attendance data for the company employees. Attributes are not required and if not specified, the current value will be used. It is not possible to change the employee id.
     * @param id ID of the attendance period to update (required)
     * @param attendanceUpdateRequest Attendance period data to update. At least one of the properties (&#x60;date&#x60;, &#x60;start_time&#x60;, &#x60;end_time&#x60;, &#x60;break&#x60;, &#x60;comment&#x60;, &#x60;project_id&#x60;, &#x60;skip_approval&#x60;) is required. (required)
     * @return UpdateAttendanceDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAttendanceDataRequestBuilder updateAttendanceData(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateAttendanceDataRequestBuilder(id);
    }
}
