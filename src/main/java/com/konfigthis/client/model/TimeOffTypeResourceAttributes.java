/*
 * Personnel Data
 * API for reading and writing personnel data including data about attendances, absences, documents, etc
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TimeOffTypeResourceAttributes
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TimeOffTypeResourceAttributes {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Gets or Sets category
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
 public enum CategoryEnum {
    FAMILY_CARE("family_care"),
    
    MATERNITY_PARENTAL_LEAVE("maternity_parental_leave"),
    
    CHILD_CARE("child_care"),
    
    SHORT_TIME_ALLOWANCE("short_time_allowance"),
    
    QUARANTINE("quarantine"),
    
    LOCKOUT("lockout"),
    
    IRREVOCABLE_EXEMPTION("irrevocable_exemption"),
    
    SICK_LEAVE("sick_leave"),
    
    VOLUNTARY_MILITARY_SERVICE("voluntary_military_service"),
    
    UNLAWFUL_STRIKE("unlawful_strike"),
    
    LAWFUL_STRIKE("lawful_strike"),
    
    PAID_VACATION("paid_vacation"),
    
    UNPAID_VACATION("unpaid_vacation"),
    
    UNEXCUSED_ABSENCE("unexcused_absence"),
    
    OFFSITE_WORK("offsite_work"),
    
    OTHER("other"),
    
    UNDEFINED("undefined");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  /**
   * Gets or Sets legacyCategory
   */
  @JsonAdapter(LegacyCategoryEnum.Adapter.class)
 public enum LegacyCategoryEnum {
    FAMILY_CARE_SICK_LEAVE("family_care_sick_leave"),
    
    INDIVIDUAL_PROHIBITION_OF_EMPLOYMENT("individual_prohibition_of_employment"),
    
    MATERNITY_PROTECTION_PERIOD("maternity_protection_period"),
    
    OTHER("other"),
    
    PAID_VACATION("paid_vacation"),
    
    PARENTAL_LEAVE("parental_leave"),
    
    SICK_LEAVE("sick_leave"),
    
    LAWFUL_STRIKE("lawful_strike"),
    
    UNLAWFUL_STRIKE("unlawful_strike"),
    
    TREATMENT("treatment"),
    
    UNEXCUSED_ABSENCE("unexcused_absence"),
    
    UNPAID_VACATION("unpaid_vacation"),
    
    VOLUNTARY_MILITARY_SERVICE("voluntary_military_service"),
    
    OFFSITE_WORK("offsite_work"),
    
    FAMILY_CARE_LONG_TERM("family_care_long_term"),
    
    PAID_CHILD_SICK("paid_child_sick"),
    
    UNPAID_CHILD_SICK("unpaid_child_sick"),
    
    UNDEFINED("undefined");

    private String value;

    LegacyCategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LegacyCategoryEnum fromValue(String value) {
      for (LegacyCategoryEnum b : LegacyCategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LegacyCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LegacyCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LegacyCategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LegacyCategoryEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LEGACY_CATEGORY = "legacy_category";
  @SerializedName(SERIALIZED_NAME_LEGACY_CATEGORY)
  private LegacyCategoryEnum legacyCategory;

  /**
   * Gets or Sets unit
   */
  @JsonAdapter(UnitEnum.Adapter.class)
 public enum UnitEnum {
    DAY("day"),
    
    HOUR("hour");

    private String value;

    UnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnitEnum fromValue(String value) {
      for (UnitEnum b : UnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnitEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private UnitEnum unit;

  public static final String SERIALIZED_NAME_HALF_DAY_REQUESTS_ENABLED = "half_day_requests_enabled";
  @SerializedName(SERIALIZED_NAME_HALF_DAY_REQUESTS_ENABLED)
  private Boolean halfDayRequestsEnabled;

  public static final String SERIALIZED_NAME_CERTIFICATION_REQUIRED = "certification_required";
  @SerializedName(SERIALIZED_NAME_CERTIFICATION_REQUIRED)
  private Boolean certificationRequired;

  public static final String SERIALIZED_NAME_CERTIFICATION_SUBMISSION_TIMEFRAME = "certification_submission_timeframe";
  @SerializedName(SERIALIZED_NAME_CERTIFICATION_SUBMISSION_TIMEFRAME)
  private Integer certificationSubmissionTimeframe;

  /**
   * Gets or Sets substituteOption
   */
  @JsonAdapter(SubstituteOptionEnum.Adapter.class)
 public enum SubstituteOptionEnum {
    DISABLED("disabled"),
    
    OPTIONAL("optional"),
    
    REQUIRED("required");

    private String value;

    SubstituteOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubstituteOptionEnum fromValue(String value) {
      for (SubstituteOptionEnum b : SubstituteOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubstituteOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubstituteOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubstituteOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubstituteOptionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SUBSTITUTE_OPTION = "substitute_option";
  @SerializedName(SERIALIZED_NAME_SUBSTITUTE_OPTION)
  private SubstituteOptionEnum substituteOption;

  public static final String SERIALIZED_NAME_APPROVAL_REQUIRED = "approval_required";
  @SerializedName(SERIALIZED_NAME_APPROVAL_REQUIRED)
  private Boolean approvalRequired;

  public TimeOffTypeResourceAttributes() {
  }

  public TimeOffTypeResourceAttributes id(Integer id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * identifier
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "identifier")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    
    
    
    this.id = id;
  }


  public TimeOffTypeResourceAttributes name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Paid vacation", value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public TimeOffTypeResourceAttributes category(CategoryEnum category) {
    
    
    
    
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "OFFSITE_WORK", value = "")

  public CategoryEnum getCategory() {
    return category;
  }


  public void setCategory(CategoryEnum category) {
    
    
    
    this.category = category;
  }


  public TimeOffTypeResourceAttributes legacyCategory(LegacyCategoryEnum legacyCategory) {
    
    
    
    
    this.legacyCategory = legacyCategory;
    return this;
  }

   /**
   * Get legacyCategory
   * @return legacyCategory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "OFFSITE_WORK", value = "")

  public LegacyCategoryEnum getLegacyCategory() {
    return legacyCategory;
  }


  public void setLegacyCategory(LegacyCategoryEnum legacyCategory) {
    
    
    
    this.legacyCategory = legacyCategory;
  }


  public TimeOffTypeResourceAttributes unit(UnitEnum unit) {
    
    
    
    
    this.unit = unit;
    return this;
  }

   /**
   * Get unit
   * @return unit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "DAY", value = "")

  public UnitEnum getUnit() {
    return unit;
  }


  public void setUnit(UnitEnum unit) {
    
    
    
    this.unit = unit;
  }


  public TimeOffTypeResourceAttributes halfDayRequestsEnabled(Boolean halfDayRequestsEnabled) {
    
    
    
    
    this.halfDayRequestsEnabled = halfDayRequestsEnabled;
    return this;
  }

   /**
   * Get halfDayRequestsEnabled
   * @return halfDayRequestsEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getHalfDayRequestsEnabled() {
    return halfDayRequestsEnabled;
  }


  public void setHalfDayRequestsEnabled(Boolean halfDayRequestsEnabled) {
    
    
    
    this.halfDayRequestsEnabled = halfDayRequestsEnabled;
  }


  public TimeOffTypeResourceAttributes certificationRequired(Boolean certificationRequired) {
    
    
    
    
    this.certificationRequired = certificationRequired;
    return this;
  }

   /**
   * Get certificationRequired
   * @return certificationRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "")

  public Boolean getCertificationRequired() {
    return certificationRequired;
  }


  public void setCertificationRequired(Boolean certificationRequired) {
    
    
    
    this.certificationRequired = certificationRequired;
  }


  public TimeOffTypeResourceAttributes certificationSubmissionTimeframe(Integer certificationSubmissionTimeframe) {
    
    
    
    
    this.certificationSubmissionTimeframe = certificationSubmissionTimeframe;
    return this;
  }

   /**
   * The timeframe in days under which the employee needs to submit the certification
   * @return certificationSubmissionTimeframe
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "The timeframe in days under which the employee needs to submit the certification")

  public Integer getCertificationSubmissionTimeframe() {
    return certificationSubmissionTimeframe;
  }


  public void setCertificationSubmissionTimeframe(Integer certificationSubmissionTimeframe) {
    
    
    
    this.certificationSubmissionTimeframe = certificationSubmissionTimeframe;
  }


  public TimeOffTypeResourceAttributes substituteOption(SubstituteOptionEnum substituteOption) {
    
    
    
    
    this.substituteOption = substituteOption;
    return this;
  }

   /**
   * Get substituteOption
   * @return substituteOption
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "OPTIONAL", value = "")

  public SubstituteOptionEnum getSubstituteOption() {
    return substituteOption;
  }


  public void setSubstituteOption(SubstituteOptionEnum substituteOption) {
    
    
    
    this.substituteOption = substituteOption;
  }


  public TimeOffTypeResourceAttributes approvalRequired(Boolean approvalRequired) {
    
    
    
    
    this.approvalRequired = approvalRequired;
    return this;
  }

   /**
   * Get approvalRequired
   * @return approvalRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getApprovalRequired() {
    return approvalRequired;
  }


  public void setApprovalRequired(Boolean approvalRequired) {
    
    
    
    this.approvalRequired = approvalRequired;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TimeOffTypeResourceAttributes instance itself
   */
  public TimeOffTypeResourceAttributes putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeOffTypeResourceAttributes timeOffTypeResourceAttributes = (TimeOffTypeResourceAttributes) o;
    return Objects.equals(this.id, timeOffTypeResourceAttributes.id) &&
        Objects.equals(this.name, timeOffTypeResourceAttributes.name) &&
        Objects.equals(this.category, timeOffTypeResourceAttributes.category) &&
        Objects.equals(this.legacyCategory, timeOffTypeResourceAttributes.legacyCategory) &&
        Objects.equals(this.unit, timeOffTypeResourceAttributes.unit) &&
        Objects.equals(this.halfDayRequestsEnabled, timeOffTypeResourceAttributes.halfDayRequestsEnabled) &&
        Objects.equals(this.certificationRequired, timeOffTypeResourceAttributes.certificationRequired) &&
        Objects.equals(this.certificationSubmissionTimeframe, timeOffTypeResourceAttributes.certificationSubmissionTimeframe) &&
        Objects.equals(this.substituteOption, timeOffTypeResourceAttributes.substituteOption) &&
        Objects.equals(this.approvalRequired, timeOffTypeResourceAttributes.approvalRequired)&&
        Objects.equals(this.additionalProperties, timeOffTypeResourceAttributes.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, category, legacyCategory, unit, halfDayRequestsEnabled, certificationRequired, certificationSubmissionTimeframe, substituteOption, approvalRequired, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeOffTypeResourceAttributes {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    legacyCategory: ").append(toIndentedString(legacyCategory)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    halfDayRequestsEnabled: ").append(toIndentedString(halfDayRequestsEnabled)).append("\n");
    sb.append("    certificationRequired: ").append(toIndentedString(certificationRequired)).append("\n");
    sb.append("    certificationSubmissionTimeframe: ").append(toIndentedString(certificationSubmissionTimeframe)).append("\n");
    sb.append("    substituteOption: ").append(toIndentedString(substituteOption)).append("\n");
    sb.append("    approvalRequired: ").append(toIndentedString(approvalRequired)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("category");
    openapiFields.add("legacy_category");
    openapiFields.add("unit");
    openapiFields.add("half_day_requests_enabled");
    openapiFields.add("certification_required");
    openapiFields.add("certification_submission_timeframe");
    openapiFields.add("substitute_option");
    openapiFields.add("approval_required");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TimeOffTypeResourceAttributes
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TimeOffTypeResourceAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeOffTypeResourceAttributes is not found in the empty JSON string", TimeOffTypeResourceAttributes.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("category").isJsonNull() && (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if (!jsonObj.get("legacy_category").isJsonNull() && (jsonObj.get("legacy_category") != null && !jsonObj.get("legacy_category").isJsonNull()) && !jsonObj.get("legacy_category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legacy_category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legacy_category").toString()));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      if ((jsonObj.get("substitute_option") != null && !jsonObj.get("substitute_option").isJsonNull()) && !jsonObj.get("substitute_option").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `substitute_option` to be a primitive type in the JSON string but got `%s`", jsonObj.get("substitute_option").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeOffTypeResourceAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeOffTypeResourceAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeOffTypeResourceAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeOffTypeResourceAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeOffTypeResourceAttributes>() {
           @Override
           public void write(JsonWriter out, TimeOffTypeResourceAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeOffTypeResourceAttributes read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TimeOffTypeResourceAttributes instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimeOffTypeResourceAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimeOffTypeResourceAttributes
  * @throws IOException if the JSON string is invalid with respect to TimeOffTypeResourceAttributes
  */
  public static TimeOffTypeResourceAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeOffTypeResourceAttributes.class);
  }

 /**
  * Convert an instance of TimeOffTypeResourceAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

