/*
 * Personnel Data
 * API for reading and writing personnel data including data about attendances, absences, documents, etc
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * NewAttendancePeriodParametersRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class NewAttendancePeriodParametersRequest {
  public static final String SERIALIZED_NAME_ATTENDANCES_EMPLOYEE = "attendances[][employee]";
  @SerializedName(SERIALIZED_NAME_ATTENDANCES_EMPLOYEE)
  private Integer attendancesEmployee;

  public static final String SERIALIZED_NAME_ATTENDANCES_DATE = "attendances[][date]";
  @SerializedName(SERIALIZED_NAME_ATTENDANCES_DATE)
  private LocalDate attendancesDate;

  public static final String SERIALIZED_NAME_ATTENDANCES_START_TIME = "attendances[][start_time]";
  @SerializedName(SERIALIZED_NAME_ATTENDANCES_START_TIME)
  private String attendancesStartTime;

  public static final String SERIALIZED_NAME_ATTENDANCES_END_TIME = "attendances[][end_time]";
  @SerializedName(SERIALIZED_NAME_ATTENDANCES_END_TIME)
  private String attendancesEndTime;

  public static final String SERIALIZED_NAME_ATTENDANCES_BREAK = "attendances[]break";
  @SerializedName(SERIALIZED_NAME_ATTENDANCES_BREAK)
  private Integer attendancesBreak;

  public static final String SERIALIZED_NAME_ATTENDANCES_COMMENT = "attendances[][comment]";
  @SerializedName(SERIALIZED_NAME_ATTENDANCES_COMMENT)
  private String attendancesComment;

  public static final String SERIALIZED_NAME_SKIP_APPROVAL = "skip_approval";
  @SerializedName(SERIALIZED_NAME_SKIP_APPROVAL)
  private Boolean skipApproval;

  public static final String SERIALIZED_NAME_PROJECT_ID = "project_id";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private Integer projectId;

  public NewAttendancePeriodParametersRequest() {
  }

  public NewAttendancePeriodParametersRequest attendancesEmployee(Integer attendancesEmployee) {
    
    
    
    
    this.attendancesEmployee = attendancesEmployee;
    return this;
  }

   /**
   * Employee identifier
   * @return attendancesEmployee
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Employee identifier")

  public Integer getAttendancesEmployee() {
    return attendancesEmployee;
  }


  public void setAttendancesEmployee(Integer attendancesEmployee) {
    
    
    
    this.attendancesEmployee = attendancesEmployee;
  }


  public NewAttendancePeriodParametersRequest attendancesDate(LocalDate attendancesDate) {
    
    
    
    
    this.attendancesDate = attendancesDate;
    return this;
  }

   /**
   * Attendance date. Format: yyyy-mm-dd
   * @return attendancesDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Thu Jan 30 16:00:00 PST 2020", required = true, value = "Attendance date. Format: yyyy-mm-dd")

  public LocalDate getAttendancesDate() {
    return attendancesDate;
  }


  public void setAttendancesDate(LocalDate attendancesDate) {
    
    
    
    this.attendancesDate = attendancesDate;
  }


  public NewAttendancePeriodParametersRequest attendancesStartTime(String attendancesStartTime) {
    
    
    
    
    this.attendancesStartTime = attendancesStartTime;
    return this;
  }

   /**
   * Start time. Format: hh:mm
   * @return attendancesStartTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "08:00", required = true, value = "Start time. Format: hh:mm")

  public String getAttendancesStartTime() {
    return attendancesStartTime;
  }


  public void setAttendancesStartTime(String attendancesStartTime) {
    
    
    
    this.attendancesStartTime = attendancesStartTime;
  }


  public NewAttendancePeriodParametersRequest attendancesEndTime(String attendancesEndTime) {
    
    
    
    
    this.attendancesEndTime = attendancesEndTime;
    return this;
  }

   /**
   * End time. Format: hh:mm
   * @return attendancesEndTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "720", value = "End time. Format: hh:mm")

  public String getAttendancesEndTime() {
    return attendancesEndTime;
  }


  public void setAttendancesEndTime(String attendancesEndTime) {
    
    
    
    this.attendancesEndTime = attendancesEndTime;
  }


  public NewAttendancePeriodParametersRequest attendancesBreak(Integer attendancesBreak) {
    if (attendancesBreak != null && attendancesBreak < 0) {
      throw new IllegalArgumentException("Invalid value for attendancesBreak. Must be greater than or equal to 0.");
    }
    
    
    
    this.attendancesBreak = attendancesBreak;
    return this;
  }

   /**
   * Break in minutes
   * minimum: 0
   * @return attendancesBreak
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Break in minutes")

  public Integer getAttendancesBreak() {
    return attendancesBreak;
  }


  public void setAttendancesBreak(Integer attendancesBreak) {
    if (attendancesBreak != null && attendancesBreak < 0) {
      throw new IllegalArgumentException("Invalid value for attendancesBreak. Must be greater than or equal to 0.");
    }
    
    
    this.attendancesBreak = attendancesBreak;
  }


  public NewAttendancePeriodParametersRequest attendancesComment(String attendancesComment) {
    
    
    
    
    this.attendancesComment = attendancesComment;
    return this;
  }

   /**
   * Optional comment
   * @return attendancesComment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional comment")

  public String getAttendancesComment() {
    return attendancesComment;
  }


  public void setAttendancesComment(String attendancesComment) {
    
    
    
    this.attendancesComment = attendancesComment;
  }


  public NewAttendancePeriodParametersRequest skipApproval(Boolean skipApproval) {
    
    
    
    
    this.skipApproval = skipApproval;
    return this;
  }

   /**
   * Optional, default value is true. If set to false, the approval status of the attendance period will be \&quot;pending\&quot; if an approval rule is set for the attendances type. The respective approval flow will be triggered.
   * @return skipApproval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional, default value is true. If set to false, the approval status of the attendance period will be \"pending\" if an approval rule is set for the attendances type. The respective approval flow will be triggered.")

  public Boolean getSkipApproval() {
    return skipApproval;
  }


  public void setSkipApproval(Boolean skipApproval) {
    
    
    
    this.skipApproval = skipApproval;
  }


  public NewAttendancePeriodParametersRequest projectId(Integer projectId) {
    
    
    
    
    this.projectId = projectId;
    return this;
  }

   /**
   * The ID of the project
   * @return projectId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5", value = "The ID of the project")

  public Integer getProjectId() {
    return projectId;
  }


  public void setProjectId(Integer projectId) {
    
    
    
    this.projectId = projectId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the NewAttendancePeriodParametersRequest instance itself
   */
  public NewAttendancePeriodParametersRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewAttendancePeriodParametersRequest newAttendancePeriodParametersRequest = (NewAttendancePeriodParametersRequest) o;
    return Objects.equals(this.attendancesEmployee, newAttendancePeriodParametersRequest.attendancesEmployee) &&
        Objects.equals(this.attendancesDate, newAttendancePeriodParametersRequest.attendancesDate) &&
        Objects.equals(this.attendancesStartTime, newAttendancePeriodParametersRequest.attendancesStartTime) &&
        Objects.equals(this.attendancesEndTime, newAttendancePeriodParametersRequest.attendancesEndTime) &&
        Objects.equals(this.attendancesBreak, newAttendancePeriodParametersRequest.attendancesBreak) &&
        Objects.equals(this.attendancesComment, newAttendancePeriodParametersRequest.attendancesComment) &&
        Objects.equals(this.skipApproval, newAttendancePeriodParametersRequest.skipApproval) &&
        Objects.equals(this.projectId, newAttendancePeriodParametersRequest.projectId)&&
        Objects.equals(this.additionalProperties, newAttendancePeriodParametersRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(attendancesEmployee, attendancesDate, attendancesStartTime, attendancesEndTime, attendancesBreak, attendancesComment, skipApproval, projectId, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewAttendancePeriodParametersRequest {\n");
    sb.append("    attendancesEmployee: ").append(toIndentedString(attendancesEmployee)).append("\n");
    sb.append("    attendancesDate: ").append(toIndentedString(attendancesDate)).append("\n");
    sb.append("    attendancesStartTime: ").append(toIndentedString(attendancesStartTime)).append("\n");
    sb.append("    attendancesEndTime: ").append(toIndentedString(attendancesEndTime)).append("\n");
    sb.append("    attendancesBreak: ").append(toIndentedString(attendancesBreak)).append("\n");
    sb.append("    attendancesComment: ").append(toIndentedString(attendancesComment)).append("\n");
    sb.append("    skipApproval: ").append(toIndentedString(skipApproval)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attendances[][employee]");
    openapiFields.add("attendances[][date]");
    openapiFields.add("attendances[][start_time]");
    openapiFields.add("attendances[][end_time]");
    openapiFields.add("attendances[]break");
    openapiFields.add("attendances[][comment]");
    openapiFields.add("skip_approval");
    openapiFields.add("project_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attendances[][employee]");
    openapiRequiredFields.add("attendances[][date]");
    openapiRequiredFields.add("attendances[][start_time]");
    openapiRequiredFields.add("attendances[]break");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NewAttendancePeriodParametersRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NewAttendancePeriodParametersRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewAttendancePeriodParametersRequest is not found in the empty JSON string", NewAttendancePeriodParametersRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NewAttendancePeriodParametersRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("attendances[][start_time]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attendances[][start_time]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attendances[][start_time]").toString()));
      }
      if (!jsonObj.get("attendances[][end_time]").isJsonNull() && (jsonObj.get("attendances[][end_time]") != null && !jsonObj.get("attendances[][end_time]").isJsonNull()) && !jsonObj.get("attendances[][end_time]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attendances[][end_time]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attendances[][end_time]").toString()));
      }
      if (!jsonObj.get("attendances[][comment]").isJsonNull() && (jsonObj.get("attendances[][comment]") != null && !jsonObj.get("attendances[][comment]").isJsonNull()) && !jsonObj.get("attendances[][comment]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attendances[][comment]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attendances[][comment]").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewAttendancePeriodParametersRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewAttendancePeriodParametersRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewAttendancePeriodParametersRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewAttendancePeriodParametersRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<NewAttendancePeriodParametersRequest>() {
           @Override
           public void write(JsonWriter out, NewAttendancePeriodParametersRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public NewAttendancePeriodParametersRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             NewAttendancePeriodParametersRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NewAttendancePeriodParametersRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NewAttendancePeriodParametersRequest
  * @throws IOException if the JSON string is invalid with respect to NewAttendancePeriodParametersRequest
  */
  public static NewAttendancePeriodParametersRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewAttendancePeriodParametersRequest.class);
  }

 /**
  * Convert an instance of NewAttendancePeriodParametersRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

