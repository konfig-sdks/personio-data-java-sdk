/*
 * Personnel Data
 * API for reading and writing personnel data including data about attendances, absences, documents, etc
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EmployeesCreateEmployeeRequestEmployeeCustomAttributes;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeesCreateEmployeeRequestEmployee
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeesCreateEmployeeRequestEmployee {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_PREFERRED_NAME = "preferred_name";
  @SerializedName(SERIALIZED_NAME_PREFERRED_NAME)
  private String preferredName;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_SUBCOMPANY = "subcompany";
  @SerializedName(SERIALIZED_NAME_SUBCOMPANY)
  private String subcompany;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private String department;

  public static final String SERIALIZED_NAME_OFFICE = "office";
  @SerializedName(SERIALIZED_NAME_OFFICE)
  private String office;

  public static final String SERIALIZED_NAME_HIRE_DATE = "hire_date";
  @SerializedName(SERIALIZED_NAME_HIRE_DATE)
  private LocalDate hireDate;

  public static final String SERIALIZED_NAME_WEEKLY_WORKING_HOURS = "weekly_working_hours";
  @SerializedName(SERIALIZED_NAME_WEEKLY_WORKING_HOURS)
  private Double weeklyWorkingHours;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUPERVISOR_ID = "supervisor_id";
  @SerializedName(SERIALIZED_NAME_SUPERVISOR_ID)
  private Double supervisorId;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTES = "custom_attributes";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTES)
  private EmployeesCreateEmployeeRequestEmployeeCustomAttributes customAttributes;

  public EmployeesCreateEmployeeRequestEmployee() {
  }

  public EmployeesCreateEmployeeRequestEmployee email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * The e-mail field is required for the employee creation. Updating of this field is not currently supported.
   * @return email
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "john.dou@demo.com", required = true, value = "The e-mail field is required for the employee creation. Updating of this field is not currently supported.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public EmployeesCreateEmployeeRequestEmployee firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "John", required = true, value = "")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public EmployeesCreateEmployeeRequestEmployee lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Dou", required = true, value = "")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public EmployeesCreateEmployeeRequestEmployee preferredName(String preferredName) {
    
    
    
    
    this.preferredName = preferredName;
    return this;
  }

   /**
   * Get preferredName
   * @return preferredName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "John Dou", value = "")

  public String getPreferredName() {
    return preferredName;
  }


  public void setPreferredName(String preferredName) {
    
    
    
    this.preferredName = preferredName;
  }


  public EmployeesCreateEmployeeRequestEmployee gender(String gender) {
    
    
    
    
    this.gender = gender;
    return this;
  }

   /**
   * Get gender
   * @return gender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "male", value = "")

  public String getGender() {
    return gender;
  }


  public void setGender(String gender) {
    
    
    
    this.gender = gender;
  }


  public EmployeesCreateEmployeeRequestEmployee position(String position) {
    
    
    
    
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "developer", value = "")

  public String getPosition() {
    return position;
  }


  public void setPosition(String position) {
    
    
    
    this.position = position;
  }


  public EmployeesCreateEmployeeRequestEmployee subcompany(String subcompany) {
    
    
    
    
    this.subcompany = subcompany;
    return this;
  }

   /**
   * The subcompany employee belongs to. Should be predefined in Personio. Otherwise will be ignored with showing meta error in the response.
   * @return subcompany
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ACME", value = "The subcompany employee belongs to. Should be predefined in Personio. Otherwise will be ignored with showing meta error in the response.")

  public String getSubcompany() {
    return subcompany;
  }


  public void setSubcompany(String subcompany) {
    
    
    
    this.subcompany = subcompany;
  }


  public EmployeesCreateEmployeeRequestEmployee department(String department) {
    
    
    
    
    this.department = department;
    return this;
  }

   /**
   * The department employee belongs to. Should be predefined in Personio. Otherwise will be ignored with showing meta error in the response.
   * @return department
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "IT", value = "The department employee belongs to. Should be predefined in Personio. Otherwise will be ignored with showing meta error in the response.")

  public String getDepartment() {
    return department;
  }


  public void setDepartment(String department) {
    
    
    
    this.department = department;
  }


  public EmployeesCreateEmployeeRequestEmployee office(String office) {
    
    
    
    
    this.office = office;
    return this;
  }

   /**
   * The office employee belongs to. Should be predefined in Personio. Otherwise will be ignored with showing meta error in the response.
   * @return office
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Madrid", value = "The office employee belongs to. Should be predefined in Personio. Otherwise will be ignored with showing meta error in the response.")

  public String getOffice() {
    return office;
  }


  public void setOffice(String office) {
    
    
    
    this.office = office;
  }


  public EmployeesCreateEmployeeRequestEmployee hireDate(LocalDate hireDate) {
    
    
    
    
    this.hireDate = hireDate;
    return this;
  }

   /**
   * Employee hire date. Format: \&quot;yyyy-mm-dd\&quot;. If &#x60;status&#x60; is not provided, it will be set to &#x60;active&#x60; if the hire date is in the past, or to &#x60;onboarding&#x60; if it&#39;s in the future.
   * @return hireDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Thu Jan 30 16:00:00 PST 2020", value = "Employee hire date. Format: \"yyyy-mm-dd\". If `status` is not provided, it will be set to `active` if the hire date is in the past, or to `onboarding` if it's in the future.")

  public LocalDate getHireDate() {
    return hireDate;
  }


  public void setHireDate(LocalDate hireDate) {
    
    
    
    this.hireDate = hireDate;
  }


  public EmployeesCreateEmployeeRequestEmployee weeklyWorkingHours(Double weeklyWorkingHours) {
    
    
    
    
    this.weeklyWorkingHours = weeklyWorkingHours;
    return this;
  }

  public EmployeesCreateEmployeeRequestEmployee weeklyWorkingHours(Integer weeklyWorkingHours) {
    
    
    
    
    this.weeklyWorkingHours = weeklyWorkingHours.doubleValue();
    return this;
  }

   /**
   * Get weeklyWorkingHours
   * @return weeklyWorkingHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "40", value = "")

  public Double getWeeklyWorkingHours() {
    return weeklyWorkingHours;
  }


  public void setWeeklyWorkingHours(Double weeklyWorkingHours) {
    
    
    
    this.weeklyWorkingHours = weeklyWorkingHours;
  }


  public EmployeesCreateEmployeeRequestEmployee status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Status of the employee. Overrides the status determined based on the value of &#x60;hire_date&#x60;.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "active", value = "Status of the employee. Overrides the status determined based on the value of `hire_date`.")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public EmployeesCreateEmployeeRequestEmployee supervisorId(Double supervisorId) {
    
    
    
    
    this.supervisorId = supervisorId;
    return this;
  }

  public EmployeesCreateEmployeeRequestEmployee supervisorId(Integer supervisorId) {
    
    
    
    
    this.supervisorId = supervisorId.doubleValue();
    return this;
  }

   /**
   * Employee ID of the Supervisor to be assigned. It needs to belong to a current existing employee, otherwise an error will be returned. If not present, no supervisor will be assigned.
   * @return supervisorId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5", value = "Employee ID of the Supervisor to be assigned. It needs to belong to a current existing employee, otherwise an error will be returned. If not present, no supervisor will be assigned.")

  public Double getSupervisorId() {
    return supervisorId;
  }


  public void setSupervisorId(Double supervisorId) {
    
    
    
    this.supervisorId = supervisorId;
  }


  public EmployeesCreateEmployeeRequestEmployee customAttributes(EmployeesCreateEmployeeRequestEmployeeCustomAttributes customAttributes) {
    
    
    
    
    this.customAttributes = customAttributes;
    return this;
  }

   /**
   * Get customAttributes
   * @return customAttributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeesCreateEmployeeRequestEmployeeCustomAttributes getCustomAttributes() {
    return customAttributes;
  }


  public void setCustomAttributes(EmployeesCreateEmployeeRequestEmployeeCustomAttributes customAttributes) {
    
    
    
    this.customAttributes = customAttributes;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeesCreateEmployeeRequestEmployee instance itself
   */
  public EmployeesCreateEmployeeRequestEmployee putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeesCreateEmployeeRequestEmployee employeesCreateEmployeeRequestEmployee = (EmployeesCreateEmployeeRequestEmployee) o;
    return Objects.equals(this.email, employeesCreateEmployeeRequestEmployee.email) &&
        Objects.equals(this.firstName, employeesCreateEmployeeRequestEmployee.firstName) &&
        Objects.equals(this.lastName, employeesCreateEmployeeRequestEmployee.lastName) &&
        Objects.equals(this.preferredName, employeesCreateEmployeeRequestEmployee.preferredName) &&
        Objects.equals(this.gender, employeesCreateEmployeeRequestEmployee.gender) &&
        Objects.equals(this.position, employeesCreateEmployeeRequestEmployee.position) &&
        Objects.equals(this.subcompany, employeesCreateEmployeeRequestEmployee.subcompany) &&
        Objects.equals(this.department, employeesCreateEmployeeRequestEmployee.department) &&
        Objects.equals(this.office, employeesCreateEmployeeRequestEmployee.office) &&
        Objects.equals(this.hireDate, employeesCreateEmployeeRequestEmployee.hireDate) &&
        Objects.equals(this.weeklyWorkingHours, employeesCreateEmployeeRequestEmployee.weeklyWorkingHours) &&
        Objects.equals(this.status, employeesCreateEmployeeRequestEmployee.status) &&
        Objects.equals(this.supervisorId, employeesCreateEmployeeRequestEmployee.supervisorId) &&
        Objects.equals(this.customAttributes, employeesCreateEmployeeRequestEmployee.customAttributes)&&
        Objects.equals(this.additionalProperties, employeesCreateEmployeeRequestEmployee.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, firstName, lastName, preferredName, gender, position, subcompany, department, office, hireDate, weeklyWorkingHours, status, supervisorId, customAttributes, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeesCreateEmployeeRequestEmployee {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    preferredName: ").append(toIndentedString(preferredName)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    subcompany: ").append(toIndentedString(subcompany)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    office: ").append(toIndentedString(office)).append("\n");
    sb.append("    hireDate: ").append(toIndentedString(hireDate)).append("\n");
    sb.append("    weeklyWorkingHours: ").append(toIndentedString(weeklyWorkingHours)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    supervisorId: ").append(toIndentedString(supervisorId)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("first_name");
    openapiFields.add("last_name");
    openapiFields.add("preferred_name");
    openapiFields.add("gender");
    openapiFields.add("position");
    openapiFields.add("subcompany");
    openapiFields.add("department");
    openapiFields.add("office");
    openapiFields.add("hire_date");
    openapiFields.add("weekly_working_hours");
    openapiFields.add("status");
    openapiFields.add("supervisor_id");
    openapiFields.add("custom_attributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("first_name");
    openapiRequiredFields.add("last_name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeesCreateEmployeeRequestEmployee
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeesCreateEmployeeRequestEmployee.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeesCreateEmployeeRequestEmployee is not found in the empty JSON string", EmployeesCreateEmployeeRequestEmployee.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmployeesCreateEmployeeRequestEmployee.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if (!jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if ((jsonObj.get("preferred_name") != null && !jsonObj.get("preferred_name").isJsonNull()) && !jsonObj.get("preferred_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferred_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferred_name").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if ((jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) && !jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      if ((jsonObj.get("subcompany") != null && !jsonObj.get("subcompany").isJsonNull()) && !jsonObj.get("subcompany").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subcompany` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subcompany").toString()));
      }
      if ((jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) && !jsonObj.get("department").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `department` to be a primitive type in the JSON string but got `%s`", jsonObj.get("department").toString()));
      }
      if ((jsonObj.get("office") != null && !jsonObj.get("office").isJsonNull()) && !jsonObj.get("office").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `office` to be a primitive type in the JSON string but got `%s`", jsonObj.get("office").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `custom_attributes`
      if (jsonObj.get("custom_attributes") != null && !jsonObj.get("custom_attributes").isJsonNull()) {
        EmployeesCreateEmployeeRequestEmployeeCustomAttributes.validateJsonObject(jsonObj.getAsJsonObject("custom_attributes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeesCreateEmployeeRequestEmployee.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeesCreateEmployeeRequestEmployee' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeesCreateEmployeeRequestEmployee> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeesCreateEmployeeRequestEmployee.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeesCreateEmployeeRequestEmployee>() {
           @Override
           public void write(JsonWriter out, EmployeesCreateEmployeeRequestEmployee value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeesCreateEmployeeRequestEmployee read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeesCreateEmployeeRequestEmployee instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeesCreateEmployeeRequestEmployee given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeesCreateEmployeeRequestEmployee
  * @throws IOException if the JSON string is invalid with respect to EmployeesCreateEmployeeRequestEmployee
  */
  public static EmployeesCreateEmployeeRequestEmployee fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeesCreateEmployeeRequestEmployee.class);
  }

 /**
  * Convert an instance of EmployeesCreateEmployeeRequestEmployee to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

