/*
 * Personnel Data
 * API for reading and writing personnel data including data about attendances, absences, documents, etc
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PublicReportItemsAttributesFiltersInner;
import com.konfigthis.client.model.PublicReportItemsAttributesItemsInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PublicReportItemsAttributes
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PublicReportItemsAttributes {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_AUTHOR_FIRST_NAME = "author_first_name";
  @SerializedName(SERIALIZED_NAME_AUTHOR_FIRST_NAME)
  private String authorFirstName;

  public static final String SERIALIZED_NAME_AUTHOR_LAST_NAME = "author_last_name";
  @SerializedName(SERIALIZED_NAME_AUTHOR_LAST_NAME)
  private String authorLastName;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    POINT_IN_TIME("point_in_time");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    UP_TO_DATE("up_to_date"),
    
    UPDATING("updating"),
    
    UPDATE_FAILED("update_failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_DATA_REFRESHED_AT = "data_refreshed_at";
  @SerializedName(SERIALIZED_NAME_DATA_REFRESHED_AT)
  private OffsetDateTime dataRefreshedAt;

  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List<String> columns = null;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<PublicReportItemsAttributesFiltersInner> filters = null;

  /**
   * Gets or Sets periodType
   */
  @JsonAdapter(PeriodTypeEnum.Adapter.class)
 public enum PeriodTypeEnum {
    FIXED("fixed"),
    
    TODAY("today"),
    
    YESTERDAY("yesterday"),
    
    LAST_DAY_OF_THIS_WEEK("last_day_of_this_week"),
    
    LAST_DAY_OF_LAST_WEEK("last_day_of_last_week"),
    
    LAST_DAY_OF_THIS_MONTH("last_day_of_this_month"),
    
    LAST_DAY_OF_LAST_MONTH("last_day_of_last_month"),
    
    LAST_DAY_OF_THIS_QUARTER("last_day_of_this_quarter"),
    
    LAST_DAY_OF_LAST_QUARTER("last_day_of_last_quarter"),
    
    LAST_DAY_OF_THIS_YEAR("last_day_of_this_year"),
    
    LAST_DAY_OF_LAST_YEAR("last_day_of_last_year");

    private String value;

    PeriodTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PeriodTypeEnum fromValue(String value) {
      for (PeriodTypeEnum b : PeriodTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PeriodTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeriodTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PeriodTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PeriodTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PERIOD_TYPE = "period_type";
  @SerializedName(SERIALIZED_NAME_PERIOD_TYPE)
  private PeriodTypeEnum periodType;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<PublicReportItemsAttributesItemsInner> items = null;

  public PublicReportItemsAttributes() {
  }

  public PublicReportItemsAttributes description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Shows vacations of all employees on a specific date", value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public PublicReportItemsAttributes id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "eb7482f3-2323-43e2-87ed-99d2399e8e22", value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public PublicReportItemsAttributes name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Employee vacations at a specific point in time", value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public PublicReportItemsAttributes authorFirstName(String authorFirstName) {
    
    
    
    
    this.authorFirstName = authorFirstName;
    return this;
  }

   /**
   * Report author
   * @return authorFirstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Robert", value = "Report author")

  public String getAuthorFirstName() {
    return authorFirstName;
  }


  public void setAuthorFirstName(String authorFirstName) {
    
    
    
    this.authorFirstName = authorFirstName;
  }


  public PublicReportItemsAttributes authorLastName(String authorLastName) {
    
    
    
    
    this.authorLastName = authorLastName;
    return this;
  }

   /**
   * Report author
   * @return authorLastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Sirano", value = "Report author")

  public String getAuthorLastName() {
    return authorLastName;
  }


  public void setAuthorLastName(String authorLastName) {
    
    
    
    this.authorLastName = authorLastName;
  }


  public PublicReportItemsAttributes type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "POINT_IN_TIME", value = "")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public PublicReportItemsAttributes status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "created", value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public PublicReportItemsAttributes startDate(OffsetDateTime startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    
    
    
    this.startDate = startDate;
  }


  public PublicReportItemsAttributes endDate(OffsetDateTime endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getEndDate() {
    return endDate;
  }


  public void setEndDate(OffsetDateTime endDate) {
    
    
    
    this.endDate = endDate;
  }


  public PublicReportItemsAttributes createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-04-10T17:32:28Z", value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public PublicReportItemsAttributes updatedAt(OffsetDateTime updatedAt) {
    
    
    
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-04-10T17:32:28Z", value = "")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    
    
    
    this.updatedAt = updatedAt;
  }


  public PublicReportItemsAttributes dataRefreshedAt(OffsetDateTime dataRefreshedAt) {
    
    
    
    
    this.dataRefreshedAt = dataRefreshedAt;
    return this;
  }

   /**
   * Get dataRefreshedAt
   * @return dataRefreshedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-04-10T17:32:28Z", value = "")

  public OffsetDateTime getDataRefreshedAt() {
    return dataRefreshedAt;
  }


  public void setDataRefreshedAt(OffsetDateTime dataRefreshedAt) {
    
    
    
    this.dataRefreshedAt = dataRefreshedAt;
  }


  public PublicReportItemsAttributes columns(List<String> columns) {
    
    
    
    
    this.columns = columns;
    return this;
  }

  public PublicReportItemsAttributes addColumnsItem(String columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<>();
    }
    this.columns.add(columnsItem);
    return this;
  }

   /**
   * Get columns
   * @return columns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getColumns() {
    return columns;
  }


  public void setColumns(List<String> columns) {
    
    
    
    this.columns = columns;
  }


  public PublicReportItemsAttributes filters(List<PublicReportItemsAttributesFiltersInner> filters) {
    
    
    
    
    this.filters = filters;
    return this;
  }

  public PublicReportItemsAttributes addFiltersItem(PublicReportItemsAttributesFiltersInner filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PublicReportItemsAttributesFiltersInner> getFilters() {
    return filters;
  }


  public void setFilters(List<PublicReportItemsAttributesFiltersInner> filters) {
    
    
    
    this.filters = filters;
  }


  public PublicReportItemsAttributes periodType(PeriodTypeEnum periodType) {
    
    
    
    
    this.periodType = periodType;
    return this;
  }

   /**
   * Get periodType
   * @return periodType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "FIXED", value = "")

  public PeriodTypeEnum getPeriodType() {
    return periodType;
  }


  public void setPeriodType(PeriodTypeEnum periodType) {
    
    
    
    this.periodType = periodType;
  }


  public PublicReportItemsAttributes items(List<PublicReportItemsAttributesItemsInner> items) {
    
    
    
    
    this.items = items;
    return this;
  }

  public PublicReportItemsAttributes addItemsItem(PublicReportItemsAttributesItemsInner itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PublicReportItemsAttributesItemsInner> getItems() {
    return items;
  }


  public void setItems(List<PublicReportItemsAttributesItemsInner> items) {
    
    
    
    this.items = items;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PublicReportItemsAttributes instance itself
   */
  public PublicReportItemsAttributes putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicReportItemsAttributes publicReportItemsAttributes = (PublicReportItemsAttributes) o;
    return Objects.equals(this.description, publicReportItemsAttributes.description) &&
        Objects.equals(this.id, publicReportItemsAttributes.id) &&
        Objects.equals(this.name, publicReportItemsAttributes.name) &&
        Objects.equals(this.authorFirstName, publicReportItemsAttributes.authorFirstName) &&
        Objects.equals(this.authorLastName, publicReportItemsAttributes.authorLastName) &&
        Objects.equals(this.type, publicReportItemsAttributes.type) &&
        Objects.equals(this.status, publicReportItemsAttributes.status) &&
        Objects.equals(this.startDate, publicReportItemsAttributes.startDate) &&
        Objects.equals(this.endDate, publicReportItemsAttributes.endDate) &&
        Objects.equals(this.createdAt, publicReportItemsAttributes.createdAt) &&
        Objects.equals(this.updatedAt, publicReportItemsAttributes.updatedAt) &&
        Objects.equals(this.dataRefreshedAt, publicReportItemsAttributes.dataRefreshedAt) &&
        Objects.equals(this.columns, publicReportItemsAttributes.columns) &&
        Objects.equals(this.filters, publicReportItemsAttributes.filters) &&
        Objects.equals(this.periodType, publicReportItemsAttributes.periodType) &&
        Objects.equals(this.items, publicReportItemsAttributes.items)&&
        Objects.equals(this.additionalProperties, publicReportItemsAttributes.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, name, authorFirstName, authorLastName, type, status, startDate, endDate, createdAt, updatedAt, dataRefreshedAt, columns, filters, periodType, items, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicReportItemsAttributes {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    authorFirstName: ").append(toIndentedString(authorFirstName)).append("\n");
    sb.append("    authorLastName: ").append(toIndentedString(authorLastName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    dataRefreshedAt: ").append(toIndentedString(dataRefreshedAt)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    periodType: ").append(toIndentedString(periodType)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("author_first_name");
    openapiFields.add("author_last_name");
    openapiFields.add("type");
    openapiFields.add("status");
    openapiFields.add("start_date");
    openapiFields.add("end_date");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");
    openapiFields.add("data_refreshed_at");
    openapiFields.add("columns");
    openapiFields.add("filters");
    openapiFields.add("period_type");
    openapiFields.add("items");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PublicReportItemsAttributes
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PublicReportItemsAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublicReportItemsAttributes is not found in the empty JSON string", PublicReportItemsAttributes.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("author_first_name") != null && !jsonObj.get("author_first_name").isJsonNull()) && !jsonObj.get("author_first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author_first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author_first_name").toString()));
      }
      if ((jsonObj.get("author_last_name") != null && !jsonObj.get("author_last_name").isJsonNull()) && !jsonObj.get("author_last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author_last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author_last_name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("columns") != null && !jsonObj.get("columns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `columns` to be an array in the JSON string but got `%s`", jsonObj.get("columns").toString()));
      }
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            PublicReportItemsAttributesFiltersInner.validateJsonObject(jsonArrayfilters.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("period_type") != null && !jsonObj.get("period_type").isJsonNull()) && !jsonObj.get("period_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `period_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("period_type").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            PublicReportItemsAttributesItemsInner.validateJsonObject(jsonArrayitems.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublicReportItemsAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublicReportItemsAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublicReportItemsAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublicReportItemsAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<PublicReportItemsAttributes>() {
           @Override
           public void write(JsonWriter out, PublicReportItemsAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PublicReportItemsAttributes read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PublicReportItemsAttributes instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PublicReportItemsAttributes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PublicReportItemsAttributes
  * @throws IOException if the JSON string is invalid with respect to PublicReportItemsAttributes
  */
  public static PublicReportItemsAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublicReportItemsAttributes.class);
  }

 /**
  * Convert an instance of PublicReportItemsAttributes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

