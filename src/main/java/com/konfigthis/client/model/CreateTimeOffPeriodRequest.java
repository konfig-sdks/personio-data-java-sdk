/*
 * Personnel Data
 * API for reading and writing personnel data including data about attendances, absences, documents, etc
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CreateTimeOffPeriodRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CreateTimeOffPeriodRequest {
  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employee_id";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private Integer employeeId;

  public static final String SERIALIZED_NAME_TIME_OFF_TYPE_ID = "time_off_type_id";
  @SerializedName(SERIALIZED_NAME_TIME_OFF_TYPE_ID)
  private Integer timeOffTypeId;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_HALF_DAY_START = "half_day_start";
  @SerializedName(SERIALIZED_NAME_HALF_DAY_START)
  private Boolean halfDayStart;

  public static final String SERIALIZED_NAME_HALF_DAY_END = "half_day_end";
  @SerializedName(SERIALIZED_NAME_HALF_DAY_END)
  private Boolean halfDayEnd;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_SKIP_APPROVAL = "skip_approval";
  @SerializedName(SERIALIZED_NAME_SKIP_APPROVAL)
  private Boolean skipApproval;

  public CreateTimeOffPeriodRequest() {
  }

  public CreateTimeOffPeriodRequest employeeId(Integer employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * Employee identifier
   * @return employeeId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Employee identifier")

  public Integer getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(Integer employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public CreateTimeOffPeriodRequest timeOffTypeId(Integer timeOffTypeId) {
    
    
    
    
    this.timeOffTypeId = timeOffTypeId;
    return this;
  }

   /**
   * Time-off type identifier
   * @return timeOffTypeId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Time-off type identifier")

  public Integer getTimeOffTypeId() {
    return timeOffTypeId;
  }


  public void setTimeOffTypeId(Integer timeOffTypeId) {
    
    
    
    this.timeOffTypeId = timeOffTypeId;
  }


  public CreateTimeOffPeriodRequest startDate(LocalDate startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Absence start date. Format: yyyy-mm-dd
   * @return startDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Thu Jan 30 16:00:00 PST 2020", required = true, value = "Absence start date. Format: yyyy-mm-dd")

  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(LocalDate startDate) {
    
    
    
    this.startDate = startDate;
  }


  public CreateTimeOffPeriodRequest endDate(LocalDate endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Absence end date. Format: yyyy-mm-dd
   * @return endDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Thu Jan 30 16:00:00 PST 2020", required = true, value = "Absence end date. Format: yyyy-mm-dd")

  public LocalDate getEndDate() {
    return endDate;
  }


  public void setEndDate(LocalDate endDate) {
    
    
    
    this.endDate = endDate;
  }


  public CreateTimeOffPeriodRequest halfDayStart(Boolean halfDayStart) {
    
    
    
    
    this.halfDayStart = halfDayStart;
    return this;
  }

   /**
   * Whether the start date is a half-day off.
   * @return halfDayStart
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Whether the start date is a half-day off.")

  public Boolean getHalfDayStart() {
    return halfDayStart;
  }


  public void setHalfDayStart(Boolean halfDayStart) {
    
    
    
    this.halfDayStart = halfDayStart;
  }


  public CreateTimeOffPeriodRequest halfDayEnd(Boolean halfDayEnd) {
    
    
    
    
    this.halfDayEnd = halfDayEnd;
    return this;
  }

   /**
   * Whether the end date is a half-day off.
   * @return halfDayEnd
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Whether the end date is a half-day off.")

  public Boolean getHalfDayEnd() {
    return halfDayEnd;
  }


  public void setHalfDayEnd(Boolean halfDayEnd) {
    
    
    
    this.halfDayEnd = halfDayEnd;
  }


  public CreateTimeOffPeriodRequest comment(String comment) {
    
    
    
    
    this.comment = comment;
    return this;
  }

   /**
   * Optional comment
   * @return comment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Some Comment", value = "Optional comment")

  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    
    
    
    this.comment = comment;
  }


  public CreateTimeOffPeriodRequest skipApproval(Boolean skipApproval) {
    
    
    
    
    this.skipApproval = skipApproval;
    return this;
  }

   /**
   * Optional, default value is true. If set to false, the approval status of the absence request will be \&quot;pending\&quot; if an approval rule is set for the absence type in Personio. The respective approval flow will be triggered.
   * @return skipApproval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Optional, default value is true. If set to false, the approval status of the absence request will be \"pending\" if an approval rule is set for the absence type in Personio. The respective approval flow will be triggered.")

  public Boolean getSkipApproval() {
    return skipApproval;
  }


  public void setSkipApproval(Boolean skipApproval) {
    
    
    
    this.skipApproval = skipApproval;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CreateTimeOffPeriodRequest instance itself
   */
  public CreateTimeOffPeriodRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTimeOffPeriodRequest createTimeOffPeriodRequest = (CreateTimeOffPeriodRequest) o;
    return Objects.equals(this.employeeId, createTimeOffPeriodRequest.employeeId) &&
        Objects.equals(this.timeOffTypeId, createTimeOffPeriodRequest.timeOffTypeId) &&
        Objects.equals(this.startDate, createTimeOffPeriodRequest.startDate) &&
        Objects.equals(this.endDate, createTimeOffPeriodRequest.endDate) &&
        Objects.equals(this.halfDayStart, createTimeOffPeriodRequest.halfDayStart) &&
        Objects.equals(this.halfDayEnd, createTimeOffPeriodRequest.halfDayEnd) &&
        Objects.equals(this.comment, createTimeOffPeriodRequest.comment) &&
        Objects.equals(this.skipApproval, createTimeOffPeriodRequest.skipApproval)&&
        Objects.equals(this.additionalProperties, createTimeOffPeriodRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employeeId, timeOffTypeId, startDate, endDate, halfDayStart, halfDayEnd, comment, skipApproval, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTimeOffPeriodRequest {\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    timeOffTypeId: ").append(toIndentedString(timeOffTypeId)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    halfDayStart: ").append(toIndentedString(halfDayStart)).append("\n");
    sb.append("    halfDayEnd: ").append(toIndentedString(halfDayEnd)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    skipApproval: ").append(toIndentedString(skipApproval)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("employee_id");
    openapiFields.add("time_off_type_id");
    openapiFields.add("start_date");
    openapiFields.add("end_date");
    openapiFields.add("half_day_start");
    openapiFields.add("half_day_end");
    openapiFields.add("comment");
    openapiFields.add("skip_approval");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("employee_id");
    openapiRequiredFields.add("time_off_type_id");
    openapiRequiredFields.add("start_date");
    openapiRequiredFields.add("end_date");
    openapiRequiredFields.add("half_day_start");
    openapiRequiredFields.add("half_day_end");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateTimeOffPeriodRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateTimeOffPeriodRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateTimeOffPeriodRequest is not found in the empty JSON string", CreateTimeOffPeriodRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateTimeOffPeriodRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateTimeOffPeriodRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateTimeOffPeriodRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateTimeOffPeriodRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateTimeOffPeriodRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateTimeOffPeriodRequest>() {
           @Override
           public void write(JsonWriter out, CreateTimeOffPeriodRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateTimeOffPeriodRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CreateTimeOffPeriodRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateTimeOffPeriodRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateTimeOffPeriodRequest
  * @throws IOException if the JSON string is invalid with respect to CreateTimeOffPeriodRequest
  */
  public static CreateTimeOffPeriodRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateTimeOffPeriodRequest.class);
  }

 /**
  * Convert an instance of CreateTimeOffPeriodRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

