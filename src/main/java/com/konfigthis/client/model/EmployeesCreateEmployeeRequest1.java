/*
 * Personnel Data
 * API for reading and writing personnel data including data about attendances, absences, documents, etc
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeesCreateEmployeeRequest1
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeesCreateEmployeeRequest1 {
  public static final String SERIALIZED_NAME_EMPLOYEE_EMAIL = "employee[email]";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_EMAIL)
  private String employeeEmail;

  public static final String SERIALIZED_NAME_EMPLOYEE_FIRST_NAME = "employee[first_name]";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_FIRST_NAME)
  private String employeeFirstName;

  public static final String SERIALIZED_NAME_EMPLOYEE_LAST_NAME = "employee[last_name]";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_LAST_NAME)
  private String employeeLastName;

  public static final String SERIALIZED_NAME_EMPLOYEE_PREFERRED_NAME = "employee[preferred_name]";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_PREFERRED_NAME)
  private String employeePreferredName;

  /**
   * Employee gender
   */
  @JsonAdapter(EmployeeGenderEnum.Adapter.class)
 public enum EmployeeGenderEnum {
    MALE("male"),
    
    FEMALE("female"),
    
    DIVERSE("diverse");

    private String value;

    EmployeeGenderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmployeeGenderEnum fromValue(String value) {
      for (EmployeeGenderEnum b : EmployeeGenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmployeeGenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmployeeGenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmployeeGenderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmployeeGenderEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EMPLOYEE_GENDER = "employee[gender]";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_GENDER)
  private EmployeeGenderEnum employeeGender;

  public static final String SERIALIZED_NAME_EMPLOYEE_POSITION = "employee[position]";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_POSITION)
  private String employeePosition;

  public static final String SERIALIZED_NAME_EMPLOYEE_DEPARTMENT = "employee[department]";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_DEPARTMENT)
  private String employeeDepartment;

  public static final String SERIALIZED_NAME_EMPLOYEE_HIRE_DATE = "employee[hire_date]";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_HIRE_DATE)
  private LocalDate employeeHireDate;

  public static final String SERIALIZED_NAME_EMPLOYEE_WEEKLY_WORKING_HOURS = "employee[weekly_working_hours]";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_WEEKLY_WORKING_HOURS)
  private Double employeeWeeklyWorkingHours;

  public static final String SERIALIZED_NAME_EMPLOYEE_SUPERVISOR_ID = "employee[supervisor_id]";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_SUPERVISOR_ID)
  private Double employeeSupervisorId;

  /**
   * Employee status
   */
  @JsonAdapter(EmployeeStatusEnum.Adapter.class)
 public enum EmployeeStatusEnum {
    ONBOARDING("onboarding"),
    
    ACTIVE("active"),
    
    LEAVE("leave"),
    
    INACTIVE("inactive");

    private String value;

    EmployeeStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmployeeStatusEnum fromValue(String value) {
      for (EmployeeStatusEnum b : EmployeeStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmployeeStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmployeeStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmployeeStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmployeeStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EMPLOYEE_STATUS = "employee[status]";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_STATUS)
  private EmployeeStatusEnum employeeStatus;

  public EmployeesCreateEmployeeRequest1() {
  }

  public EmployeesCreateEmployeeRequest1 employeeEmail(String employeeEmail) {
    
    
    
    
    this.employeeEmail = employeeEmail;
    return this;
  }

   /**
   * Employee email
   * @return employeeEmail
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Employee email")

  public String getEmployeeEmail() {
    return employeeEmail;
  }


  public void setEmployeeEmail(String employeeEmail) {
    
    
    
    this.employeeEmail = employeeEmail;
  }


  public EmployeesCreateEmployeeRequest1 employeeFirstName(String employeeFirstName) {
    
    
    
    
    this.employeeFirstName = employeeFirstName;
    return this;
  }

   /**
   * Employee first name
   * @return employeeFirstName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Employee first name")

  public String getEmployeeFirstName() {
    return employeeFirstName;
  }


  public void setEmployeeFirstName(String employeeFirstName) {
    
    
    
    this.employeeFirstName = employeeFirstName;
  }


  public EmployeesCreateEmployeeRequest1 employeeLastName(String employeeLastName) {
    
    
    
    
    this.employeeLastName = employeeLastName;
    return this;
  }

   /**
   * Employee last name
   * @return employeeLastName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Employee last name")

  public String getEmployeeLastName() {
    return employeeLastName;
  }


  public void setEmployeeLastName(String employeeLastName) {
    
    
    
    this.employeeLastName = employeeLastName;
  }


  public EmployeesCreateEmployeeRequest1 employeePreferredName(String employeePreferredName) {
    
    
    
    
    this.employeePreferredName = employeePreferredName;
    return this;
  }

   /**
   * Employee preferred name
   * @return employeePreferredName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee preferred name")

  public String getEmployeePreferredName() {
    return employeePreferredName;
  }


  public void setEmployeePreferredName(String employeePreferredName) {
    
    
    
    this.employeePreferredName = employeePreferredName;
  }


  public EmployeesCreateEmployeeRequest1 employeeGender(EmployeeGenderEnum employeeGender) {
    
    
    
    
    this.employeeGender = employeeGender;
    return this;
  }

   /**
   * Employee gender
   * @return employeeGender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee gender")

  public EmployeeGenderEnum getEmployeeGender() {
    return employeeGender;
  }


  public void setEmployeeGender(EmployeeGenderEnum employeeGender) {
    
    
    
    this.employeeGender = employeeGender;
  }


  public EmployeesCreateEmployeeRequest1 employeePosition(String employeePosition) {
    
    
    
    
    this.employeePosition = employeePosition;
    return this;
  }

   /**
   * Employee position
   * @return employeePosition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee position")

  public String getEmployeePosition() {
    return employeePosition;
  }


  public void setEmployeePosition(String employeePosition) {
    
    
    
    this.employeePosition = employeePosition;
  }


  public EmployeesCreateEmployeeRequest1 employeeDepartment(String employeeDepartment) {
    
    
    
    
    this.employeeDepartment = employeeDepartment;
    return this;
  }

   /**
   * Employee department
   * @return employeeDepartment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee department")

  public String getEmployeeDepartment() {
    return employeeDepartment;
  }


  public void setEmployeeDepartment(String employeeDepartment) {
    
    
    
    this.employeeDepartment = employeeDepartment;
  }


  public EmployeesCreateEmployeeRequest1 employeeHireDate(LocalDate employeeHireDate) {
    
    
    
    
    this.employeeHireDate = employeeHireDate;
    return this;
  }

   /**
   * Employee hire date. Format: yyyy-mm-dd
   * @return employeeHireDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Thu Jan 30 16:00:00 PST 2020", value = "Employee hire date. Format: yyyy-mm-dd")

  public LocalDate getEmployeeHireDate() {
    return employeeHireDate;
  }


  public void setEmployeeHireDate(LocalDate employeeHireDate) {
    
    
    
    this.employeeHireDate = employeeHireDate;
  }


  public EmployeesCreateEmployeeRequest1 employeeWeeklyWorkingHours(Double employeeWeeklyWorkingHours) {
    
    
    
    
    this.employeeWeeklyWorkingHours = employeeWeeklyWorkingHours;
    return this;
  }

  public EmployeesCreateEmployeeRequest1 employeeWeeklyWorkingHours(Integer employeeWeeklyWorkingHours) {
    
    
    
    
    this.employeeWeeklyWorkingHours = employeeWeeklyWorkingHours.doubleValue();
    return this;
  }

   /**
   * Employee weekly working hours
   * @return employeeWeeklyWorkingHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee weekly working hours")

  public Double getEmployeeWeeklyWorkingHours() {
    return employeeWeeklyWorkingHours;
  }


  public void setEmployeeWeeklyWorkingHours(Double employeeWeeklyWorkingHours) {
    
    
    
    this.employeeWeeklyWorkingHours = employeeWeeklyWorkingHours;
  }


  public EmployeesCreateEmployeeRequest1 employeeSupervisorId(Double employeeSupervisorId) {
    
    
    
    
    this.employeeSupervisorId = employeeSupervisorId;
    return this;
  }

  public EmployeesCreateEmployeeRequest1 employeeSupervisorId(Integer employeeSupervisorId) {
    
    
    
    
    this.employeeSupervisorId = employeeSupervisorId.doubleValue();
    return this;
  }

   /**
   * Employee ID of the Supervisor to be assigned. It needs to belong to a current existing employee, otherwise an error will be returned. If not present, no supervisor will be assigned.
   * @return employeeSupervisorId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee ID of the Supervisor to be assigned. It needs to belong to a current existing employee, otherwise an error will be returned. If not present, no supervisor will be assigned.")

  public Double getEmployeeSupervisorId() {
    return employeeSupervisorId;
  }


  public void setEmployeeSupervisorId(Double employeeSupervisorId) {
    
    
    
    this.employeeSupervisorId = employeeSupervisorId;
  }


  public EmployeesCreateEmployeeRequest1 employeeStatus(EmployeeStatusEnum employeeStatus) {
    
    
    
    
    this.employeeStatus = employeeStatus;
    return this;
  }

   /**
   * Employee status
   * @return employeeStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee status")

  public EmployeeStatusEnum getEmployeeStatus() {
    return employeeStatus;
  }


  public void setEmployeeStatus(EmployeeStatusEnum employeeStatus) {
    
    
    
    this.employeeStatus = employeeStatus;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeesCreateEmployeeRequest1 instance itself
   */
  public EmployeesCreateEmployeeRequest1 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeesCreateEmployeeRequest1 employeesCreateEmployeeRequest1 = (EmployeesCreateEmployeeRequest1) o;
    return Objects.equals(this.employeeEmail, employeesCreateEmployeeRequest1.employeeEmail) &&
        Objects.equals(this.employeeFirstName, employeesCreateEmployeeRequest1.employeeFirstName) &&
        Objects.equals(this.employeeLastName, employeesCreateEmployeeRequest1.employeeLastName) &&
        Objects.equals(this.employeePreferredName, employeesCreateEmployeeRequest1.employeePreferredName) &&
        Objects.equals(this.employeeGender, employeesCreateEmployeeRequest1.employeeGender) &&
        Objects.equals(this.employeePosition, employeesCreateEmployeeRequest1.employeePosition) &&
        Objects.equals(this.employeeDepartment, employeesCreateEmployeeRequest1.employeeDepartment) &&
        Objects.equals(this.employeeHireDate, employeesCreateEmployeeRequest1.employeeHireDate) &&
        Objects.equals(this.employeeWeeklyWorkingHours, employeesCreateEmployeeRequest1.employeeWeeklyWorkingHours) &&
        Objects.equals(this.employeeSupervisorId, employeesCreateEmployeeRequest1.employeeSupervisorId) &&
        Objects.equals(this.employeeStatus, employeesCreateEmployeeRequest1.employeeStatus)&&
        Objects.equals(this.additionalProperties, employeesCreateEmployeeRequest1.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employeeEmail, employeeFirstName, employeeLastName, employeePreferredName, employeeGender, employeePosition, employeeDepartment, employeeHireDate, employeeWeeklyWorkingHours, employeeSupervisorId, employeeStatus, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeesCreateEmployeeRequest1 {\n");
    sb.append("    employeeEmail: ").append(toIndentedString(employeeEmail)).append("\n");
    sb.append("    employeeFirstName: ").append(toIndentedString(employeeFirstName)).append("\n");
    sb.append("    employeeLastName: ").append(toIndentedString(employeeLastName)).append("\n");
    sb.append("    employeePreferredName: ").append(toIndentedString(employeePreferredName)).append("\n");
    sb.append("    employeeGender: ").append(toIndentedString(employeeGender)).append("\n");
    sb.append("    employeePosition: ").append(toIndentedString(employeePosition)).append("\n");
    sb.append("    employeeDepartment: ").append(toIndentedString(employeeDepartment)).append("\n");
    sb.append("    employeeHireDate: ").append(toIndentedString(employeeHireDate)).append("\n");
    sb.append("    employeeWeeklyWorkingHours: ").append(toIndentedString(employeeWeeklyWorkingHours)).append("\n");
    sb.append("    employeeSupervisorId: ").append(toIndentedString(employeeSupervisorId)).append("\n");
    sb.append("    employeeStatus: ").append(toIndentedString(employeeStatus)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("employee[email]");
    openapiFields.add("employee[first_name]");
    openapiFields.add("employee[last_name]");
    openapiFields.add("employee[preferred_name]");
    openapiFields.add("employee[gender]");
    openapiFields.add("employee[position]");
    openapiFields.add("employee[department]");
    openapiFields.add("employee[hire_date]");
    openapiFields.add("employee[weekly_working_hours]");
    openapiFields.add("employee[supervisor_id]");
    openapiFields.add("employee[status]");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("employee[email]");
    openapiRequiredFields.add("employee[first_name]");
    openapiRequiredFields.add("employee[last_name]");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeesCreateEmployeeRequest1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeesCreateEmployeeRequest1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeesCreateEmployeeRequest1 is not found in the empty JSON string", EmployeesCreateEmployeeRequest1.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmployeesCreateEmployeeRequest1.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("employee[email]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee[email]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee[email]").toString()));
      }
      if (!jsonObj.get("employee[first_name]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee[first_name]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee[first_name]").toString()));
      }
      if (!jsonObj.get("employee[last_name]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee[last_name]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee[last_name]").toString()));
      }
      if ((jsonObj.get("employee[preferred_name]") != null && !jsonObj.get("employee[preferred_name]").isJsonNull()) && !jsonObj.get("employee[preferred_name]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee[preferred_name]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee[preferred_name]").toString()));
      }
      if ((jsonObj.get("employee[gender]") != null && !jsonObj.get("employee[gender]").isJsonNull()) && !jsonObj.get("employee[gender]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee[gender]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee[gender]").toString()));
      }
      if ((jsonObj.get("employee[position]") != null && !jsonObj.get("employee[position]").isJsonNull()) && !jsonObj.get("employee[position]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee[position]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee[position]").toString()));
      }
      if ((jsonObj.get("employee[department]") != null && !jsonObj.get("employee[department]").isJsonNull()) && !jsonObj.get("employee[department]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee[department]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee[department]").toString()));
      }
      if ((jsonObj.get("employee[status]") != null && !jsonObj.get("employee[status]").isJsonNull()) && !jsonObj.get("employee[status]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employee[status]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employee[status]").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeesCreateEmployeeRequest1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeesCreateEmployeeRequest1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeesCreateEmployeeRequest1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeesCreateEmployeeRequest1.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeesCreateEmployeeRequest1>() {
           @Override
           public void write(JsonWriter out, EmployeesCreateEmployeeRequest1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeesCreateEmployeeRequest1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeesCreateEmployeeRequest1 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeesCreateEmployeeRequest1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeesCreateEmployeeRequest1
  * @throws IOException if the JSON string is invalid with respect to EmployeesCreateEmployeeRequest1
  */
  public static EmployeesCreateEmployeeRequest1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeesCreateEmployeeRequest1.class);
  }

 /**
  * Convert an instance of EmployeesCreateEmployeeRequest1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

