/*
 * Personnel Data
 * API for reading and writing personnel data including data about attendances, absences, documents, etc
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AbsenceEntitlement;
import com.konfigthis.client.model.CostCenters;
import com.konfigthis.client.model.Department;
import com.konfigthis.client.model.EmployeeContractEndDate;
import com.konfigthis.client.model.EmployeeCreatedAt;
import com.konfigthis.client.model.EmployeeDynamic21827;
import com.konfigthis.client.model.EmployeeEmail;
import com.konfigthis.client.model.EmployeeEmploymentType;
import com.konfigthis.client.model.EmployeeFirstName;
import com.konfigthis.client.model.EmployeeFixSalary;
import com.konfigthis.client.model.EmployeeFixSalaryInterval;
import com.konfigthis.client.model.EmployeeGender;
import com.konfigthis.client.model.EmployeeHireDate;
import com.konfigthis.client.model.EmployeeHourlySalary;
import com.konfigthis.client.model.EmployeeId;
import com.konfigthis.client.model.EmployeeLastModifiedAt;
import com.konfigthis.client.model.EmployeeLastName;
import com.konfigthis.client.model.EmployeeLastWorkingDay;
import com.konfigthis.client.model.EmployeePosition;
import com.konfigthis.client.model.EmployeePreferredName;
import com.konfigthis.client.model.EmployeeProbationPeriodEnd;
import com.konfigthis.client.model.EmployeeProfilePicture;
import com.konfigthis.client.model.EmployeeStatus;
import com.konfigthis.client.model.EmployeeTerminationDate;
import com.konfigthis.client.model.EmployeeTerminationReason;
import com.konfigthis.client.model.EmployeeTerminationType;
import com.konfigthis.client.model.EmployeeVacationDayBalance;
import com.konfigthis.client.model.EmployeeWeeklyWorkingHours;
import com.konfigthis.client.model.HolidayCalendar;
import com.konfigthis.client.model.Office;
import com.konfigthis.client.model.Supervisor;
import com.konfigthis.client.model.Team;
import com.konfigthis.client.model.WorkSchedule;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Employee
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Employee {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private EmployeeId id;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private EmployeeFirstName firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private EmployeeLastName lastName;

  public static final String SERIALIZED_NAME_PREFERRED_NAME = "preferred_name";
  @SerializedName(SERIALIZED_NAME_PREFERRED_NAME)
  private EmployeePreferredName preferredName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private EmployeeEmail email;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private EmployeeGender gender;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EmployeeStatus status;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private EmployeePosition position;

  public static final String SERIALIZED_NAME_SUPERVISOR = "supervisor";
  @SerializedName(SERIALIZED_NAME_SUPERVISOR)
  private Supervisor supervisor;

  public static final String SERIALIZED_NAME_EMPLOYMENT_TYPE = "employment_type";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_TYPE)
  private EmployeeEmploymentType employmentType;

  public static final String SERIALIZED_NAME_WEEKLY_WORKING_HOURS = "weekly_working_hours";
  @SerializedName(SERIALIZED_NAME_WEEKLY_WORKING_HOURS)
  private EmployeeWeeklyWorkingHours weeklyWorkingHours;

  public static final String SERIALIZED_NAME_HIRE_DATE = "hire_date";
  @SerializedName(SERIALIZED_NAME_HIRE_DATE)
  private EmployeeHireDate hireDate;

  public static final String SERIALIZED_NAME_CONTRACT_END_DATE = "contract_end_date";
  @SerializedName(SERIALIZED_NAME_CONTRACT_END_DATE)
  private EmployeeContractEndDate contractEndDate;

  public static final String SERIALIZED_NAME_TERMINATION_DATE = "termination_date";
  @SerializedName(SERIALIZED_NAME_TERMINATION_DATE)
  private EmployeeTerminationDate terminationDate;

  public static final String SERIALIZED_NAME_TERMINATION_TYPE = "termination_type";
  @SerializedName(SERIALIZED_NAME_TERMINATION_TYPE)
  private EmployeeTerminationType terminationType;

  public static final String SERIALIZED_NAME_TERMINATION_REASON = "termination_reason";
  @SerializedName(SERIALIZED_NAME_TERMINATION_REASON)
  private EmployeeTerminationReason terminationReason;

  public static final String SERIALIZED_NAME_PROBATION_PERIOD_END = "probation_period_end";
  @SerializedName(SERIALIZED_NAME_PROBATION_PERIOD_END)
  private EmployeeProbationPeriodEnd probationPeriodEnd;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private EmployeeCreatedAt createdAt;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_AT = "last_modified_at";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_AT)
  private EmployeeLastModifiedAt lastModifiedAt;

  public static final String SERIALIZED_NAME_SUBCOMPANY = "subcompany";
  @SerializedName(SERIALIZED_NAME_SUBCOMPANY)
  private Office subcompany;

  public static final String SERIALIZED_NAME_OFFICE = "office";
  @SerializedName(SERIALIZED_NAME_OFFICE)
  private Office office;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private Department department;

  public static final String SERIALIZED_NAME_COST_CENTERS = "cost_centers";
  @SerializedName(SERIALIZED_NAME_COST_CENTERS)
  private CostCenters costCenters;

  public static final String SERIALIZED_NAME_HOLIDAY_CALENDAR = "holiday_calendar";
  @SerializedName(SERIALIZED_NAME_HOLIDAY_CALENDAR)
  private HolidayCalendar holidayCalendar;

  public static final String SERIALIZED_NAME_WORK_SCHEDULE = "work_schedule";
  @SerializedName(SERIALIZED_NAME_WORK_SCHEDULE)
  private WorkSchedule workSchedule;

  public static final String SERIALIZED_NAME_ABSENCE_ENTITLEMENT = "absence_entitlement";
  @SerializedName(SERIALIZED_NAME_ABSENCE_ENTITLEMENT)
  private AbsenceEntitlement absenceEntitlement;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private Team team;

  public static final String SERIALIZED_NAME_FIX_SALARY = "fix_salary";
  @SerializedName(SERIALIZED_NAME_FIX_SALARY)
  private EmployeeFixSalary fixSalary;

  public static final String SERIALIZED_NAME_FIX_SALARY_INTERVAL = "fix_salary_interval";
  @SerializedName(SERIALIZED_NAME_FIX_SALARY_INTERVAL)
  private EmployeeFixSalaryInterval fixSalaryInterval;

  public static final String SERIALIZED_NAME_HOURLY_SALARY = "hourly_salary";
  @SerializedName(SERIALIZED_NAME_HOURLY_SALARY)
  private EmployeeHourlySalary hourlySalary;

  public static final String SERIALIZED_NAME_VACATION_DAY_BALANCE = "vacation_day_balance";
  @SerializedName(SERIALIZED_NAME_VACATION_DAY_BALANCE)
  private EmployeeVacationDayBalance vacationDayBalance;

  public static final String SERIALIZED_NAME_LAST_WORKING_DAY = "last_working_day";
  @SerializedName(SERIALIZED_NAME_LAST_WORKING_DAY)
  private EmployeeLastWorkingDay lastWorkingDay;

  public static final String SERIALIZED_NAME_PROFILE_PICTURE = "profile_picture";
  @SerializedName(SERIALIZED_NAME_PROFILE_PICTURE)
  private EmployeeProfilePicture profilePicture;

  public static final String SERIALIZED_NAME_DYNAMIC21827 = "dynamic_21827";
  @SerializedName(SERIALIZED_NAME_DYNAMIC21827)
  private EmployeeDynamic21827 dynamic21827;

  public Employee() {
  }

  public Employee id(EmployeeId id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeId getId() {
    return id;
  }


  public void setId(EmployeeId id) {
    
    
    
    this.id = id;
  }


  public Employee firstName(EmployeeFirstName firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeFirstName getFirstName() {
    return firstName;
  }


  public void setFirstName(EmployeeFirstName firstName) {
    
    
    
    this.firstName = firstName;
  }


  public Employee lastName(EmployeeLastName lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeLastName getLastName() {
    return lastName;
  }


  public void setLastName(EmployeeLastName lastName) {
    
    
    
    this.lastName = lastName;
  }


  public Employee preferredName(EmployeePreferredName preferredName) {
    
    
    
    
    this.preferredName = preferredName;
    return this;
  }

   /**
   * Get preferredName
   * @return preferredName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeePreferredName getPreferredName() {
    return preferredName;
  }


  public void setPreferredName(EmployeePreferredName preferredName) {
    
    
    
    this.preferredName = preferredName;
  }


  public Employee email(EmployeeEmail email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeEmail getEmail() {
    return email;
  }


  public void setEmail(EmployeeEmail email) {
    
    
    
    this.email = email;
  }


  public Employee gender(EmployeeGender gender) {
    
    
    
    
    this.gender = gender;
    return this;
  }

   /**
   * Get gender
   * @return gender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeGender getGender() {
    return gender;
  }


  public void setGender(EmployeeGender gender) {
    
    
    
    this.gender = gender;
  }


  public Employee status(EmployeeStatus status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeStatus getStatus() {
    return status;
  }


  public void setStatus(EmployeeStatus status) {
    
    
    
    this.status = status;
  }


  public Employee position(EmployeePosition position) {
    
    
    
    
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeePosition getPosition() {
    return position;
  }


  public void setPosition(EmployeePosition position) {
    
    
    
    this.position = position;
  }


  public Employee supervisor(Supervisor supervisor) {
    
    
    
    
    this.supervisor = supervisor;
    return this;
  }

   /**
   * Get supervisor
   * @return supervisor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Supervisor getSupervisor() {
    return supervisor;
  }


  public void setSupervisor(Supervisor supervisor) {
    
    
    
    this.supervisor = supervisor;
  }


  public Employee employmentType(EmployeeEmploymentType employmentType) {
    
    
    
    
    this.employmentType = employmentType;
    return this;
  }

   /**
   * Get employmentType
   * @return employmentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeEmploymentType getEmploymentType() {
    return employmentType;
  }


  public void setEmploymentType(EmployeeEmploymentType employmentType) {
    
    
    
    this.employmentType = employmentType;
  }


  public Employee weeklyWorkingHours(EmployeeWeeklyWorkingHours weeklyWorkingHours) {
    
    
    
    
    this.weeklyWorkingHours = weeklyWorkingHours;
    return this;
  }

   /**
   * Get weeklyWorkingHours
   * @return weeklyWorkingHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeWeeklyWorkingHours getWeeklyWorkingHours() {
    return weeklyWorkingHours;
  }


  public void setWeeklyWorkingHours(EmployeeWeeklyWorkingHours weeklyWorkingHours) {
    
    
    
    this.weeklyWorkingHours = weeklyWorkingHours;
  }


  public Employee hireDate(EmployeeHireDate hireDate) {
    
    
    
    
    this.hireDate = hireDate;
    return this;
  }

   /**
   * Get hireDate
   * @return hireDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeHireDate getHireDate() {
    return hireDate;
  }


  public void setHireDate(EmployeeHireDate hireDate) {
    
    
    
    this.hireDate = hireDate;
  }


  public Employee contractEndDate(EmployeeContractEndDate contractEndDate) {
    
    
    
    
    this.contractEndDate = contractEndDate;
    return this;
  }

   /**
   * Get contractEndDate
   * @return contractEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeContractEndDate getContractEndDate() {
    return contractEndDate;
  }


  public void setContractEndDate(EmployeeContractEndDate contractEndDate) {
    
    
    
    this.contractEndDate = contractEndDate;
  }


  public Employee terminationDate(EmployeeTerminationDate terminationDate) {
    
    
    
    
    this.terminationDate = terminationDate;
    return this;
  }

   /**
   * Get terminationDate
   * @return terminationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeTerminationDate getTerminationDate() {
    return terminationDate;
  }


  public void setTerminationDate(EmployeeTerminationDate terminationDate) {
    
    
    
    this.terminationDate = terminationDate;
  }


  public Employee terminationType(EmployeeTerminationType terminationType) {
    
    
    
    
    this.terminationType = terminationType;
    return this;
  }

   /**
   * Get terminationType
   * @return terminationType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeTerminationType getTerminationType() {
    return terminationType;
  }


  public void setTerminationType(EmployeeTerminationType terminationType) {
    
    
    
    this.terminationType = terminationType;
  }


  public Employee terminationReason(EmployeeTerminationReason terminationReason) {
    
    
    
    
    this.terminationReason = terminationReason;
    return this;
  }

   /**
   * Get terminationReason
   * @return terminationReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeTerminationReason getTerminationReason() {
    return terminationReason;
  }


  public void setTerminationReason(EmployeeTerminationReason terminationReason) {
    
    
    
    this.terminationReason = terminationReason;
  }


  public Employee probationPeriodEnd(EmployeeProbationPeriodEnd probationPeriodEnd) {
    
    
    
    
    this.probationPeriodEnd = probationPeriodEnd;
    return this;
  }

   /**
   * Get probationPeriodEnd
   * @return probationPeriodEnd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeProbationPeriodEnd getProbationPeriodEnd() {
    return probationPeriodEnd;
  }


  public void setProbationPeriodEnd(EmployeeProbationPeriodEnd probationPeriodEnd) {
    
    
    
    this.probationPeriodEnd = probationPeriodEnd;
  }


  public Employee createdAt(EmployeeCreatedAt createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeCreatedAt getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(EmployeeCreatedAt createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public Employee lastModifiedAt(EmployeeLastModifiedAt lastModifiedAt) {
    
    
    
    
    this.lastModifiedAt = lastModifiedAt;
    return this;
  }

   /**
   * Get lastModifiedAt
   * @return lastModifiedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeLastModifiedAt getLastModifiedAt() {
    return lastModifiedAt;
  }


  public void setLastModifiedAt(EmployeeLastModifiedAt lastModifiedAt) {
    
    
    
    this.lastModifiedAt = lastModifiedAt;
  }


  public Employee subcompany(Office subcompany) {
    
    
    
    
    this.subcompany = subcompany;
    return this;
  }

   /**
   * Get subcompany
   * @return subcompany
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Office getSubcompany() {
    return subcompany;
  }


  public void setSubcompany(Office subcompany) {
    
    
    
    this.subcompany = subcompany;
  }


  public Employee office(Office office) {
    
    
    
    
    this.office = office;
    return this;
  }

   /**
   * Get office
   * @return office
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Office getOffice() {
    return office;
  }


  public void setOffice(Office office) {
    
    
    
    this.office = office;
  }


  public Employee department(Department department) {
    
    
    
    
    this.department = department;
    return this;
  }

   /**
   * Get department
   * @return department
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Department getDepartment() {
    return department;
  }


  public void setDepartment(Department department) {
    
    
    
    this.department = department;
  }


  public Employee costCenters(CostCenters costCenters) {
    
    
    
    
    this.costCenters = costCenters;
    return this;
  }

   /**
   * Get costCenters
   * @return costCenters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CostCenters getCostCenters() {
    return costCenters;
  }


  public void setCostCenters(CostCenters costCenters) {
    
    
    
    this.costCenters = costCenters;
  }


  public Employee holidayCalendar(HolidayCalendar holidayCalendar) {
    
    
    
    
    this.holidayCalendar = holidayCalendar;
    return this;
  }

   /**
   * Get holidayCalendar
   * @return holidayCalendar
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public HolidayCalendar getHolidayCalendar() {
    return holidayCalendar;
  }


  public void setHolidayCalendar(HolidayCalendar holidayCalendar) {
    
    
    
    this.holidayCalendar = holidayCalendar;
  }


  public Employee workSchedule(WorkSchedule workSchedule) {
    
    
    
    
    this.workSchedule = workSchedule;
    return this;
  }

   /**
   * Get workSchedule
   * @return workSchedule
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public WorkSchedule getWorkSchedule() {
    return workSchedule;
  }


  public void setWorkSchedule(WorkSchedule workSchedule) {
    
    
    
    this.workSchedule = workSchedule;
  }


  public Employee absenceEntitlement(AbsenceEntitlement absenceEntitlement) {
    
    
    
    
    this.absenceEntitlement = absenceEntitlement;
    return this;
  }

   /**
   * Get absenceEntitlement
   * @return absenceEntitlement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AbsenceEntitlement getAbsenceEntitlement() {
    return absenceEntitlement;
  }


  public void setAbsenceEntitlement(AbsenceEntitlement absenceEntitlement) {
    
    
    
    this.absenceEntitlement = absenceEntitlement;
  }


  public Employee team(Team team) {
    
    
    
    
    this.team = team;
    return this;
  }

   /**
   * Get team
   * @return team
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Team getTeam() {
    return team;
  }


  public void setTeam(Team team) {
    
    
    
    this.team = team;
  }


  public Employee fixSalary(EmployeeFixSalary fixSalary) {
    
    
    
    
    this.fixSalary = fixSalary;
    return this;
  }

   /**
   * Get fixSalary
   * @return fixSalary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeFixSalary getFixSalary() {
    return fixSalary;
  }


  public void setFixSalary(EmployeeFixSalary fixSalary) {
    
    
    
    this.fixSalary = fixSalary;
  }


  public Employee fixSalaryInterval(EmployeeFixSalaryInterval fixSalaryInterval) {
    
    
    
    
    this.fixSalaryInterval = fixSalaryInterval;
    return this;
  }

   /**
   * Get fixSalaryInterval
   * @return fixSalaryInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeFixSalaryInterval getFixSalaryInterval() {
    return fixSalaryInterval;
  }


  public void setFixSalaryInterval(EmployeeFixSalaryInterval fixSalaryInterval) {
    
    
    
    this.fixSalaryInterval = fixSalaryInterval;
  }


  public Employee hourlySalary(EmployeeHourlySalary hourlySalary) {
    
    
    
    
    this.hourlySalary = hourlySalary;
    return this;
  }

   /**
   * Get hourlySalary
   * @return hourlySalary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeHourlySalary getHourlySalary() {
    return hourlySalary;
  }


  public void setHourlySalary(EmployeeHourlySalary hourlySalary) {
    
    
    
    this.hourlySalary = hourlySalary;
  }


  public Employee vacationDayBalance(EmployeeVacationDayBalance vacationDayBalance) {
    
    
    
    
    this.vacationDayBalance = vacationDayBalance;
    return this;
  }

   /**
   * Get vacationDayBalance
   * @return vacationDayBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeVacationDayBalance getVacationDayBalance() {
    return vacationDayBalance;
  }


  public void setVacationDayBalance(EmployeeVacationDayBalance vacationDayBalance) {
    
    
    
    this.vacationDayBalance = vacationDayBalance;
  }


  public Employee lastWorkingDay(EmployeeLastWorkingDay lastWorkingDay) {
    
    
    
    
    this.lastWorkingDay = lastWorkingDay;
    return this;
  }

   /**
   * Get lastWorkingDay
   * @return lastWorkingDay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeLastWorkingDay getLastWorkingDay() {
    return lastWorkingDay;
  }


  public void setLastWorkingDay(EmployeeLastWorkingDay lastWorkingDay) {
    
    
    
    this.lastWorkingDay = lastWorkingDay;
  }


  public Employee profilePicture(EmployeeProfilePicture profilePicture) {
    
    
    
    
    this.profilePicture = profilePicture;
    return this;
  }

   /**
   * Get profilePicture
   * @return profilePicture
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeProfilePicture getProfilePicture() {
    return profilePicture;
  }


  public void setProfilePicture(EmployeeProfilePicture profilePicture) {
    
    
    
    this.profilePicture = profilePicture;
  }


  public Employee dynamic21827(EmployeeDynamic21827 dynamic21827) {
    
    
    
    
    this.dynamic21827 = dynamic21827;
    return this;
  }

   /**
   * Get dynamic21827
   * @return dynamic21827
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeDynamic21827 getDynamic21827() {
    return dynamic21827;
  }


  public void setDynamic21827(EmployeeDynamic21827 dynamic21827) {
    
    
    
    this.dynamic21827 = dynamic21827;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Employee instance itself
   */
  public Employee putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Employee employee = (Employee) o;
    return Objects.equals(this.id, employee.id) &&
        Objects.equals(this.firstName, employee.firstName) &&
        Objects.equals(this.lastName, employee.lastName) &&
        Objects.equals(this.preferredName, employee.preferredName) &&
        Objects.equals(this.email, employee.email) &&
        Objects.equals(this.gender, employee.gender) &&
        Objects.equals(this.status, employee.status) &&
        Objects.equals(this.position, employee.position) &&
        Objects.equals(this.supervisor, employee.supervisor) &&
        Objects.equals(this.employmentType, employee.employmentType) &&
        Objects.equals(this.weeklyWorkingHours, employee.weeklyWorkingHours) &&
        Objects.equals(this.hireDate, employee.hireDate) &&
        Objects.equals(this.contractEndDate, employee.contractEndDate) &&
        Objects.equals(this.terminationDate, employee.terminationDate) &&
        Objects.equals(this.terminationType, employee.terminationType) &&
        Objects.equals(this.terminationReason, employee.terminationReason) &&
        Objects.equals(this.probationPeriodEnd, employee.probationPeriodEnd) &&
        Objects.equals(this.createdAt, employee.createdAt) &&
        Objects.equals(this.lastModifiedAt, employee.lastModifiedAt) &&
        Objects.equals(this.subcompany, employee.subcompany) &&
        Objects.equals(this.office, employee.office) &&
        Objects.equals(this.department, employee.department) &&
        Objects.equals(this.costCenters, employee.costCenters) &&
        Objects.equals(this.holidayCalendar, employee.holidayCalendar) &&
        Objects.equals(this.workSchedule, employee.workSchedule) &&
        Objects.equals(this.absenceEntitlement, employee.absenceEntitlement) &&
        Objects.equals(this.team, employee.team) &&
        Objects.equals(this.fixSalary, employee.fixSalary) &&
        Objects.equals(this.fixSalaryInterval, employee.fixSalaryInterval) &&
        Objects.equals(this.hourlySalary, employee.hourlySalary) &&
        Objects.equals(this.vacationDayBalance, employee.vacationDayBalance) &&
        Objects.equals(this.lastWorkingDay, employee.lastWorkingDay) &&
        Objects.equals(this.profilePicture, employee.profilePicture) &&
        Objects.equals(this.dynamic21827, employee.dynamic21827)&&
        Objects.equals(this.additionalProperties, employee.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, firstName, lastName, preferredName, email, gender, status, position, supervisor, employmentType, weeklyWorkingHours, hireDate, contractEndDate, terminationDate, terminationType, terminationReason, probationPeriodEnd, createdAt, lastModifiedAt, subcompany, office, department, costCenters, holidayCalendar, workSchedule, absenceEntitlement, team, fixSalary, fixSalaryInterval, hourlySalary, vacationDayBalance, lastWorkingDay, profilePicture, dynamic21827, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Employee {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    preferredName: ").append(toIndentedString(preferredName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    supervisor: ").append(toIndentedString(supervisor)).append("\n");
    sb.append("    employmentType: ").append(toIndentedString(employmentType)).append("\n");
    sb.append("    weeklyWorkingHours: ").append(toIndentedString(weeklyWorkingHours)).append("\n");
    sb.append("    hireDate: ").append(toIndentedString(hireDate)).append("\n");
    sb.append("    contractEndDate: ").append(toIndentedString(contractEndDate)).append("\n");
    sb.append("    terminationDate: ").append(toIndentedString(terminationDate)).append("\n");
    sb.append("    terminationType: ").append(toIndentedString(terminationType)).append("\n");
    sb.append("    terminationReason: ").append(toIndentedString(terminationReason)).append("\n");
    sb.append("    probationPeriodEnd: ").append(toIndentedString(probationPeriodEnd)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastModifiedAt: ").append(toIndentedString(lastModifiedAt)).append("\n");
    sb.append("    subcompany: ").append(toIndentedString(subcompany)).append("\n");
    sb.append("    office: ").append(toIndentedString(office)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    costCenters: ").append(toIndentedString(costCenters)).append("\n");
    sb.append("    holidayCalendar: ").append(toIndentedString(holidayCalendar)).append("\n");
    sb.append("    workSchedule: ").append(toIndentedString(workSchedule)).append("\n");
    sb.append("    absenceEntitlement: ").append(toIndentedString(absenceEntitlement)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    fixSalary: ").append(toIndentedString(fixSalary)).append("\n");
    sb.append("    fixSalaryInterval: ").append(toIndentedString(fixSalaryInterval)).append("\n");
    sb.append("    hourlySalary: ").append(toIndentedString(hourlySalary)).append("\n");
    sb.append("    vacationDayBalance: ").append(toIndentedString(vacationDayBalance)).append("\n");
    sb.append("    lastWorkingDay: ").append(toIndentedString(lastWorkingDay)).append("\n");
    sb.append("    profilePicture: ").append(toIndentedString(profilePicture)).append("\n");
    sb.append("    dynamic21827: ").append(toIndentedString(dynamic21827)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("first_name");
    openapiFields.add("last_name");
    openapiFields.add("preferred_name");
    openapiFields.add("email");
    openapiFields.add("gender");
    openapiFields.add("status");
    openapiFields.add("position");
    openapiFields.add("supervisor");
    openapiFields.add("employment_type");
    openapiFields.add("weekly_working_hours");
    openapiFields.add("hire_date");
    openapiFields.add("contract_end_date");
    openapiFields.add("termination_date");
    openapiFields.add("termination_type");
    openapiFields.add("termination_reason");
    openapiFields.add("probation_period_end");
    openapiFields.add("created_at");
    openapiFields.add("last_modified_at");
    openapiFields.add("subcompany");
    openapiFields.add("office");
    openapiFields.add("department");
    openapiFields.add("cost_centers");
    openapiFields.add("holiday_calendar");
    openapiFields.add("work_schedule");
    openapiFields.add("absence_entitlement");
    openapiFields.add("team");
    openapiFields.add("fix_salary");
    openapiFields.add("fix_salary_interval");
    openapiFields.add("hourly_salary");
    openapiFields.add("vacation_day_balance");
    openapiFields.add("last_working_day");
    openapiFields.add("profile_picture");
    openapiFields.add("dynamic_21827");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Employee
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Employee.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Employee is not found in the empty JSON string", Employee.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        EmployeeId.validateJsonObject(jsonObj.getAsJsonObject("id"));
      }
      // validate the optional field `first_name`
      if (jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) {
        EmployeeFirstName.validateJsonObject(jsonObj.getAsJsonObject("first_name"));
      }
      // validate the optional field `last_name`
      if (jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) {
        EmployeeLastName.validateJsonObject(jsonObj.getAsJsonObject("last_name"));
      }
      // validate the optional field `preferred_name`
      if (jsonObj.get("preferred_name") != null && !jsonObj.get("preferred_name").isJsonNull()) {
        EmployeePreferredName.validateJsonObject(jsonObj.getAsJsonObject("preferred_name"));
      }
      // validate the optional field `email`
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) {
        EmployeeEmail.validateJsonObject(jsonObj.getAsJsonObject("email"));
      }
      // validate the optional field `gender`
      if (jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) {
        EmployeeGender.validateJsonObject(jsonObj.getAsJsonObject("gender"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        EmployeeStatus.validateJsonObject(jsonObj.getAsJsonObject("status"));
      }
      // validate the optional field `position`
      if (jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) {
        EmployeePosition.validateJsonObject(jsonObj.getAsJsonObject("position"));
      }
      // validate the optional field `supervisor`
      if (jsonObj.get("supervisor") != null && !jsonObj.get("supervisor").isJsonNull()) {
        Supervisor.validateJsonObject(jsonObj.getAsJsonObject("supervisor"));
      }
      // validate the optional field `employment_type`
      if (jsonObj.get("employment_type") != null && !jsonObj.get("employment_type").isJsonNull()) {
        EmployeeEmploymentType.validateJsonObject(jsonObj.getAsJsonObject("employment_type"));
      }
      // validate the optional field `weekly_working_hours`
      if (jsonObj.get("weekly_working_hours") != null && !jsonObj.get("weekly_working_hours").isJsonNull()) {
        EmployeeWeeklyWorkingHours.validateJsonObject(jsonObj.getAsJsonObject("weekly_working_hours"));
      }
      // validate the optional field `hire_date`
      if (jsonObj.get("hire_date") != null && !jsonObj.get("hire_date").isJsonNull()) {
        EmployeeHireDate.validateJsonObject(jsonObj.getAsJsonObject("hire_date"));
      }
      // validate the optional field `contract_end_date`
      if (jsonObj.get("contract_end_date") != null && !jsonObj.get("contract_end_date").isJsonNull()) {
        EmployeeContractEndDate.validateJsonObject(jsonObj.getAsJsonObject("contract_end_date"));
      }
      // validate the optional field `termination_date`
      if (jsonObj.get("termination_date") != null && !jsonObj.get("termination_date").isJsonNull()) {
        EmployeeTerminationDate.validateJsonObject(jsonObj.getAsJsonObject("termination_date"));
      }
      // validate the optional field `termination_type`
      if (jsonObj.get("termination_type") != null && !jsonObj.get("termination_type").isJsonNull()) {
        EmployeeTerminationType.validateJsonObject(jsonObj.getAsJsonObject("termination_type"));
      }
      // validate the optional field `termination_reason`
      if (jsonObj.get("termination_reason") != null && !jsonObj.get("termination_reason").isJsonNull()) {
        EmployeeTerminationReason.validateJsonObject(jsonObj.getAsJsonObject("termination_reason"));
      }
      // validate the optional field `probation_period_end`
      if (jsonObj.get("probation_period_end") != null && !jsonObj.get("probation_period_end").isJsonNull()) {
        EmployeeProbationPeriodEnd.validateJsonObject(jsonObj.getAsJsonObject("probation_period_end"));
      }
      // validate the optional field `created_at`
      if (jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) {
        EmployeeCreatedAt.validateJsonObject(jsonObj.getAsJsonObject("created_at"));
      }
      // validate the optional field `last_modified_at`
      if (jsonObj.get("last_modified_at") != null && !jsonObj.get("last_modified_at").isJsonNull()) {
        EmployeeLastModifiedAt.validateJsonObject(jsonObj.getAsJsonObject("last_modified_at"));
      }
      // validate the optional field `subcompany`
      if (jsonObj.get("subcompany") != null && !jsonObj.get("subcompany").isJsonNull()) {
        Office.validateJsonObject(jsonObj.getAsJsonObject("subcompany"));
      }
      // validate the optional field `office`
      if (jsonObj.get("office") != null && !jsonObj.get("office").isJsonNull()) {
        Office.validateJsonObject(jsonObj.getAsJsonObject("office"));
      }
      // validate the optional field `department`
      if (jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) {
        Department.validateJsonObject(jsonObj.getAsJsonObject("department"));
      }
      // validate the optional field `cost_centers`
      if (jsonObj.get("cost_centers") != null && !jsonObj.get("cost_centers").isJsonNull()) {
        CostCenters.validateJsonObject(jsonObj.getAsJsonObject("cost_centers"));
      }
      // validate the optional field `holiday_calendar`
      if (jsonObj.get("holiday_calendar") != null && !jsonObj.get("holiday_calendar").isJsonNull()) {
        HolidayCalendar.validateJsonObject(jsonObj.getAsJsonObject("holiday_calendar"));
      }
      // validate the optional field `work_schedule`
      if (jsonObj.get("work_schedule") != null && !jsonObj.get("work_schedule").isJsonNull()) {
        WorkSchedule.validateJsonObject(jsonObj.getAsJsonObject("work_schedule"));
      }
      // validate the optional field `absence_entitlement`
      if (jsonObj.get("absence_entitlement") != null && !jsonObj.get("absence_entitlement").isJsonNull()) {
        AbsenceEntitlement.validateJsonObject(jsonObj.getAsJsonObject("absence_entitlement"));
      }
      // validate the optional field `team`
      if (jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) {
        Team.validateJsonObject(jsonObj.getAsJsonObject("team"));
      }
      // validate the optional field `fix_salary`
      if (jsonObj.get("fix_salary") != null && !jsonObj.get("fix_salary").isJsonNull()) {
        EmployeeFixSalary.validateJsonObject(jsonObj.getAsJsonObject("fix_salary"));
      }
      // validate the optional field `fix_salary_interval`
      if (jsonObj.get("fix_salary_interval") != null && !jsonObj.get("fix_salary_interval").isJsonNull()) {
        EmployeeFixSalaryInterval.validateJsonObject(jsonObj.getAsJsonObject("fix_salary_interval"));
      }
      // validate the optional field `hourly_salary`
      if (jsonObj.get("hourly_salary") != null && !jsonObj.get("hourly_salary").isJsonNull()) {
        EmployeeHourlySalary.validateJsonObject(jsonObj.getAsJsonObject("hourly_salary"));
      }
      // validate the optional field `vacation_day_balance`
      if (jsonObj.get("vacation_day_balance") != null && !jsonObj.get("vacation_day_balance").isJsonNull()) {
        EmployeeVacationDayBalance.validateJsonObject(jsonObj.getAsJsonObject("vacation_day_balance"));
      }
      // validate the optional field `last_working_day`
      if (jsonObj.get("last_working_day") != null && !jsonObj.get("last_working_day").isJsonNull()) {
        EmployeeLastWorkingDay.validateJsonObject(jsonObj.getAsJsonObject("last_working_day"));
      }
      // validate the optional field `profile_picture`
      if (jsonObj.get("profile_picture") != null && !jsonObj.get("profile_picture").isJsonNull()) {
        EmployeeProfilePicture.validateJsonObject(jsonObj.getAsJsonObject("profile_picture"));
      }
      // validate the optional field `dynamic_21827`
      if (jsonObj.get("dynamic_21827") != null && !jsonObj.get("dynamic_21827").isJsonNull()) {
        EmployeeDynamic21827.validateJsonObject(jsonObj.getAsJsonObject("dynamic_21827"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Employee.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Employee' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Employee> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Employee.class));

       return (TypeAdapter<T>) new TypeAdapter<Employee>() {
           @Override
           public void write(JsonWriter out, Employee value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Employee read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Employee instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Employee given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Employee
  * @throws IOException if the JSON string is invalid with respect to Employee
  */
  public static Employee fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Employee.class);
  }

 /**
  * Convert an instance of Employee to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

